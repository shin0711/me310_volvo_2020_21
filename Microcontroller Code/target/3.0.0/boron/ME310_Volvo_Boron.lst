
f:/ME310/ME310_Volvo_Boron/target/3.0.0/boron/ME310_Volvo_Boron.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000037c0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d77e0  000d77e0  000077e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d77e8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  2003e4cc  000d77ec  0001e4cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002a4  2003e54c  2003e54c  0002e54c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d786c  000d786c  0002786c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d7894  000d7894  00027894  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00176dde  00000000  00000000  00027898  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001636e  00000000  00000000  0019e676  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0003756f  00000000  00000000  001b49e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000029f0  00000000  00000000  001ebf53  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000095c0  00000000  00000000  001ee943  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00037198  00000000  00000000  001f7f03  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003ad7e  00000000  00000000  0022f09b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0012c4ec  00000000  00000000  00269e19  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00007a0c  00000000  00000000  00396308  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 f8e7 	bl	d7204 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 f909 	bl	d7254 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e4cc 	.word	0x2003e4cc
   d404c:	000d77ec 	.word	0x000d77ec
   d4050:	2003e54c 	.word	0x2003e54c
   d4054:	2003e54c 	.word	0x2003e54c
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f001 fbd3 	bl	d580c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d77b8 	.word	0x000d77b8
   d4080:	000d77dc 	.word	0x000d77dc

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b826 	b.w	d40d4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fb53 	bl	d4734 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f001 bb7d 	b.w	d5790 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 b823 	b.w	d50e0 <malloc>

000d409a <_Znaj>:
   d409a:	f001 b821 	b.w	d50e0 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 b827 	b.w	d50f0 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d40b2:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d40b4:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d40b6:	4604      	mov	r4, r0
          _M_dispose();
   d40b8:	689b      	ldr	r3, [r3, #8]
   d40ba:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40bc:	68a3      	ldr	r3, [r4, #8]
   d40be:	3b01      	subs	r3, #1
   d40c0:	60a3      	str	r3, [r4, #8]
   d40c2:	b92b      	cbnz	r3, d40d0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d40c4:	6823      	ldr	r3, [r4, #0]
   d40c6:	4620      	mov	r0, r4
   d40c8:	68db      	ldr	r3, [r3, #12]
        }
    }
   d40ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d40ce:	4718      	bx	r3
    }
   d40d0:	bd10      	pop	{r4, pc}
	...

000d40d4 <setup>:
void publishData();
String generateData();


// setup() runs once, when the device is first turned on.
void setup() {
   d40d4:	b538      	push	{r3, r4, r5, lr}
  // Put initialization like pinMode and begin functions here.  
  Serial.begin(57600); // connect serial monitor
   d40d6:	f001 ff3b 	bl	d5f50 <_Z16_fetch_usbserialv>
   d40da:	f44f 4161 	mov.w	r1, #57600	; 0xe100
   d40de:	f001 ff2b 	bl	d5f38 <_ZN9USBSerial5beginEl>
  Serial1.begin(9600); // connect gps sensor
   d40e2:	f002 f807 	bl	d60f4 <_Z22__fetch_global_Serial1v>
   d40e6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40ea:	f001 ffff 	bl	d60ec <_ZN11USARTSerial5beginEm>
  // Time.zone(-7);       // switch the time zone to PST (UTC-7)
  Time.setFormat(TIME_FORMAT_ISO8601_FULL); // setup time format
   d40ee:	4b1b      	ldr	r3, [pc, #108]	; (d415c <setup+0x88>)
  state = STANDBY;
  prevState = STANDBY;

  isGeolocationValid = 0;

  nextEventTime = 500;
   d40f0:	4d1b      	ldr	r5, [pc, #108]	; (d4160 <setup+0x8c>)
            return format(now(), format_spec);
        }

        void setFormat(const char* format)
        {
            this->format_spec = format;
   d40f2:	681a      	ldr	r2, [r3, #0]
   d40f4:	4b1b      	ldr	r3, [pc, #108]	; (d4164 <setup+0x90>)
   d40f6:	601a      	str	r2, [r3, #0]
  pinMode(moisturePin, INPUT);
   d40f8:	4b1b      	ldr	r3, [pc, #108]	; (d4168 <setup+0x94>)
   d40fa:	2100      	movs	r1, #0
   d40fc:	8818      	ldrh	r0, [r3, #0]
   d40fe:	f002 f969 	bl	d63d4 <pinMode>
  pinMode(adapterPin, INPUT_PULLUP);
   d4102:	4b1a      	ldr	r3, [pc, #104]	; (d416c <setup+0x98>)
   d4104:	2102      	movs	r1, #2
   d4106:	8818      	ldrh	r0, [r3, #0]
   d4108:	f002 f964 	bl	d63d4 <pinMode>
  pinMode(switchButton, INPUT);
   d410c:	4b18      	ldr	r3, [pc, #96]	; (d4170 <setup+0x9c>)
   d410e:	2100      	movs	r1, #0
   d4110:	8818      	ldrh	r0, [r3, #0]
   d4112:	f002 f95f 	bl	d63d4 <pinMode>
  pinMode(activeLED, OUTPUT);
   d4116:	4b17      	ldr	r3, [pc, #92]	; (d4174 <setup+0xa0>)
   d4118:	2101      	movs	r1, #1
   d411a:	8818      	ldrh	r0, [r3, #0]
   d411c:	f002 f95a 	bl	d63d4 <pinMode>
  pinMode(standbyLED, OUTPUT);
   d4120:	4b15      	ldr	r3, [pc, #84]	; (d4178 <setup+0xa4>)
   d4122:	2101      	movs	r1, #1
   d4124:	8818      	ldrh	r0, [r3, #0]
   d4126:	f002 f955 	bl	d63d4 <pinMode>
  state = STANDBY;
   d412a:	4a14      	ldr	r2, [pc, #80]	; (d417c <setup+0xa8>)
   d412c:	2300      	movs	r3, #0
   d412e:	7013      	strb	r3, [r2, #0]
  prevState = STANDBY;
   d4130:	4a13      	ldr	r2, [pc, #76]	; (d4180 <setup+0xac>)
   d4132:	7013      	strb	r3, [r2, #0]
  isGeolocationValid = 0;
   d4134:	4a13      	ldr	r2, [pc, #76]	; (d4184 <setup+0xb0>)
  nextEventTime = 500;
   d4136:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
  isGeolocationValid = 0;
   d413a:	7013      	strb	r3, [r2, #0]
  nextEventTime = 500;
   d413c:	602c      	str	r4, [r5, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d413e:	f000 fe43 	bl	d4dc8 <HAL_Timer_Get_Milli_Seconds>
  tnow = millis();
   d4142:	4b11      	ldr	r3, [pc, #68]	; (d4188 <setup+0xb4>)
  tnext = tnow + nextEventTime;
   d4144:	4a11      	ldr	r2, [pc, #68]	; (d418c <setup+0xb8>)
  tnow = millis();
   d4146:	6018      	str	r0, [r3, #0]
  tnext = tnow + nextEventTime;
   d4148:	682b      	ldr	r3, [r5, #0]
   d414a:	4403      	add	r3, r0
   d414c:	6013      	str	r3, [r2, #0]

  nextCheckTime = 500;
   d414e:	4b10      	ldr	r3, [pc, #64]	; (d4190 <setup+0xbc>)
   d4150:	601c      	str	r4, [r3, #0]
  tcheck = tnow + nextCheckTime;
   d4152:	4b10      	ldr	r3, [pc, #64]	; (d4194 <setup+0xc0>)
   d4154:	4420      	add	r0, r4
   d4156:	6018      	str	r0, [r3, #0]
}
   d4158:	bd38      	pop	{r3, r4, r5, pc}
   d415a:	bf00      	nop
   d415c:	2003e4e4 	.word	0x2003e4e4
   d4160:	2003e608 	.word	0x2003e608
   d4164:	2003e63c 	.word	0x2003e63c
   d4168:	2003e4d4 	.word	0x2003e4d4
   d416c:	2003e4d0 	.word	0x2003e4d0
   d4170:	2003e4dc 	.word	0x2003e4dc
   d4174:	2003e4cc 	.word	0x2003e4cc
   d4178:	2003e4d8 	.word	0x2003e4d8
   d417c:	2003e60d 	.word	0x2003e60d
   d4180:	2003e60c 	.word	0x2003e60c
   d4184:	2003e5cc 	.word	0x2003e5cc
   d4188:	2003e618 	.word	0x2003e618
   d418c:	2003e614 	.word	0x2003e614
   d4190:	2003e604 	.word	0x2003e604
   d4194:	2003e610 	.word	0x2003e610

000d4198 <_Z14getGeolocationv>:
  tnext = tnow + nextEventTime;
  }
}


void getGeolocation() {
   d4198:	b538      	push	{r3, r4, r5, lr}
  // Get GPS location;
  while (Serial1.available()) {
    if (gps.encode(Serial1.read())) {
   d419a:	4c0f      	ldr	r4, [pc, #60]	; (d41d8 <_Z14getGeolocationv+0x40>)
      gps.f_get_position(&lat, &lon);
   d419c:	4d0f      	ldr	r5, [pc, #60]	; (d41dc <_Z14getGeolocationv+0x44>)
  while (Serial1.available()) {
   d419e:	f001 ffa9 	bl	d60f4 <_Z22__fetch_global_Serial1v>
   d41a2:	6803      	ldr	r3, [r0, #0]
   d41a4:	691b      	ldr	r3, [r3, #16]
   d41a6:	4798      	blx	r3
   d41a8:	b1a0      	cbz	r0, d41d4 <_Z14getGeolocationv+0x3c>
    if (gps.encode(Serial1.read())) {
   d41aa:	f001 ffa3 	bl	d60f4 <_Z22__fetch_global_Serial1v>
   d41ae:	6803      	ldr	r3, [r0, #0]
   d41b0:	695b      	ldr	r3, [r3, #20]
   d41b2:	4798      	blx	r3
   d41b4:	b2c1      	uxtb	r1, r0
   d41b6:	4620      	mov	r0, r4
   d41b8:	f000 fd24 	bl	d4c04 <_ZN7TinyGPS6encodeEc>
   d41bc:	2800      	cmp	r0, #0
   d41be:	d0ee      	beq.n	d419e <_Z14getGeolocationv+0x6>
      gps.f_get_position(&lat, &lon);
   d41c0:	2300      	movs	r3, #0
   d41c2:	462a      	mov	r2, r5
   d41c4:	4906      	ldr	r1, [pc, #24]	; (d41e0 <_Z14getGeolocationv+0x48>)
   d41c6:	4620      	mov	r0, r4
   d41c8:	f000 fd82 	bl	d4cd0 <_ZN7TinyGPS14f_get_positionEPfS0_Pm>
      isGeolocationValid = 1;
   d41cc:	4b05      	ldr	r3, [pc, #20]	; (d41e4 <_Z14getGeolocationv+0x4c>)
   d41ce:	2201      	movs	r2, #1
   d41d0:	701a      	strb	r2, [r3, #0]
   d41d2:	e7e4      	b.n	d419e <_Z14getGeolocationv+0x6>
    }
  }
}
   d41d4:	bd38      	pop	{r3, r4, r5, pc}
   d41d6:	bf00      	nop
   d41d8:	2003e554 	.word	0x2003e554
   d41dc:	2003e5fc 	.word	0x2003e5fc
   d41e0:	2003e5d0 	.word	0x2003e5d0
   d41e4:	2003e5cc 	.word	0x2003e5cc

000d41e8 <_Z13handleStandbyv>:


void handleStandby() {
   d41e8:	b508      	push	{r3, lr}
  Serial.print("Standing by...");
   d41ea:	f001 feb1 	bl	d5f50 <_Z16_fetch_usbserialv>
   d41ee:	4904      	ldr	r1, [pc, #16]	; (d4200 <_Z13handleStandbyv+0x18>)
   d41f0:	f001 fa3e 	bl	d5670 <_ZN5Print5printEPKc>
  nextEventTime = 1000;
   d41f4:	4b03      	ldr	r3, [pc, #12]	; (d4204 <_Z13handleStandbyv+0x1c>)
   d41f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d41fa:	601a      	str	r2, [r3, #0]
  // while (!digitalRead(switchButton)) {
  //   Serial.print(".");
  //   delay(1000);
  // }
  // state = MOISTURE_MODE;
}
   d41fc:	bd08      	pop	{r3, pc}
   d41fe:	bf00      	nop
   d4200:	000d7424 	.word	0x000d7424
   d4204:	2003e608 	.word	0x2003e608

000d4208 <_Z12generateDatav>:
//   // publishData();
//   state = STANDBY;
// }


String generateData() {
   d4208:	b5f0      	push	{r4, r5, r6, r7, lr}
  lat = 37.426224;
   d420a:	4f52      	ldr	r7, [pc, #328]	; (d4354 <_Z12generateDatav+0x14c>)
  lon = -122.171621;
   d420c:	4e52      	ldr	r6, [pc, #328]	; (d4358 <_Z12generateDatav+0x150>)
  lat = 37.426224;
   d420e:	4b53      	ldr	r3, [pc, #332]	; (d435c <_Z12generateDatav+0x154>)
   d4210:	603b      	str	r3, [r7, #0]
String generateData() {
   d4212:	b09d      	sub	sp, #116	; 0x74
  lon = -122.171621;
   d4214:	4b52      	ldr	r3, [pc, #328]	; (d4360 <_Z12generateDatav+0x158>)

  // Data inputs;
  String beaconID = "\"beaconID\":1,";
   d4216:	4953      	ldr	r1, [pc, #332]	; (d4364 <_Z12generateDatav+0x15c>)
  lon = -122.171621;
   d4218:	6033      	str	r3, [r6, #0]
String generateData() {
   d421a:	4604      	mov	r4, r0
  String beaconID = "\"beaconID\":1,";
   d421c:	4668      	mov	r0, sp
   d421e:	f001 f900 	bl	d5422 <_ZN6StringC1EPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4222:	4951      	ldr	r1, [pc, #324]	; (d4368 <_Z12generateDatav+0x160>)
  String moisture = "\"moistureLevel\":" + String(moistureReading) + ",";
   d4224:	4d51      	ldr	r5, [pc, #324]	; (d436c <_Z12generateDatav+0x164>)
   d4226:	a818      	add	r0, sp, #96	; 0x60
   d4228:	f001 f8fb 	bl	d5422 <_ZN6StringC1EPKc>
   d422c:	4b50      	ldr	r3, [pc, #320]	; (d4370 <_Z12generateDatav+0x168>)
   d422e:	220a      	movs	r2, #10
   d4230:	6819      	ldr	r1, [r3, #0]
   d4232:	a814      	add	r0, sp, #80	; 0x50
   d4234:	f001 f935 	bl	d54a2 <_ZN6StringC1Eih>
   d4238:	a914      	add	r1, sp, #80	; 0x50
   d423a:	a818      	add	r0, sp, #96	; 0x60
   d423c:	f001 f975 	bl	d552a <_ZplRK15StringSumHelperRK6String>
   d4240:	4629      	mov	r1, r5
   d4242:	f001 f97e 	bl	d5542 <_ZplRK15StringSumHelperPKc>
   d4246:	4601      	mov	r1, r0
   d4248:	a804      	add	r0, sp, #16
   d424a:	f001 f90d 	bl	d5468 <_ZN6StringC1ERKS_>
   d424e:	a814      	add	r0, sp, #80	; 0x50
   d4250:	f001 f89c 	bl	d538c <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4254:	a818      	add	r0, sp, #96	; 0x60
   d4256:	f001 f899 	bl	d538c <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
   d425a:	4946      	ldr	r1, [pc, #280]	; (d4374 <_Z12generateDatav+0x16c>)
   d425c:	a818      	add	r0, sp, #96	; 0x60
   d425e:	f001 f8e0 	bl	d5422 <_ZN6StringC1EPKc>
  String geoLat   = "\"geoLat\":" + String(lat, 6) + ",";
   d4262:	ed97 0a00 	vldr	s0, [r7]
   d4266:	2106      	movs	r1, #6
   d4268:	a814      	add	r0, sp, #80	; 0x50
   d426a:	f001 f92d 	bl	d54c8 <_ZN6StringC1Efi>
   d426e:	a914      	add	r1, sp, #80	; 0x50
   d4270:	a818      	add	r0, sp, #96	; 0x60
   d4272:	f001 f95a 	bl	d552a <_ZplRK15StringSumHelperRK6String>
   d4276:	4629      	mov	r1, r5
   d4278:	f001 f963 	bl	d5542 <_ZplRK15StringSumHelperPKc>
   d427c:	4601      	mov	r1, r0
   d427e:	a808      	add	r0, sp, #32
   d4280:	f001 f8f2 	bl	d5468 <_ZN6StringC1ERKS_>
   d4284:	a814      	add	r0, sp, #80	; 0x50
   d4286:	f001 f881 	bl	d538c <_ZN6StringD1Ev>
class StringSumHelper : public String
   d428a:	a818      	add	r0, sp, #96	; 0x60
   d428c:	f001 f87e 	bl	d538c <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
   d4290:	4939      	ldr	r1, [pc, #228]	; (d4378 <_Z12generateDatav+0x170>)
   d4292:	a818      	add	r0, sp, #96	; 0x60
   d4294:	f001 f8c5 	bl	d5422 <_ZN6StringC1EPKc>
  String geoLong  = "\"geoLong\":" + String(lon, 6) + ",";
   d4298:	ed96 0a00 	vldr	s0, [r6]
   d429c:	2106      	movs	r1, #6
   d429e:	a814      	add	r0, sp, #80	; 0x50
   d42a0:	f001 f912 	bl	d54c8 <_ZN6StringC1Efi>
   d42a4:	a914      	add	r1, sp, #80	; 0x50
   d42a6:	a818      	add	r0, sp, #96	; 0x60
   d42a8:	f001 f93f 	bl	d552a <_ZplRK15StringSumHelperRK6String>
   d42ac:	4629      	mov	r1, r5
   d42ae:	f001 f948 	bl	d5542 <_ZplRK15StringSumHelperPKc>
   d42b2:	4601      	mov	r1, r0
   d42b4:	a80c      	add	r0, sp, #48	; 0x30
   d42b6:	f001 f8d7 	bl	d5468 <_ZN6StringC1ERKS_>
   d42ba:	a814      	add	r0, sp, #80	; 0x50
   d42bc:	f001 f866 	bl	d538c <_ZN6StringD1Ev>
class StringSumHelper : public String
   d42c0:	a818      	add	r0, sp, #96	; 0x60
   d42c2:	f001 f863 	bl	d538c <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
   d42c6:	492d      	ldr	r1, [pc, #180]	; (d437c <_Z12generateDatav+0x174>)
   d42c8:	a818      	add	r0, sp, #96	; 0x60
   d42ca:	f001 f8aa 	bl	d5422 <_ZN6StringC1EPKc>
  // String pingTime = "\"pingTime\":" + Time.timeStr();
  String distanceTraveled = "\"distanceTraveled\":" + String(0);
   d42ce:	220a      	movs	r2, #10
   d42d0:	2100      	movs	r1, #0
   d42d2:	a814      	add	r0, sp, #80	; 0x50
   d42d4:	f001 f8e5 	bl	d54a2 <_ZN6StringC1Eih>
   d42d8:	a914      	add	r1, sp, #80	; 0x50
   d42da:	a818      	add	r0, sp, #96	; 0x60
   d42dc:	f001 f925 	bl	d552a <_ZplRK15StringSumHelperRK6String>
   d42e0:	4601      	mov	r1, r0
   d42e2:	a810      	add	r0, sp, #64	; 0x40
   d42e4:	f001 f8c0 	bl	d5468 <_ZN6StringC1ERKS_>
   d42e8:	a814      	add	r0, sp, #80	; 0x50
   d42ea:	f001 f84f 	bl	d538c <_ZN6StringD1Ev>
class StringSumHelper : public String
   d42ee:	a818      	add	r0, sp, #96	; 0x60
   d42f0:	f001 f84c 	bl	d538c <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
   d42f4:	4922      	ldr	r1, [pc, #136]	; (d4380 <_Z12generateDatav+0x178>)
   d42f6:	a818      	add	r0, sp, #96	; 0x60
   d42f8:	f001 f893 	bl	d5422 <_ZN6StringC1EPKc>

  // combine all the data into a single string
  String data = "{" + beaconID + moisture + geoLat + geoLong + distanceTraveled + "}";
   d42fc:	4669      	mov	r1, sp
   d42fe:	a818      	add	r0, sp, #96	; 0x60
   d4300:	f001 f913 	bl	d552a <_ZplRK15StringSumHelperRK6String>
   d4304:	a904      	add	r1, sp, #16
   d4306:	f001 f910 	bl	d552a <_ZplRK15StringSumHelperRK6String>
   d430a:	a908      	add	r1, sp, #32
   d430c:	f001 f90d 	bl	d552a <_ZplRK15StringSumHelperRK6String>
   d4310:	a90c      	add	r1, sp, #48	; 0x30
   d4312:	f001 f90a 	bl	d552a <_ZplRK15StringSumHelperRK6String>
   d4316:	a910      	add	r1, sp, #64	; 0x40
   d4318:	f001 f907 	bl	d552a <_ZplRK15StringSumHelperRK6String>
   d431c:	4919      	ldr	r1, [pc, #100]	; (d4384 <_Z12generateDatav+0x17c>)
   d431e:	f001 f910 	bl	d5542 <_ZplRK15StringSumHelperPKc>
   d4322:	4601      	mov	r1, r0
   d4324:	4620      	mov	r0, r4
   d4326:	f001 f89f 	bl	d5468 <_ZN6StringC1ERKS_>
class StringSumHelper : public String
   d432a:	a818      	add	r0, sp, #96	; 0x60
   d432c:	f001 f82e 	bl	d538c <_ZN6StringD1Ev>
  String distanceTraveled = "\"distanceTraveled\":" + String(0);
   d4330:	a810      	add	r0, sp, #64	; 0x40
   d4332:	f001 f82b 	bl	d538c <_ZN6StringD1Ev>
  String geoLong  = "\"geoLong\":" + String(lon, 6) + ",";
   d4336:	a80c      	add	r0, sp, #48	; 0x30
   d4338:	f001 f828 	bl	d538c <_ZN6StringD1Ev>
  String geoLat   = "\"geoLat\":" + String(lat, 6) + ",";
   d433c:	a808      	add	r0, sp, #32
   d433e:	f001 f825 	bl	d538c <_ZN6StringD1Ev>
  String moisture = "\"moistureLevel\":" + String(moistureReading) + ",";
   d4342:	a804      	add	r0, sp, #16
   d4344:	f001 f822 	bl	d538c <_ZN6StringD1Ev>
  String beaconID = "\"beaconID\":1,";
   d4348:	4668      	mov	r0, sp
   d434a:	f001 f81f 	bl	d538c <_ZN6StringD1Ev>
  
  return data;
}
   d434e:	4620      	mov	r0, r4
   d4350:	b01d      	add	sp, #116	; 0x74
   d4352:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4354:	2003e5d0 	.word	0x2003e5d0
   d4358:	2003e5fc 	.word	0x2003e5fc
   d435c:	4215b474 	.word	0x4215b474
   d4360:	c2f457df 	.word	0xc2f457df
   d4364:	000d7433 	.word	0x000d7433
   d4368:	000d7441 	.word	0x000d7441
   d436c:	000d743f 	.word	0x000d743f
   d4370:	2003e600 	.word	0x2003e600
   d4374:	000d7452 	.word	0x000d7452
   d4378:	000d745c 	.word	0x000d745c
   d437c:	000d7467 	.word	0x000d7467
   d4380:	000d747b 	.word	0x000d747b
   d4384:	000d747d 	.word	0x000d747d

000d4388 <_ZNSt11_Deque_baseI6StringSaIS0_EED1Ev>:
      }
#endif
    };

  template<typename _Tp, typename _Alloc>
    _Deque_base<_Tp, _Alloc>::
   d4388:	b570      	push	{r4, r5, r6, lr}
    ~_Deque_base() _GLIBCXX_NOEXCEPT
    {
      if (this->_M_impl._M_map)
   d438a:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   d438c:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   d438e:	b163      	cbz	r3, d43aa <_ZNSt11_Deque_baseI6StringSaIS0_EED1Ev+0x22>
	{
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   d4390:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d4392:	6945      	ldr	r5, [r0, #20]
   d4394:	1d1e      	adds	r6, r3, #4
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   d4396:	42ae      	cmp	r6, r5
   d4398:	d904      	bls.n	d43a4 <_ZNSt11_Deque_baseI6StringSaIS0_EED1Ev+0x1c>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d439a:	f855 0b04 	ldr.w	r0, [r5], #4
   d439e:	f7ff fe7e 	bl	d409e <_ZdlPv>
   d43a2:	e7f8      	b.n	d4396 <_ZNSt11_Deque_baseI6StringSaIS0_EED1Ev+0xe>
   d43a4:	6820      	ldr	r0, [r4, #0]
   d43a6:	f7ff fe7a 	bl	d409e <_ZdlPv>
    }
   d43aa:	4620      	mov	r0, r4
   d43ac:	bd70      	pop	{r4, r5, r6, pc}
	...

000d43b0 <_ZNSt5dequeI6StringSaIS0_EE16_M_push_back_auxIJRKS0_EEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
   d43b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d43b4:	460f      	mov	r7, r1
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   d43b6:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d43b8:	6941      	ldr	r1, [r0, #20]
   d43ba:	4604      	mov	r4, r0
   d43bc:	e9d0 3006 	ldrd	r3, r0, [r0, #24]
   d43c0:	1a56      	subs	r6, r2, r1
   d43c2:	10b5      	asrs	r5, r6, #2
   d43c4:	1a18      	subs	r0, r3, r0
   d43c6:	1e6b      	subs	r3, r5, #1
   d43c8:	015b      	lsls	r3, r3, #5
   d43ca:	eb03 1c20 	add.w	ip, r3, r0, asr #4
	+ (__y._M_last - __y._M_cur);
   d43ce:	68a3      	ldr	r3, [r4, #8]
   d43d0:	6920      	ldr	r0, [r4, #16]
   d43d2:	1ac0      	subs	r0, r0, r3
   d43d4:	eb0c 1320 	add.w	r3, ip, r0, asr #4
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
   d43d8:	f06f 4078 	mvn.w	r0, #4160749568	; 0xf8000000
   d43dc:	4283      	cmp	r3, r0
   d43de:	d102      	bne.n	d43e6 <_ZNSt5dequeI6StringSaIS0_EE16_M_push_back_auxIJRKS0_EEEvDpOT_+0x36>
	  __throw_length_error(
   d43e0:	4835      	ldr	r0, [pc, #212]	; (d44b8 <_ZNSt5dequeI6StringSaIS0_EE16_M_push_back_auxIJRKS0_EEEvDpOT_+0x108>)
   d43e2:	f002 f897 	bl	d6514 <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   d43e6:	e9d4 c300 	ldrd	ip, r3, [r4]
   d43ea:	eba2 000c 	sub.w	r0, r2, ip
   d43ee:	eba3 00a0 	sub.w	r0, r3, r0, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   d43f2:	2801      	cmp	r0, #1
   d43f4:	d81e      	bhi.n	d4434 <_ZNSt5dequeI6StringSaIS0_EE16_M_push_back_auxIJRKS0_EEEvDpOT_+0x84>
    deque<_Tp, _Alloc>::
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   d43f6:	3502      	adds	r5, #2

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d43f8:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   d43fc:	d936      	bls.n	d446c <_ZNSt5dequeI6StringSaIS0_EE16_M_push_back_auxIJRKS0_EEEvDpOT_+0xbc>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   d43fe:	1b5d      	subs	r5, r3, r5
   d4400:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d4402:	eb0c 0585 	add.w	r5, ip, r5, lsl #2
   d4406:	1d13      	adds	r3, r2, #4
	                 + (__add_at_front ? __nodes_to_add : 0);
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   d4408:	42a9      	cmp	r1, r5
   d440a:	eba3 0201 	sub.w	r2, r3, r1
   d440e:	d927      	bls.n	d4460 <_ZNSt5dequeI6StringSaIS0_EE16_M_push_back_auxIJRKS0_EEEvDpOT_+0xb0>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d4410:	4299      	cmp	r1, r3
   d4412:	d002      	beq.n	d441a <_ZNSt5dequeI6StringSaIS0_EE16_M_push_back_auxIJRKS0_EEEvDpOT_+0x6a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d4414:	4628      	mov	r0, r5
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d4416:	f002 ff03 	bl	d7220 <memmove>
	_M_node = __new_node;
   d441a:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   d441c:	682b      	ldr	r3, [r5, #0]
   d441e:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d4420:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d4424:	6123      	str	r3, [r4, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   d4426:	19ab      	adds	r3, r5, r6
	_M_node = __new_node;
   d4428:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   d442a:	59ab      	ldr	r3, [r5, r6]
   d442c:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d442e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d4432:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4434:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   d4438:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d443a:	f7ff fe2c 	bl	d4096 <_Znwj>
   d443e:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   d4440:	69a0      	ldr	r0, [r4, #24]
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4442:	b110      	cbz	r0, d444a <_ZNSt5dequeI6StringSaIS0_EE16_M_push_back_auxIJRKS0_EEEvDpOT_+0x9a>
   d4444:	4639      	mov	r1, r7
   d4446:	f001 f80f 	bl	d5468 <_ZN6StringC1ERKS_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   d444a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d444c:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d444e:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   d4450:	685b      	ldr	r3, [r3, #4]
   d4452:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d4454:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d4458:	6222      	str	r2, [r4, #32]
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   d445a:	61a3      	str	r3, [r4, #24]
      }
   d445c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	  if (_Num)
   d4460:	4299      	cmp	r1, r3
   d4462:	d0da      	beq.n	d441a <_ZNSt5dequeI6StringSaIS0_EE16_M_push_back_auxIJRKS0_EEEvDpOT_+0x6a>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d4464:	1d30      	adds	r0, r6, #4
   d4466:	1a80      	subs	r0, r0, r2
   d4468:	4428      	add	r0, r5
   d446a:	e7d4      	b.n	d4416 <_ZNSt5dequeI6StringSaIS0_EE16_M_push_back_auxIJRKS0_EEEvDpOT_+0x66>
	  size_type __new_map_size = this->_M_impl._M_map_size
   d446c:	f103 0802 	add.w	r8, r3, #2
   d4470:	2b01      	cmp	r3, #1
   d4472:	bf2c      	ite	cs
   d4474:	4498      	addcs	r8, r3
   d4476:	f108 0801 	addcc.w	r8, r8, #1
	if (__n > this->max_size())
   d447a:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   d447e:	d301      	bcc.n	d4484 <_ZNSt5dequeI6StringSaIS0_EE16_M_push_back_auxIJRKS0_EEEvDpOT_+0xd4>
	  std::__throw_bad_alloc();
   d4480:	f002 f845 	bl	d650e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4484:	ea4f 0088 	mov.w	r0, r8, lsl #2
   d4488:	f7ff fe05 	bl	d4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   d448c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d448e:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d4490:	eba8 0505 	sub.w	r5, r8, r5
	  std::copy(this->_M_impl._M_start._M_node,
   d4494:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d4496:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   d4498:	4291      	cmp	r1, r2
   d449a:	4681      	mov	r9, r0
   d449c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   d44a0:	d003      	beq.n	d44aa <_ZNSt5dequeI6StringSaIS0_EE16_M_push_back_auxIJRKS0_EEEvDpOT_+0xfa>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d44a2:	1a52      	subs	r2, r2, r1
   d44a4:	4628      	mov	r0, r5
   d44a6:	f002 febb 	bl	d7220 <memmove>
	::operator delete(__p);
   d44aa:	6820      	ldr	r0, [r4, #0]
   d44ac:	f7ff fdf7 	bl	d409e <_ZdlPv>
	  this->_M_impl._M_map_size = __new_map_size;
   d44b0:	e9c4 9800 	strd	r9, r8, [r4]
   d44b4:	e7b1      	b.n	d441a <_ZNSt5dequeI6StringSaIS0_EE16_M_push_back_auxIJRKS0_EEEvDpOT_+0x6a>
   d44b6:	bf00      	nop
   d44b8:	000d747f 	.word	0x000d747f

000d44bc <_Z11publishDatav>:


void publishData() {
   d44bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d44be:	b08d      	sub	sp, #52	; 0x34
  String data = generateData();
   d44c0:	a804      	add	r0, sp, #16
   d44c2:	f7ff fea1 	bl	d4208 <_Z12generateDatav>
  isGeolocationValid = 1;
   d44c6:	4b40      	ldr	r3, [pc, #256]	; (d45c8 <_Z11publishDatav+0x10c>)
   d44c8:	4c40      	ldr	r4, [pc, #256]	; (d45cc <_Z11publishDatav+0x110>)
   d44ca:	2201      	movs	r2, #1
   d44cc:	701a      	strb	r2, [r3, #0]
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d44ce:	4b40      	ldr	r3, [pc, #256]	; (d45d0 <_Z11publishDatav+0x114>)
   d44d0:	2200      	movs	r2, #0
   d44d2:	6858      	ldr	r0, [r3, #4]
   d44d4:	4611      	mov	r1, r2
   d44d6:	f000 fd93 	bl	d5000 <network_connecting>

  // make sure the GPS is getting the correct geolocations
  if (isGeolocationValid){

    // check internet connection
    if (Cellular.connecting()) {               // if no internet connection, save the data into a local queue
   d44da:	2800      	cmp	r0, #0
   d44dc:	d132      	bne.n	d4544 <_Z11publishDatav+0x88>
   d44de:	4d3d      	ldr	r5, [pc, #244]	; (d45d4 <_Z11publishDatav+0x118>)
    } else {                                   // once the internet connection is back
      while (!localQueue.empty()) {
        String localData = localQueue.front(); // get data from the local queue
        localQueue.pop();                      // remove the data once it is retrieved

        Serial.println("Publishing local data:...");
   d44e0:	4e3d      	ldr	r6, [pc, #244]	; (d45d8 <_Z11publishDatav+0x11c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d44e2:	4f3e      	ldr	r7, [pc, #248]	; (d45dc <_Z11publishDatav+0x120>)
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
   d44e4:	68a1      	ldr	r1, [r4, #8]
      while (!localQueue.empty()) {
   d44e6:	69a3      	ldr	r3, [r4, #24]
   d44e8:	428b      	cmp	r3, r1
   d44ea:	d054      	beq.n	d4596 <_Z11publishDatav+0xda>
        String localData = localQueue.front(); // get data from the local queue
   d44ec:	a808      	add	r0, sp, #32
   d44ee:	f000 ffbb 	bl	d5468 <_ZN6StringC1ERKS_>
	    != this->_M_impl._M_start._M_last - 1)
   d44f2:	6923      	ldr	r3, [r4, #16]
	if (this->_M_impl._M_start._M_cur
   d44f4:	68a0      	ldr	r0, [r4, #8]
	    != this->_M_impl._M_start._M_last - 1)
   d44f6:	3b10      	subs	r3, #16
	if (this->_M_impl._M_start._M_cur
   d44f8:	4298      	cmp	r0, r3
   d44fa:	d03e      	beq.n	d457a <_Z11publishDatav+0xbe>

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d44fc:	f000 ff46 	bl	d538c <_ZN6StringD1Ev>
	    ++this->_M_impl._M_start._M_cur;
   d4500:	68a3      	ldr	r3, [r4, #8]
   d4502:	3310      	adds	r3, #16
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   d4504:	60a3      	str	r3, [r4, #8]
        Serial.println("Publishing local data:...");
   d4506:	f001 fd23 	bl	d5f50 <_Z16_fetch_usbserialv>
   d450a:	4631      	mov	r1, r6
   d450c:	f001 f8c3 	bl	d5696 <_ZN5Print7printlnEPKc>
        Serial.println(localData);
   d4510:	f001 fd1e 	bl	d5f50 <_Z16_fetch_usbserialv>
   d4514:	9908      	ldr	r1, [sp, #32]
   d4516:	f001 f8be 	bl	d5696 <_ZN5Print7printlnEPKc>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d451a:	782b      	ldrb	r3, [r5, #0]
   d451c:	f88d 3000 	strb.w	r3, [sp]
   d4520:	a802      	add	r0, sp, #8
   d4522:	9a08      	ldr	r2, [sp, #32]
   d4524:	233c      	movs	r3, #60	; 0x3c
   d4526:	4639      	mov	r1, r7
   d4528:	f001 fac8 	bl	d5abc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d452c:	9803      	ldr	r0, [sp, #12]
   d452e:	b128      	cbz	r0, d453c <_Z11publishDatav+0x80>
      if (--_M_use_count == 0)
   d4530:	6843      	ldr	r3, [r0, #4]
   d4532:	3b01      	subs	r3, #1
   d4534:	6043      	str	r3, [r0, #4]
   d4536:	b90b      	cbnz	r3, d453c <_Z11publishDatav+0x80>
   d4538:	f7ff fdbb 	bl	d40b2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
        String localData = localQueue.front(); // get data from the local queue
   d453c:	a808      	add	r0, sp, #32
   d453e:	f000 ff25 	bl	d538c <_ZN6StringD1Ev>
      while (!localQueue.empty()) {
   d4542:	e7cf      	b.n	d44e4 <_Z11publishDatav+0x28>
      Serial.println("No internet conenction, saving data locally...");
   d4544:	f001 fd04 	bl	d5f50 <_Z16_fetch_usbserialv>
   d4548:	4925      	ldr	r1, [pc, #148]	; (d45e0 <_Z11publishDatav+0x124>)
   d454a:	f001 f8a4 	bl	d5696 <_ZN5Print7printlnEPKc>
	    != this->_M_impl._M_finish._M_last - 1)
   d454e:	6a23      	ldr	r3, [r4, #32]
	if (this->_M_impl._M_finish._M_cur
   d4550:	69a0      	ldr	r0, [r4, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   d4552:	3b10      	subs	r3, #16
	if (this->_M_impl._M_finish._M_cur
   d4554:	4298      	cmp	r0, r3
   d4556:	d00b      	beq.n	d4570 <_Z11publishDatav+0xb4>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4558:	b110      	cbz	r0, d4560 <_Z11publishDatav+0xa4>
   d455a:	a904      	add	r1, sp, #16
   d455c:	f000 ff84 	bl	d5468 <_ZN6StringC1ERKS_>
	    ++this->_M_impl._M_finish._M_cur;
   d4560:	69a3      	ldr	r3, [r4, #24]
   d4562:	3310      	adds	r3, #16
   d4564:	61a3      	str	r3, [r4, #24]
  String data = generateData();
   d4566:	a804      	add	r0, sp, #16
   d4568:	f000 ff10 	bl	d538c <_ZN6StringD1Ev>
  } else {
    // restart the loop with a smaller delay time if the geolocation is invalid
    Serial.println("No valid Geolocation");
    nextEventTime = 500;
  }
}
   d456c:	b00d      	add	sp, #52	; 0x34
   d456e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  _M_push_back_aux(__x);
   d4570:	a904      	add	r1, sp, #16
   d4572:	4620      	mov	r0, r4
   d4574:	f7ff ff1c 	bl	d43b0 <_ZNSt5dequeI6StringSaIS0_EE16_M_push_back_auxIJRKS0_EEEvDpOT_>
   d4578:	e7f5      	b.n	d4566 <_Z11publishDatav+0xaa>
	{ __p->~_Up(); }
   d457a:	f000 ff07 	bl	d538c <_ZN6StringD1Ev>
	::operator delete(__p);
   d457e:	68e0      	ldr	r0, [r4, #12]
   d4580:	f7ff fd8d 	bl	d409e <_ZdlPv>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   d4584:	6963      	ldr	r3, [r4, #20]
   d4586:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d4588:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   d458a:	685b      	ldr	r3, [r3, #4]
   d458c:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d458e:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d4592:	6122      	str	r2, [r4, #16]
   d4594:	e7b6      	b.n	d4504 <_Z11publishDatav+0x48>
      Serial.println(data);
   d4596:	f001 fcdb 	bl	d5f50 <_Z16_fetch_usbserialv>
   d459a:	9904      	ldr	r1, [sp, #16]
   d459c:	f001 f87b 	bl	d5696 <_ZN5Print7printlnEPKc>
   d45a0:	782b      	ldrb	r3, [r5, #0]
   d45a2:	f88d 3000 	strb.w	r3, [sp]
   d45a6:	a808      	add	r0, sp, #32
   d45a8:	9a04      	ldr	r2, [sp, #16]
   d45aa:	490c      	ldr	r1, [pc, #48]	; (d45dc <_Z11publishDatav+0x120>)
   d45ac:	233c      	movs	r3, #60	; 0x3c
   d45ae:	f001 fa85 	bl	d5abc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   d45b2:	9809      	ldr	r0, [sp, #36]	; 0x24
   d45b4:	2800      	cmp	r0, #0
   d45b6:	d0d6      	beq.n	d4566 <_Z11publishDatav+0xaa>
      if (--_M_use_count == 0)
   d45b8:	6843      	ldr	r3, [r0, #4]
   d45ba:	3b01      	subs	r3, #1
   d45bc:	6043      	str	r3, [r0, #4]
   d45be:	2b00      	cmp	r3, #0
   d45c0:	d1d1      	bne.n	d4566 <_Z11publishDatav+0xaa>
   d45c2:	f7ff fd76 	bl	d40b2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
   d45c6:	e7ce      	b.n	d4566 <_Z11publishDatav+0xaa>
   d45c8:	2003e5cc 	.word	0x2003e5cc
   d45cc:	2003e5d4 	.word	0x2003e5d4
   d45d0:	2003e670 	.word	0x2003e670
   d45d4:	2003e550 	.word	0x2003e550
   d45d8:	000d74de 	.word	0x000d74de
   d45dc:	000d74f8 	.word	0x000d74f8
   d45e0:	000d74af 	.word	0x000d74af

000d45e4 <_Z18handleMoistureModev>:
void handleMoistureMode() {
   d45e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  Serial.println("Moisture Mode!");
   d45e6:	f001 fcb3 	bl	d5f50 <_Z16_fetch_usbserialv>
   d45ea:	4918      	ldr	r1, [pc, #96]	; (d464c <_Z18handleMoistureModev+0x68>)
  moistureReading = analogRead(moisturePin);
   d45ec:	4c18      	ldr	r4, [pc, #96]	; (d4650 <_Z18handleMoistureModev+0x6c>)
  Serial.println("Moisture Mode!");
   d45ee:	f001 f852 	bl	d5696 <_ZN5Print7printlnEPKc>
  nextEventTime = 30 * 1000;
   d45f2:	4b18      	ldr	r3, [pc, #96]	; (d4654 <_Z18handleMoistureModev+0x70>)
   d45f4:	f247 5230 	movw	r2, #30000	; 0x7530
   d45f8:	601a      	str	r2, [r3, #0]
  moistureReading = analogRead(moisturePin);
   d45fa:	4b17      	ldr	r3, [pc, #92]	; (d4658 <_Z18handleMoistureModev+0x74>)
   d45fc:	8818      	ldrh	r0, [r3, #0]
   d45fe:	f001 ff26 	bl	d644e <analogRead>
  moistureReading = map(moistureReading, dryValue, wetValue, 0, 100);
   d4602:	2364      	movs	r3, #100	; 0x64
  moistureReading = analogRead(moisturePin);
   d4604:	6020      	str	r0, [r4, #0]
  moistureReading = map(moistureReading, dryValue, wetValue, 0, 100);
   d4606:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d460a:	9300      	str	r3, [sp, #0]
   d460c:	f640 5198 	movw	r1, #3480	; 0xd98
   d4610:	2300      	movs	r3, #0
   d4612:	f001 f87b 	bl	d570c <_Z3mapiiiii>
   d4616:	6020      	str	r0, [r4, #0]
  Serial.println(moistureReading);
   d4618:	f001 fc9a 	bl	d5f50 <_Z16_fetch_usbserialv>
   d461c:	6824      	ldr	r4, [r4, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d461e:	2c00      	cmp	r4, #0
   d4620:	4605      	mov	r5, r0
   d4622:	da11      	bge.n	d4648 <_Z18handleMoistureModev+0x64>
            t = print('-');
   d4624:	212d      	movs	r1, #45	; 0x2d
   d4626:	f001 f827 	bl	d5678 <_ZN5Print5printEc>
            val = -n;
   d462a:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d462c:	220a      	movs	r2, #10
   d462e:	4628      	mov	r0, r5
   d4630:	f001 f83b 	bl	d56aa <_ZN5Print11printNumberEmh>
        n += println();
   d4634:	4628      	mov	r0, r5
   d4636:	f001 f822 	bl	d567e <_ZN5Print7printlnEv>
  getGeolocation();
   d463a:	f7ff fdad 	bl	d4198 <_Z14getGeolocationv>
}
   d463e:	b003      	add	sp, #12
   d4640:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  publishData();
   d4644:	f7ff bf3a 	b.w	d44bc <_Z11publishDatav>
            val = n;
   d4648:	4621      	mov	r1, r4
   d464a:	e7ef      	b.n	d462c <_Z18handleMoistureModev+0x48>
   d464c:	000d7500 	.word	0x000d7500
   d4650:	2003e600 	.word	0x2003e600
   d4654:	2003e608 	.word	0x2003e608
   d4658:	2003e4d4 	.word	0x2003e4d4

000d465c <_Z15handleInTransitv>:
void handleInTransit() {
   d465c:	b508      	push	{r3, lr}
  Serial.println("In-transit!");
   d465e:	f001 fc77 	bl	d5f50 <_Z16_fetch_usbserialv>
   d4662:	4906      	ldr	r1, [pc, #24]	; (d467c <_Z15handleInTransitv+0x20>)
   d4664:	f001 f817 	bl	d5696 <_ZN5Print7printlnEPKc>
  nextEventTime = 30 * 1000;
   d4668:	4b05      	ldr	r3, [pc, #20]	; (d4680 <_Z15handleInTransitv+0x24>)
   d466a:	f247 5230 	movw	r2, #30000	; 0x7530
   d466e:	601a      	str	r2, [r3, #0]
  getGeolocation();
   d4670:	f7ff fd92 	bl	d4198 <_Z14getGeolocationv>
}
   d4674:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  publishData();
   d4678:	f7ff bf20 	b.w	d44bc <_Z11publishDatav>
   d467c:	000d750f 	.word	0x000d750f
   d4680:	2003e608 	.word	0x2003e608

000d4684 <_Z16checkBeaconStatev>:
void checkBeaconState() {
   d4684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (digitalRead(switchButton) == 0){
   d4686:	4b22      	ldr	r3, [pc, #136]	; (d4710 <_Z16checkBeaconStatev+0x8c>)
   d4688:	4e22      	ldr	r6, [pc, #136]	; (d4714 <_Z16checkBeaconStatev+0x90>)
   d468a:	8818      	ldrh	r0, [r3, #0]
   d468c:	4c22      	ldr	r4, [pc, #136]	; (d4718 <_Z16checkBeaconStatev+0x94>)
   d468e:	f001 fecb 	bl	d6428 <digitalRead>
   d4692:	4b22      	ldr	r3, [pc, #136]	; (d471c <_Z16checkBeaconStatev+0x98>)
   d4694:	4605      	mov	r5, r0
   d4696:	bb10      	cbnz	r0, d46de <_Z16checkBeaconStatev+0x5a>
    digitalWrite(standbyLED, HIGH);
   d4698:	8818      	ldrh	r0, [r3, #0]
   d469a:	2101      	movs	r1, #1
   d469c:	f001 feab 	bl	d63f6 <digitalWrite>
    digitalWrite(activeLED, LOW);
   d46a0:	8830      	ldrh	r0, [r6, #0]
   d46a2:	4629      	mov	r1, r5
   d46a4:	f001 fea7 	bl	d63f6 <digitalWrite>
    state = STANDBY;
   d46a8:	7025      	strb	r5, [r4, #0]
  if (tnow >= tnext || state != prevState) {
   d46aa:	4d1d      	ldr	r5, [pc, #116]	; (d4720 <_Z16checkBeaconStatev+0x9c>)
   d46ac:	4f1d      	ldr	r7, [pc, #116]	; (d4724 <_Z16checkBeaconStatev+0xa0>)
   d46ae:	682b      	ldr	r3, [r5, #0]
   d46b0:	6838      	ldr	r0, [r7, #0]
   d46b2:	7822      	ldrb	r2, [r4, #0]
   d46b4:	4e1c      	ldr	r6, [pc, #112]	; (d4728 <_Z16checkBeaconStatev+0xa4>)
   d46b6:	4283      	cmp	r3, r0
   d46b8:	d202      	bcs.n	d46c0 <_Z16checkBeaconStatev+0x3c>
   d46ba:	7833      	ldrb	r3, [r6, #0]
   d46bc:	4293      	cmp	r3, r2
   d46be:	d00d      	beq.n	d46dc <_Z16checkBeaconStatev+0x58>
    switch (state) {
   d46c0:	2a01      	cmp	r2, #1
   d46c2:	d01e      	beq.n	d4702 <_Z16checkBeaconStatev+0x7e>
   d46c4:	2a02      	cmp	r2, #2
   d46c6:	d01f      	beq.n	d4708 <_Z16checkBeaconStatev+0x84>
   d46c8:	b90a      	cbnz	r2, d46ce <_Z16checkBeaconStatev+0x4a>
      handleStandby();
   d46ca:	f7ff fd8d 	bl	d41e8 <_Z13handleStandbyv>
  tnext = tnow + nextEventTime;
   d46ce:	4a17      	ldr	r2, [pc, #92]	; (d472c <_Z16checkBeaconStatev+0xa8>)
  prevState = state;
   d46d0:	7823      	ldrb	r3, [r4, #0]
  tnext = tnow + nextEventTime;
   d46d2:	6812      	ldr	r2, [r2, #0]
  prevState = state;
   d46d4:	7033      	strb	r3, [r6, #0]
  tnext = tnow + nextEventTime;
   d46d6:	682b      	ldr	r3, [r5, #0]
   d46d8:	4413      	add	r3, r2
   d46da:	603b      	str	r3, [r7, #0]
}
   d46dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    digitalWrite(standbyLED, LOW);
   d46de:	8818      	ldrh	r0, [r3, #0]
   d46e0:	2100      	movs	r1, #0
   d46e2:	f001 fe88 	bl	d63f6 <digitalWrite>
    digitalWrite(activeLED, HIGH);
   d46e6:	8830      	ldrh	r0, [r6, #0]
   d46e8:	2101      	movs	r1, #1
   d46ea:	f001 fe84 	bl	d63f6 <digitalWrite>
    if (digitalRead(adapterPin) == 0) {
   d46ee:	4b10      	ldr	r3, [pc, #64]	; (d4730 <_Z16checkBeaconStatev+0xac>)
   d46f0:	8818      	ldrh	r0, [r3, #0]
   d46f2:	f001 fe99 	bl	d6428 <digitalRead>
   d46f6:	b910      	cbnz	r0, d46fe <_Z16checkBeaconStatev+0x7a>
      state = MOISTURE_MODE;
   d46f8:	2301      	movs	r3, #1
      state = IN_TRANSIT;
   d46fa:	7023      	strb	r3, [r4, #0]
   d46fc:	e7d5      	b.n	d46aa <_Z16checkBeaconStatev+0x26>
   d46fe:	2302      	movs	r3, #2
   d4700:	e7fb      	b.n	d46fa <_Z16checkBeaconStatev+0x76>
      handleMoistureMode();
   d4702:	f7ff ff6f 	bl	d45e4 <_Z18handleMoistureModev>
      break;
   d4706:	e7e2      	b.n	d46ce <_Z16checkBeaconStatev+0x4a>
      handleInTransit();
   d4708:	f7ff ffa8 	bl	d465c <_Z15handleInTransitv>
      break;
   d470c:	e7df      	b.n	d46ce <_Z16checkBeaconStatev+0x4a>
   d470e:	bf00      	nop
   d4710:	2003e4dc 	.word	0x2003e4dc
   d4714:	2003e4cc 	.word	0x2003e4cc
   d4718:	2003e60d 	.word	0x2003e60d
   d471c:	2003e4d8 	.word	0x2003e4d8
   d4720:	2003e618 	.word	0x2003e618
   d4724:	2003e614 	.word	0x2003e614
   d4728:	2003e60c 	.word	0x2003e60c
   d472c:	2003e608 	.word	0x2003e608
   d4730:	2003e4d0 	.word	0x2003e4d0

000d4734 <loop>:
void loop() {
   d4734:	b538      	push	{r3, r4, r5, lr}
  if (tnow >= tcheck) {
   d4736:	4c08      	ldr	r4, [pc, #32]	; (d4758 <loop+0x24>)
  tnow = millis(); 
   d4738:	4d08      	ldr	r5, [pc, #32]	; (d475c <loop+0x28>)
   d473a:	f000 fb45 	bl	d4dc8 <HAL_Timer_Get_Milli_Seconds>
  if (tnow >= tcheck) {
   d473e:	6823      	ldr	r3, [r4, #0]
  tnow = millis(); 
   d4740:	6028      	str	r0, [r5, #0]
  if (tnow >= tcheck) {
   d4742:	4283      	cmp	r3, r0
   d4744:	d806      	bhi.n	d4754 <loop+0x20>
    checkBeaconState();
   d4746:	f7ff ff9d 	bl	d4684 <_Z16checkBeaconStatev>
    tcheck = tnow + nextCheckTime;
   d474a:	4a05      	ldr	r2, [pc, #20]	; (d4760 <loop+0x2c>)
   d474c:	682b      	ldr	r3, [r5, #0]
   d474e:	6812      	ldr	r2, [r2, #0]
   d4750:	4413      	add	r3, r2
   d4752:	6023      	str	r3, [r4, #0]
}
   d4754:	bd38      	pop	{r3, r4, r5, pc}
   d4756:	bf00      	nop
   d4758:	2003e610 	.word	0x2003e610
   d475c:	2003e618 	.word	0x2003e618
   d4760:	2003e604 	.word	0x2003e604

000d4764 <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_>:
  template<bool>
    struct _Destroy_aux
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
   d4764:	b538      	push	{r3, r4, r5, lr}
   d4766:	4604      	mov	r4, r0
   d4768:	460d      	mov	r5, r1
	{
	  for (; __first != __last; ++__first)
   d476a:	42ac      	cmp	r4, r5
   d476c:	d004      	beq.n	d4778 <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_+0x14>
    { __pointer->~_Tp(); }
   d476e:	4620      	mov	r0, r4
   d4770:	f000 fe0c 	bl	d538c <_ZN6StringD1Ev>
	  for (; __first != __last; ++__first)
   d4774:	3410      	adds	r4, #16
   d4776:	e7f8      	b.n	d476a <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_+0x6>
	    std::_Destroy(std::__addressof(*__first));
	}
   d4778:	bd38      	pop	{r3, r4, r5, pc}

000d477a <_ZNSt5dequeI6StringSaIS0_EED1Ev>:
      ~deque()
   d477a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return this->_M_impl._M_start; }
   d477e:	f100 0308 	add.w	r3, r0, #8
      ~deque()
   d4782:	4606      	mov	r6, r0
      { return this->_M_impl._M_start; }
   d4784:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
      ~deque()
   d4786:	b091      	sub	sp, #68	; 0x44
      { return this->_M_impl._M_start; }
   d4788:	466d      	mov	r5, sp
   d478a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
      { return this->_M_impl._M_finish; }
   d478e:	f106 0318 	add.w	r3, r6, #24
   d4792:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   d4794:	ac04      	add	r4, sp, #16
   d4796:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   d479a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   d479e:	af08      	add	r7, sp, #32
   d47a0:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   d47a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   d47a8:	ac10      	add	r4, sp, #64	; 0x40
   d47aa:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
      _M_destroy_data(iterator __first, iterator __last,
   d47ae:	e9dd b90a 	ldrd	fp, r9, [sp, #40]	; 0x28
   d47b2:	e9dd 7a0c 	ldrd	r7, sl, [sp, #48]	; 0x30
   d47b6:	9d08      	ldr	r5, [sp, #32]
   d47b8:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
       for (_Map_pointer __node = __first._M_node + 1;
   d47bc:	f109 0404 	add.w	r4, r9, #4
	    __node < __last._M_node; ++__node)
   d47c0:	4544      	cmp	r4, r8
   d47c2:	d206      	bcs.n	d47d2 <_ZNSt5dequeI6StringSaIS0_EED1Ev+0x58>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
   d47c4:	f854 0b04 	ldr.w	r0, [r4], #4
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
   d47c8:	f500 7100 	add.w	r1, r0, #512	; 0x200
   d47cc:	f7ff ffca 	bl	d4764 <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_>
       for (_Map_pointer __node = __first._M_node + 1;
   d47d0:	e7f6      	b.n	d47c0 <_ZNSt5dequeI6StringSaIS0_EED1Ev+0x46>
       if (__first._M_node != __last._M_node)
   d47d2:	45c1      	cmp	r9, r8
   d47d4:	d00e      	beq.n	d47f4 <_ZNSt5dequeI6StringSaIS0_EED1Ev+0x7a>
   d47d6:	4659      	mov	r1, fp
   d47d8:	4628      	mov	r0, r5
   d47da:	f7ff ffc3 	bl	d4764 <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_>
   d47de:	4639      	mov	r1, r7
   d47e0:	4650      	mov	r0, sl
   d47e2:	f7ff ffbf 	bl	d4764 <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   d47e6:	4630      	mov	r0, r6
   d47e8:	f7ff fdce 	bl	d4388 <_ZNSt11_Deque_baseI6StringSaIS0_EED1Ev>
   d47ec:	4630      	mov	r0, r6
   d47ee:	b011      	add	sp, #68	; 0x44
   d47f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d47f4:	4639      	mov	r1, r7
   d47f6:	4628      	mov	r0, r5
   d47f8:	e7f3      	b.n	d47e2 <_ZNSt5dequeI6StringSaIS0_EED1Ev+0x68>

000d47fa <_ZNSt5queueI6StringSt5dequeIS0_SaIS0_EEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
   d47fa:	b510      	push	{r4, lr}
   d47fc:	4604      	mov	r4, r0
   d47fe:	f7ff ffbc 	bl	d477a <_ZNSt5dequeI6StringSaIS0_EED1Ev>
   d4802:	4620      	mov	r0, r4
   d4804:	bd10      	pop	{r4, pc}
	...

000d4808 <_GLOBAL__sub_I_tnow>:
}
   d4808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        val_(val) {
   d480a:	4b1a      	ldr	r3, [pc, #104]	; (d4874 <_GLOBAL__sub_I_tnow+0x6c>)
	  _M_start(), _M_finish()
   d480c:	4c1a      	ldr	r4, [pc, #104]	; (d4878 <_GLOBAL__sub_I_tnow+0x70>)
TinyGPS gps;
   d480e:	481b      	ldr	r0, [pc, #108]	; (d487c <_GLOBAL__sub_I_tnow+0x74>)
   d4810:	2201      	movs	r2, #1
   d4812:	701a      	strb	r2, [r3, #0]
   d4814:	f000 f838 	bl	d4888 <_ZN7TinyGPSC1Ev>
   d4818:	2300      	movs	r3, #0
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   d481a:	e9c4 3302 	strd	r3, r3, [r4, #8]
   d481e:	e9c4 3304 	strd	r3, r3, [r4, #16]
   d4822:	e9c4 3306 	strd	r3, r3, [r4, #24]
   d4826:	e9c4 3308 	strd	r3, r3, [r4, #32]
	  _M_start(), _M_finish()
   d482a:	6023      	str	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d482c:	2020      	movs	r0, #32
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   d482e:	2308      	movs	r3, #8
   d4830:	6063      	str	r3, [r4, #4]
   d4832:	f7ff fc30 	bl	d4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d4836:	6865      	ldr	r5, [r4, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   d4838:	6020      	str	r0, [r4, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d483a:	3d01      	subs	r5, #1
   d483c:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   d483e:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   d4842:	4606      	mov	r6, r0
   d4844:	f44f 7000 	mov.w	r0, #512	; 0x200
   d4848:	f7ff fc25 	bl	d4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   d484c:	f500 7300 	add.w	r3, r0, #512	; 0x200
   d4850:	e9c4 0307 	strd	r0, r3, [r4, #28]
	    *__cur = this->_M_allocate_node();
   d4854:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   d4858:	60e0      	str	r0, [r4, #12]
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   d485a:	60a0      	str	r0, [r4, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   d485c:	61a0      	str	r0, [r4, #24]
	_M_node = __new_node;
   d485e:	6167      	str	r7, [r4, #20]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d4860:	6123      	str	r3, [r4, #16]
	_M_node = __new_node;
   d4862:	6267      	str	r7, [r4, #36]	; 0x24
std::queue<String> localQueue;
   d4864:	4620      	mov	r0, r4
   d4866:	4a06      	ldr	r2, [pc, #24]	; (d4880 <_GLOBAL__sub_I_tnow+0x78>)
   d4868:	4906      	ldr	r1, [pc, #24]	; (d4884 <_GLOBAL__sub_I_tnow+0x7c>)
}
   d486a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
std::queue<String> localQueue;
   d486e:	f001 be45 	b.w	d64fc <__aeabi_atexit>
   d4872:	bf00      	nop
   d4874:	2003e550 	.word	0x2003e550
   d4878:	2003e5d4 	.word	0x2003e5d4
   d487c:	2003e554 	.word	0x2003e554
   d4880:	2003e54c 	.word	0x2003e54c
   d4884:	000d47fb 	.word	0x000d47fb

000d4888 <_ZN7TinyGPSC1Ev>:
#define degrees(angleRadians) (angleRadians * 180.0 / M_PI)

#define TWO_PI 6.283185307179586476925286766559
#define sq(x) ((x)*(x))

TinyGPS::TinyGPS()
   d4888:	b510      	push	{r4, lr}
  ,  _term_offset(0)
  ,  _gps_data_good(false)
#ifndef _GPS_NO_STATS
  ,  _encoded_characters(0)
  ,  _good_sentences(0)
  ,  _failed_checksum(0)
   d488a:	490f      	ldr	r1, [pc, #60]	; (d48c8 <_ZN7TinyGPSC1Ev+0x40>)
   d488c:	6101      	str	r1, [r0, #16]
   d488e:	6181      	str	r1, [r0, #24]
   d4890:	6201      	str	r1, [r0, #32]
   d4892:	6281      	str	r1, [r0, #40]	; 0x28
   d4894:	6301      	str	r1, [r0, #48]	; 0x30
   d4896:	21ff      	movs	r1, #255	; 0xff
   d4898:	2200      	movs	r2, #0
   d489a:	f04f 34ff 	mov.w	r4, #4294967295
   d489e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
   d48a2:	2102      	movs	r1, #2
   d48a4:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
   d48a8:	6004      	str	r4, [r0, #0]
   d48aa:	6082      	str	r2, [r0, #8]
   d48ac:	6384      	str	r4, [r0, #56]	; 0x38
   d48ae:	6444      	str	r4, [r0, #68]	; 0x44
   d48b0:	64c4      	str	r4, [r0, #76]	; 0x4c
   d48b2:	f880 1065 	strb.w	r1, [r0, #101]	; 0x65
   d48b6:	f8a0 2066 	strh.w	r2, [r0, #102]	; 0x66
   d48ba:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
   d48be:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
#endif
{
  _term[0] = '\0';
   d48c2:	f880 2056 	strb.w	r2, [r0, #86]	; 0x56
}
   d48c6:	bd10      	pop	{r4, pc}
   d48c8:	3b9ac9ff 	.word	0x3b9ac9ff

000d48cc <_ZN7TinyGPS8from_hexEc>:
//
// internal utilities
//
int TinyGPS::from_hex(char a) 
{
  if (a >= 'A' && a <= 'F')
   d48cc:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   d48d0:	2b05      	cmp	r3, #5
   d48d2:	d802      	bhi.n	d48da <_ZN7TinyGPS8from_hexEc+0xe>
    return a - 'A' + 10;
   d48d4:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
   d48d8:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
   d48da:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   d48de:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
   d48e0:	bf94      	ite	ls
   d48e2:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
   d48e6:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
   d48ea:	4770      	bx	lr

000d48ec <_ZN7TinyGPS7gpsatolEPKc>:

  return false;
}

long TinyGPS::gpsatol(const char *str)
{
   d48ec:	b510      	push	{r4, lr}
   d48ee:	3901      	subs	r1, #1
  long ret = 0;
   d48f0:	2000      	movs	r0, #0
  while (gpsisdigit(*str))
    ret = 10 * ret + *str++ - '0';
   d48f2:	220a      	movs	r2, #10
  while (gpsisdigit(*str))
   d48f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d48f8:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   d48fc:	2c09      	cmp	r4, #9
   d48fe:	d803      	bhi.n	d4908 <_ZN7TinyGPS7gpsatolEPKc+0x1c>
    ret = 10 * ret + *str++ - '0';
   d4900:	fb02 3000 	mla	r0, r2, r0, r3
   d4904:	3830      	subs	r0, #48	; 0x30
  while (gpsisdigit(*str))
   d4906:	e7f5      	b.n	d48f4 <_ZN7TinyGPS7gpsatolEPKc+0x8>
  return ret;
}
   d4908:	bd10      	pop	{r4, pc}

000d490a <_ZN7TinyGPS13parse_decimalEv>:
{
   d490a:	b538      	push	{r3, r4, r5, lr}
  bool isneg = *p == '-';
   d490c:	f890 5056 	ldrb.w	r5, [r0, #86]	; 0x56
  if (isneg) ++p;
   d4910:	2d2d      	cmp	r5, #45	; 0x2d
  char *p = _term;
   d4912:	bf14      	ite	ne
   d4914:	f100 0456 	addne.w	r4, r0, #86	; 0x56
  if (isneg) ++p;
   d4918:	f100 0457 	addeq.w	r4, r0, #87	; 0x57
  unsigned long ret = 100UL * gpsatol(p);
   d491c:	4621      	mov	r1, r4
   d491e:	f7ff ffe5 	bl	d48ec <_ZN7TinyGPS7gpsatolEPKc>
   d4922:	2364      	movs	r3, #100	; 0x64
   d4924:	4358      	muls	r0, r3
   d4926:	4622      	mov	r2, r4
  while (gpsisdigit(*p)) ++p;
   d4928:	f814 3b01 	ldrb.w	r3, [r4], #1
   d492c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d4930:	2909      	cmp	r1, #9
   d4932:	d9f8      	bls.n	d4926 <_ZN7TinyGPS13parse_decimalEv+0x1c>
  if (*p == '.')
   d4934:	2b2e      	cmp	r3, #46	; 0x2e
   d4936:	d10d      	bne.n	d4954 <_ZN7TinyGPS13parse_decimalEv+0x4a>
    if (gpsisdigit(p[1]))
   d4938:	7853      	ldrb	r3, [r2, #1]
  // internal utilities
  int from_hex(char a);
  unsigned long parse_decimal();
  unsigned long parse_degrees();
  bool term_complete();
  bool gpsisdigit(char c) { return c >= '0' && c <= '9'; }
   d493a:	3b30      	subs	r3, #48	; 0x30
   d493c:	b2d9      	uxtb	r1, r3
   d493e:	2909      	cmp	r1, #9
   d4940:	d808      	bhi.n	d4954 <_ZN7TinyGPS13parse_decimalEv+0x4a>
      ret += 10 * (p[1] - '0');
   d4942:	210a      	movs	r1, #10
   d4944:	fb01 0003 	mla	r0, r1, r3, r0
      if (gpsisdigit(p[2]))
   d4948:	7893      	ldrb	r3, [r2, #2]
   d494a:	3b30      	subs	r3, #48	; 0x30
   d494c:	b2da      	uxtb	r2, r3
   d494e:	2a09      	cmp	r2, #9
        ret += p[2] - '0';
   d4950:	bf98      	it	ls
   d4952:	18c0      	addls	r0, r0, r3
  return isneg ? -ret : ret;
   d4954:	2d2d      	cmp	r5, #45	; 0x2d
   d4956:	bf08      	it	eq
   d4958:	4240      	negeq	r0, r0
}
   d495a:	bd38      	pop	{r3, r4, r5, pc}

000d495c <_ZN7TinyGPS13parse_degreesEv>:
{
   d495c:	b570      	push	{r4, r5, r6, lr}
  unsigned long left_of_decimal = gpsatol(_term);
   d495e:	f100 0456 	add.w	r4, r0, #86	; 0x56
   d4962:	4621      	mov	r1, r4
   d4964:	f7ff ffc2 	bl	d48ec <_ZN7TinyGPS7gpsatolEPKc>
  unsigned long hundred1000ths_of_minute = (left_of_decimal % 100UL) * 100000UL;
   d4968:	2264      	movs	r2, #100	; 0x64
   d496a:	fbb0 f3f2 	udiv	r3, r0, r2
   d496e:	fb02 0213 	mls	r2, r2, r3, r0
   d4972:	4b12      	ldr	r3, [pc, #72]	; (d49bc <_ZN7TinyGPS13parse_degreesEv+0x60>)
   d4974:	4353      	muls	r3, r2
  for (p=_term; gpsisdigit(*p); ++p);
   d4976:	7822      	ldrb	r2, [r4, #0]
   d4978:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
   d497c:	2d09      	cmp	r5, #9
   d497e:	4621      	mov	r1, r4
   d4980:	f104 0401 	add.w	r4, r4, #1
   d4984:	d9f7      	bls.n	d4976 <_ZN7TinyGPS13parse_degreesEv+0x1a>
  if (*p == '.')
   d4986:	2a2e      	cmp	r2, #46	; 0x2e
   d4988:	d10d      	bne.n	d49a6 <_ZN7TinyGPS13parse_degreesEv+0x4a>
    unsigned long mult = 10000;
   d498a:	f242 7410 	movw	r4, #10000	; 0x2710
      mult /= 10;
   d498e:	250a      	movs	r5, #10
    while (gpsisdigit(*++p))
   d4990:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d4994:	3a30      	subs	r2, #48	; 0x30
   d4996:	b2d6      	uxtb	r6, r2
   d4998:	2e09      	cmp	r6, #9
   d499a:	d804      	bhi.n	d49a6 <_ZN7TinyGPS13parse_degreesEv+0x4a>
      hundred1000ths_of_minute += mult * (*p - '0');
   d499c:	fb04 3302 	mla	r3, r4, r2, r3
      mult /= 10;
   d49a0:	fbb4 f4f5 	udiv	r4, r4, r5
    while (gpsisdigit(*++p))
   d49a4:	e7f4      	b.n	d4990 <_ZN7TinyGPS13parse_degreesEv+0x34>
  return (left_of_decimal / 100) * 1000000 + (hundred1000ths_of_minute + 3) / 6;
   d49a6:	2264      	movs	r2, #100	; 0x64
   d49a8:	3303      	adds	r3, #3
   d49aa:	fbb0 f0f2 	udiv	r0, r0, r2
   d49ae:	2206      	movs	r2, #6
   d49b0:	fbb3 f3f2 	udiv	r3, r3, r2
}
   d49b4:	4a02      	ldr	r2, [pc, #8]	; (d49c0 <_ZN7TinyGPS13parse_degreesEv+0x64>)
   d49b6:	fb02 3000 	mla	r0, r2, r0, r3
   d49ba:	bd70      	pop	{r4, r5, r6, pc}
   d49bc:	000186a0 	.word	0x000186a0
   d49c0:	000f4240 	.word	0x000f4240

000d49c4 <_ZN7TinyGPS9gpsstrcmpEPKcS1_>:

int TinyGPS::gpsstrcmp(const char *str1, const char *str2)
{
   d49c4:	3901      	subs	r1, #1
   d49c6:	3a01      	subs	r2, #1
  while (*str1 && *str1 == *str2)
   d49c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d49cc:	b118      	cbz	r0, d49d6 <_ZN7TinyGPS9gpsstrcmpEPKcS1_+0x12>
   d49ce:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   d49d2:	4283      	cmp	r3, r0
   d49d4:	d0f8      	beq.n	d49c8 <_ZN7TinyGPS9gpsstrcmpEPKcS1_+0x4>
    ++str1, ++str2;
  return *str1;
}
   d49d6:	4770      	bx	lr

000d49d8 <_ZN7TinyGPS13term_completeEv>:
{
   d49d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_is_checksum_term)
   d49da:	f890 5055 	ldrb.w	r5, [r0, #85]	; 0x55
{
   d49de:	4604      	mov	r4, r0
  if (_is_checksum_term)
   d49e0:	2d00      	cmp	r5, #0
   d49e2:	d046      	beq.n	d4a72 <_ZN7TinyGPS13term_completeEv+0x9a>
    byte checksum = 16 * from_hex(_term[0]) + from_hex(_term[1]);
   d49e4:	f890 1056 	ldrb.w	r1, [r0, #86]	; 0x56
   d49e8:	f7ff ff70 	bl	d48cc <_ZN7TinyGPS8from_hexEc>
   d49ec:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
   d49f0:	4602      	mov	r2, r0
   d49f2:	4620      	mov	r0, r4
   d49f4:	f7ff ff6a 	bl	d48cc <_ZN7TinyGPS8from_hexEc>
    if (checksum == _parity)
   d49f8:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
    byte checksum = 16 * from_hex(_term[0]) + from_hex(_term[1]);
   d49fc:	eb00 1002 	add.w	r0, r0, r2, lsl #4
    if (checksum == _parity)
   d4a00:	b2c0      	uxtb	r0, r0
   d4a02:	4283      	cmp	r3, r0
   d4a04:	d12e      	bne.n	d4a64 <_ZN7TinyGPS13term_completeEv+0x8c>
      if (_gps_data_good)
   d4a06:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
   d4a0a:	b1cd      	cbz	r5, d4a40 <_ZN7TinyGPS13term_completeEv+0x68>
        ++_good_sentences;
   d4a0c:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
   d4a10:	3301      	adds	r3, #1
   d4a12:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
        _last_time_fix = _new_time_fix;
   d4a16:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   d4a18:	6463      	str	r3, [r4, #68]	; 0x44
        _last_position_fix = _new_position_fix;
   d4a1a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d4a1c:	64e3      	str	r3, [r4, #76]	; 0x4c
        switch(_sentence_type)
   d4a1e:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   d4a22:	b183      	cbz	r3, d4a46 <_ZN7TinyGPS13term_completeEv+0x6e>
   d4a24:	2b01      	cmp	r3, #1
   d4a26:	d10b      	bne.n	d4a40 <_ZN7TinyGPS13term_completeEv+0x68>
          _time      = _new_time;
   d4a28:	6863      	ldr	r3, [r4, #4]
   d4a2a:	6023      	str	r3, [r4, #0]
          _date      = _new_date;
   d4a2c:	68e3      	ldr	r3, [r4, #12]
   d4a2e:	60a3      	str	r3, [r4, #8]
          _latitude  = _new_latitude;
   d4a30:	6963      	ldr	r3, [r4, #20]
   d4a32:	6123      	str	r3, [r4, #16]
          _longitude = _new_longitude;
   d4a34:	69e3      	ldr	r3, [r4, #28]
   d4a36:	61a3      	str	r3, [r4, #24]
          _speed     = _new_speed;
   d4a38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d4a3a:	62a3      	str	r3, [r4, #40]	; 0x28
          _course    = _new_course;
   d4a3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d4a3e:	6323      	str	r3, [r4, #48]	; 0x30
}
   d4a40:	4628      	mov	r0, r5
   d4a42:	b003      	add	sp, #12
   d4a44:	bd30      	pop	{r4, r5, pc}
          _altitude  = _new_altitude;
   d4a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d4a48:	6223      	str	r3, [r4, #32]
          _time      = _new_time;
   d4a4a:	6863      	ldr	r3, [r4, #4]
   d4a4c:	6023      	str	r3, [r4, #0]
          _latitude  = _new_latitude;
   d4a4e:	6963      	ldr	r3, [r4, #20]
   d4a50:	6123      	str	r3, [r4, #16]
          _longitude = _new_longitude;
   d4a52:	69e3      	ldr	r3, [r4, #28]
   d4a54:	61a3      	str	r3, [r4, #24]
          _numsats   = _new_numsats;
   d4a56:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   d4a5a:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          _hdop      = _new_hdop;
   d4a5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d4a60:	63a3      	str	r3, [r4, #56]	; 0x38
          break;
   d4a62:	e7ed      	b.n	d4a40 <_ZN7TinyGPS13term_completeEv+0x68>
      ++_failed_checksum;
   d4a64:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
   d4a68:	3301      	adds	r3, #1
   d4a6a:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
    return false;
   d4a6e:	2500      	movs	r5, #0
   d4a70:	e7e6      	b.n	d4a40 <_ZN7TinyGPS13term_completeEv+0x68>
  if (_term_number == 0)
   d4a72:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
   d4a76:	b9aa      	cbnz	r2, d4aa4 <_ZN7TinyGPS13term_completeEv+0xcc>
    if (!gpsstrcmp(_term, _GPRMC_TERM))
   d4a78:	f100 0156 	add.w	r1, r0, #86	; 0x56
   d4a7c:	4a5f      	ldr	r2, [pc, #380]	; (d4bfc <_ZN7TinyGPS13term_completeEv+0x224>)
   d4a7e:	9101      	str	r1, [sp, #4]
   d4a80:	f7ff ffa0 	bl	d49c4 <_ZN7TinyGPS9gpsstrcmpEPKcS1_>
   d4a84:	9901      	ldr	r1, [sp, #4]
   d4a86:	b918      	cbnz	r0, d4a90 <_ZN7TinyGPS13term_completeEv+0xb8>
      _sentence_type = _GPS_SENTENCE_GPRMC;
   d4a88:	2301      	movs	r3, #1
      _sentence_type = _GPS_SENTENCE_OTHER;
   d4a8a:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
   d4a8e:	e7d7      	b.n	d4a40 <_ZN7TinyGPS13term_completeEv+0x68>
    else if (!gpsstrcmp(_term, _GPGGA_TERM))
   d4a90:	4a5b      	ldr	r2, [pc, #364]	; (d4c00 <_ZN7TinyGPS13term_completeEv+0x228>)
   d4a92:	4620      	mov	r0, r4
   d4a94:	f7ff ff96 	bl	d49c4 <_ZN7TinyGPS9gpsstrcmpEPKcS1_>
   d4a98:	b910      	cbnz	r0, d4aa0 <_ZN7TinyGPS13term_completeEv+0xc8>
      _sentence_type = _GPS_SENTENCE_GPGGA;
   d4a9a:	f884 5065 	strb.w	r5, [r4, #101]	; 0x65
   d4a9e:	e7cf      	b.n	d4a40 <_ZN7TinyGPS13term_completeEv+0x68>
      _sentence_type = _GPS_SENTENCE_OTHER;
   d4aa0:	2302      	movs	r3, #2
   d4aa2:	e7f2      	b.n	d4a8a <_ZN7TinyGPS13term_completeEv+0xb2>
  if (_sentence_type != _GPS_SENTENCE_OTHER && _term[0])
   d4aa4:	f890 1065 	ldrb.w	r1, [r0, #101]	; 0x65
   d4aa8:	2902      	cmp	r1, #2
   d4aaa:	d0c9      	beq.n	d4a40 <_ZN7TinyGPS13term_completeEv+0x68>
   d4aac:	f890 3056 	ldrb.w	r3, [r0, #86]	; 0x56
   d4ab0:	2b00      	cmp	r3, #0
   d4ab2:	d0c5      	beq.n	d4a40 <_ZN7TinyGPS13term_completeEv+0x68>
    switch(COMBINE(_sentence_type, _term_number))
   d4ab4:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   d4ab8:	3a01      	subs	r2, #1
   d4aba:	2a28      	cmp	r2, #40	; 0x28
   d4abc:	d8c0      	bhi.n	d4a40 <_ZN7TinyGPS13term_completeEv+0x68>
   d4abe:	a101      	add	r1, pc, #4	; (adr r1, d4ac4 <_ZN7TinyGPS13term_completeEv+0xec>)
   d4ac0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   d4ac4:	000d4b69 	.word	0x000d4b69
   d4ac8:	000d4b85 	.word	0x000d4b85
   d4acc:	000d4b93 	.word	0x000d4b93
   d4ad0:	000d4ba1 	.word	0x000d4ba1
   d4ad4:	000d4ba9 	.word	0x000d4ba9
   d4ad8:	000d4bd3 	.word	0x000d4bd3
   d4adc:	000d4bdd 	.word	0x000d4bdd
   d4ae0:	000d4beb 	.word	0x000d4beb
   d4ae4:	000d4bf3 	.word	0x000d4bf3
   d4ae8:	000d4a41 	.word	0x000d4a41
   d4aec:	000d4a41 	.word	0x000d4a41
   d4af0:	000d4a41 	.word	0x000d4a41
   d4af4:	000d4a41 	.word	0x000d4a41
   d4af8:	000d4a41 	.word	0x000d4a41
   d4afc:	000d4a41 	.word	0x000d4a41
   d4b00:	000d4a41 	.word	0x000d4a41
   d4b04:	000d4a41 	.word	0x000d4a41
   d4b08:	000d4a41 	.word	0x000d4a41
   d4b0c:	000d4a41 	.word	0x000d4a41
   d4b10:	000d4a41 	.word	0x000d4a41
   d4b14:	000d4a41 	.word	0x000d4a41
   d4b18:	000d4a41 	.word	0x000d4a41
   d4b1c:	000d4a41 	.word	0x000d4a41
   d4b20:	000d4a41 	.word	0x000d4a41
   d4b24:	000d4a41 	.word	0x000d4a41
   d4b28:	000d4a41 	.word	0x000d4a41
   d4b2c:	000d4a41 	.word	0x000d4a41
   d4b30:	000d4a41 	.word	0x000d4a41
   d4b34:	000d4a41 	.word	0x000d4a41
   d4b38:	000d4a41 	.word	0x000d4a41
   d4b3c:	000d4a41 	.word	0x000d4a41
   d4b40:	000d4a41 	.word	0x000d4a41
   d4b44:	000d4b69 	.word	0x000d4b69
   d4b48:	000d4b77 	.word	0x000d4b77
   d4b4c:	000d4b85 	.word	0x000d4b85
   d4b50:	000d4b93 	.word	0x000d4b93
   d4b54:	000d4ba1 	.word	0x000d4ba1
   d4b58:	000d4ba9 	.word	0x000d4ba9
   d4b5c:	000d4bb7 	.word	0x000d4bb7
   d4b60:	000d4bbf 	.word	0x000d4bbf
   d4b64:	000d4bc7 	.word	0x000d4bc7
      _new_time = parse_decimal();
   d4b68:	f7ff fecf 	bl	d490a <_ZN7TinyGPS13parse_decimalEv>
   d4b6c:	6060      	str	r0, [r4, #4]
   d4b6e:	f000 f92b 	bl	d4dc8 <HAL_Timer_Get_Milli_Seconds>
      _new_time_fix = millis();
   d4b72:	64a0      	str	r0, [r4, #72]	; 0x48
      break;
   d4b74:	e764      	b.n	d4a40 <_ZN7TinyGPS13term_completeEv+0x68>
      _gps_data_good = _term[0] == 'A';
   d4b76:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   d4b7a:	4253      	negs	r3, r2
   d4b7c:	4153      	adcs	r3, r2
      _gps_data_good = _term[0] > '0';
   d4b7e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
      break;
   d4b82:	e75d      	b.n	d4a40 <_ZN7TinyGPS13term_completeEv+0x68>
      _new_latitude = parse_degrees();
   d4b84:	f7ff feea 	bl	d495c <_ZN7TinyGPS13parse_degreesEv>
   d4b88:	6160      	str	r0, [r4, #20]
   d4b8a:	f000 f91d 	bl	d4dc8 <HAL_Timer_Get_Milli_Seconds>
      _new_position_fix = millis();
   d4b8e:	6520      	str	r0, [r4, #80]	; 0x50
      break;
   d4b90:	e756      	b.n	d4a40 <_ZN7TinyGPS13term_completeEv+0x68>
      if (_term[0] == 'S')
   d4b92:	2b53      	cmp	r3, #83	; 0x53
   d4b94:	f47f af54 	bne.w	d4a40 <_ZN7TinyGPS13term_completeEv+0x68>
        _new_latitude = -_new_latitude;
   d4b98:	6943      	ldr	r3, [r0, #20]
   d4b9a:	425b      	negs	r3, r3
   d4b9c:	6143      	str	r3, [r0, #20]
   d4b9e:	e74f      	b.n	d4a40 <_ZN7TinyGPS13term_completeEv+0x68>
      _new_longitude = parse_degrees();
   d4ba0:	f7ff fedc 	bl	d495c <_ZN7TinyGPS13parse_degreesEv>
   d4ba4:	61e0      	str	r0, [r4, #28]
      break;
   d4ba6:	e74b      	b.n	d4a40 <_ZN7TinyGPS13term_completeEv+0x68>
      if (_term[0] == 'W')
   d4ba8:	2b57      	cmp	r3, #87	; 0x57
   d4baa:	f47f af49 	bne.w	d4a40 <_ZN7TinyGPS13term_completeEv+0x68>
        _new_longitude = -_new_longitude;
   d4bae:	69c3      	ldr	r3, [r0, #28]
   d4bb0:	425b      	negs	r3, r3
   d4bb2:	61c3      	str	r3, [r0, #28]
   d4bb4:	e744      	b.n	d4a40 <_ZN7TinyGPS13term_completeEv+0x68>
      _new_speed = parse_decimal();
   d4bb6:	f7ff fea8 	bl	d490a <_ZN7TinyGPS13parse_decimalEv>
   d4bba:	62e0      	str	r0, [r4, #44]	; 0x2c
      break;
   d4bbc:	e740      	b.n	d4a40 <_ZN7TinyGPS13term_completeEv+0x68>
      _new_course = parse_decimal();
   d4bbe:	f7ff fea4 	bl	d490a <_ZN7TinyGPS13parse_decimalEv>
   d4bc2:	6360      	str	r0, [r4, #52]	; 0x34
      break;
   d4bc4:	e73c      	b.n	d4a40 <_ZN7TinyGPS13term_completeEv+0x68>
      _new_date = gpsatol(_term);
   d4bc6:	f100 0156 	add.w	r1, r0, #86	; 0x56
   d4bca:	f7ff fe8f 	bl	d48ec <_ZN7TinyGPS7gpsatolEPKc>
   d4bce:	60e0      	str	r0, [r4, #12]
      break;
   d4bd0:	e736      	b.n	d4a40 <_ZN7TinyGPS13term_completeEv+0x68>
      _gps_data_good = _term[0] > '0';
   d4bd2:	2b30      	cmp	r3, #48	; 0x30
   d4bd4:	bf94      	ite	ls
   d4bd6:	2300      	movls	r3, #0
   d4bd8:	2301      	movhi	r3, #1
   d4bda:	e7d0      	b.n	d4b7e <_ZN7TinyGPS13term_completeEv+0x1a6>
      _new_numsats = (unsigned char)atoi(_term);
   d4bdc:	3056      	adds	r0, #86	; 0x56
   d4bde:	f002 faff 	bl	d71e0 <atoi>
   d4be2:	b2c0      	uxtb	r0, r0
   d4be4:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
      break;
   d4be8:	e72a      	b.n	d4a40 <_ZN7TinyGPS13term_completeEv+0x68>
      _new_hdop = parse_decimal();
   d4bea:	f7ff fe8e 	bl	d490a <_ZN7TinyGPS13parse_decimalEv>
   d4bee:	63e0      	str	r0, [r4, #60]	; 0x3c
      break;
   d4bf0:	e726      	b.n	d4a40 <_ZN7TinyGPS13term_completeEv+0x68>
      _new_altitude = parse_decimal();
   d4bf2:	f7ff fe8a 	bl	d490a <_ZN7TinyGPS13parse_decimalEv>
   d4bf6:	6260      	str	r0, [r4, #36]	; 0x24
      break;
   d4bf8:	e722      	b.n	d4a40 <_ZN7TinyGPS13term_completeEv+0x68>
   d4bfa:	bf00      	nop
   d4bfc:	000d751b 	.word	0x000d751b
   d4c00:	000d7521 	.word	0x000d7521

000d4c04 <_ZN7TinyGPS6encodeEc>:
{
   d4c04:	b538      	push	{r3, r4, r5, lr}
  ++_encoded_characters;
   d4c06:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  switch(c)
   d4c08:	2924      	cmp	r1, #36	; 0x24
  ++_encoded_characters;
   d4c0a:	f103 0301 	add.w	r3, r3, #1
{
   d4c0e:	4604      	mov	r4, r0
   d4c10:	460d      	mov	r5, r1
  ++_encoded_characters;
   d4c12:	66c3      	str	r3, [r0, #108]	; 0x6c
  switch(c)
   d4c14:	d03a      	beq.n	d4c8c <_ZN7TinyGPS6encodeEc+0x88>
   d4c16:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
   d4c1a:	d814      	bhi.n	d4c46 <_ZN7TinyGPS6encodeEc+0x42>
   d4c1c:	290a      	cmp	r1, #10
   d4c1e:	d01c      	beq.n	d4c5a <_ZN7TinyGPS6encodeEc+0x56>
   d4c20:	290d      	cmp	r1, #13
   d4c22:	d01a      	beq.n	d4c5a <_ZN7TinyGPS6encodeEc+0x56>
  if (_term_offset < sizeof(_term) - 1)
   d4c24:	2b0d      	cmp	r3, #13
    _term[_term_offset++] = c;
   d4c26:	bf9f      	itttt	ls
   d4c28:	1c5a      	addls	r2, r3, #1
   d4c2a:	191b      	addls	r3, r3, r4
   d4c2c:	f884 2067 	strbls.w	r2, [r4, #103]	; 0x67
   d4c30:	f883 5056 	strbls.w	r5, [r3, #86]	; 0x56
  if (!_is_checksum_term)
   d4c34:	f894 0055 	ldrb.w	r0, [r4, #85]	; 0x55
   d4c38:	bb98      	cbnz	r0, d4ca2 <_ZN7TinyGPS6encodeEc+0x9e>
    _parity ^= c;
   d4c3a:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
   d4c3e:	404d      	eors	r5, r1
   d4c40:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
   d4c44:	e021      	b.n	d4c8a <_ZN7TinyGPS6encodeEc+0x86>
  switch(c)
   d4c46:	292a      	cmp	r1, #42	; 0x2a
   d4c48:	d007      	beq.n	d4c5a <_ZN7TinyGPS6encodeEc+0x56>
   d4c4a:	292c      	cmp	r1, #44	; 0x2c
   d4c4c:	d1ea      	bne.n	d4c24 <_ZN7TinyGPS6encodeEc+0x20>
    _parity ^= c;
   d4c4e:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
   d4c52:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
   d4c56:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
    if (_term_offset < sizeof(_term))
   d4c5a:	2b0e      	cmp	r3, #14
   d4c5c:	f04f 0000 	mov.w	r0, #0
   d4c60:	d805      	bhi.n	d4c6e <_ZN7TinyGPS6encodeEc+0x6a>
      _term[_term_offset] = 0;
   d4c62:	4423      	add	r3, r4
   d4c64:	f883 0056 	strb.w	r0, [r3, #86]	; 0x56
      valid_sentence = term_complete();
   d4c68:	4620      	mov	r0, r4
   d4c6a:	f7ff feb5 	bl	d49d8 <_ZN7TinyGPS13term_completeEv>
    ++_term_number;
   d4c6e:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
   d4c72:	3301      	adds	r3, #1
   d4c74:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    _term_offset = 0;
   d4c78:	2300      	movs	r3, #0
   d4c7a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
    _is_checksum_term = c == '*';
   d4c7e:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
   d4c82:	425d      	negs	r5, r3
   d4c84:	415d      	adcs	r5, r3
   d4c86:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
}
   d4c8a:	bd38      	pop	{r3, r4, r5, pc}
    _parity = 0;
   d4c8c:	2000      	movs	r0, #0
    _sentence_type = _GPS_SENTENCE_OTHER;
   d4c8e:	2302      	movs	r3, #2
    _parity = 0;
   d4c90:	f8a4 0054 	strh.w	r0, [r4, #84]	; 0x54
    _sentence_type = _GPS_SENTENCE_OTHER;
   d4c94:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    _term_number = _term_offset = 0;
   d4c98:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
    _gps_data_good = false;
   d4c9c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return valid_sentence;
   d4ca0:	e7f3      	b.n	d4c8a <_ZN7TinyGPS6encodeEc+0x86>
  return valid_sentence;
   d4ca2:	2000      	movs	r0, #0
   d4ca4:	e7f1      	b.n	d4c8a <_ZN7TinyGPS6encodeEc+0x86>

000d4ca6 <_ZN7TinyGPS12get_positionEPlS0_Pm>:
}

// lat/long in MILLIONTHs of a degree and age of fix in milliseconds
// (note: versions 12 and earlier gave this value in 100,000ths of a degree.
void TinyGPS::get_position(long *latitude, long *longitude, unsigned long *fix_age)
{
   d4ca6:	b538      	push	{r3, r4, r5, lr}
   d4ca8:	4604      	mov	r4, r0
   d4caa:	461d      	mov	r5, r3
  if (latitude) *latitude = _latitude;
   d4cac:	b109      	cbz	r1, d4cb2 <_ZN7TinyGPS12get_positionEPlS0_Pm+0xc>
   d4cae:	6903      	ldr	r3, [r0, #16]
   d4cb0:	600b      	str	r3, [r1, #0]
  if (longitude) *longitude = _longitude;
   d4cb2:	b10a      	cbz	r2, d4cb8 <_ZN7TinyGPS12get_positionEPlS0_Pm+0x12>
   d4cb4:	69a3      	ldr	r3, [r4, #24]
   d4cb6:	6013      	str	r3, [r2, #0]
  if (fix_age) *fix_age = _last_position_fix == GPS_INVALID_FIX_TIME ? 
   d4cb8:	b13d      	cbz	r5, d4cca <_ZN7TinyGPS12get_positionEPlS0_Pm+0x24>
   d4cba:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d4cbc:	1c43      	adds	r3, r0, #1
   d4cbe:	d003      	beq.n	d4cc8 <_ZN7TinyGPS12get_positionEPlS0_Pm+0x22>
   d4cc0:	f000 f882 	bl	d4dc8 <HAL_Timer_Get_Milli_Seconds>
   d4cc4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d4cc6:	1ac0      	subs	r0, r0, r3
   d4cc8:	6028      	str	r0, [r5, #0]
   GPS_INVALID_AGE : millis() - _last_position_fix;
}
   d4cca:	bd38      	pop	{r3, r4, r5, pc}
   d4ccc:	0000      	movs	r0, r0
	...

000d4cd0 <_ZN7TinyGPS14f_get_positionEPfS0_Pm>:
  if (age) *age = _last_time_fix == GPS_INVALID_FIX_TIME ? 
   GPS_INVALID_AGE : millis() - _last_time_fix;
}

void TinyGPS::f_get_position(float *latitude, float *longitude, unsigned long *fix_age)
{
   d4cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4cd2:	460f      	mov	r7, r1
   d4cd4:	4615      	mov	r5, r2
  long lat, lon;
  get_position(&lat, &lon, fix_age);
   d4cd6:	4669      	mov	r1, sp
   d4cd8:	aa01      	add	r2, sp, #4
   d4cda:	f7ff ffe4 	bl	d4ca6 <_ZN7TinyGPS12get_positionEPlS0_Pm>
  *latitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lat / 1000000.0);
   d4cde:	4c14      	ldr	r4, [pc, #80]	; (d4d30 <_ZN7TinyGPS14f_get_positionEPfS0_Pm+0x60>)
   d4ce0:	9e00      	ldr	r6, [sp, #0]
   d4ce2:	42a6      	cmp	r6, r4
   d4ce4:	d019      	beq.n	d4d1a <_ZN7TinyGPS14f_get_positionEPfS0_Pm+0x4a>
   d4ce6:	4630      	mov	r0, r6
   d4ce8:	f001 fd6c 	bl	d67c4 <__aeabi_i2d>
   d4cec:	a30e      	add	r3, pc, #56	; (adr r3, d4d28 <_ZN7TinyGPS14f_get_positionEPfS0_Pm+0x58>)
   d4cee:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4cf2:	f001 fefb 	bl	d6aec <__aeabi_ddiv>
   d4cf6:	f002 f889 	bl	d6e0c <__aeabi_d2f>
  *longitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lon / 1000000.0);
   d4cfa:	42a6      	cmp	r6, r4
  *latitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lat / 1000000.0);
   d4cfc:	6038      	str	r0, [r7, #0]
  *longitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lon / 1000000.0);
   d4cfe:	d00e      	beq.n	d4d1e <_ZN7TinyGPS14f_get_positionEPfS0_Pm+0x4e>
   d4d00:	9801      	ldr	r0, [sp, #4]
   d4d02:	f001 fd5f 	bl	d67c4 <__aeabi_i2d>
   d4d06:	a308      	add	r3, pc, #32	; (adr r3, d4d28 <_ZN7TinyGPS14f_get_positionEPfS0_Pm+0x58>)
   d4d08:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4d0c:	f001 feee 	bl	d6aec <__aeabi_ddiv>
   d4d10:	f002 f87c 	bl	d6e0c <__aeabi_d2f>
   d4d14:	6028      	str	r0, [r5, #0]
}
   d4d16:	b003      	add	sp, #12
   d4d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *latitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lat / 1000000.0);
   d4d1a:	4806      	ldr	r0, [pc, #24]	; (d4d34 <_ZN7TinyGPS14f_get_positionEPfS0_Pm+0x64>)
   d4d1c:	e7ed      	b.n	d4cfa <_ZN7TinyGPS14f_get_positionEPfS0_Pm+0x2a>
  *longitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lon / 1000000.0);
   d4d1e:	4805      	ldr	r0, [pc, #20]	; (d4d34 <_ZN7TinyGPS14f_get_positionEPfS0_Pm+0x64>)
   d4d20:	e7f8      	b.n	d4d14 <_ZN7TinyGPS14f_get_positionEPfS0_Pm+0x44>
   d4d22:	bf00      	nop
   d4d24:	f3af 8000 	nop.w
   d4d28:	00000000 	.word	0x00000000
   d4d2c:	412e8480 	.word	0x412e8480
   d4d30:	3b9ac9ff 	.word	0x3b9ac9ff
   d4d34:	447a0000 	.word	0x447a0000

000d4d38 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4d38:	b508      	push	{r3, lr}
   d4d3a:	4b02      	ldr	r3, [pc, #8]	; (d4d44 <netdb_freeaddrinfo+0xc>)
   d4d3c:	681b      	ldr	r3, [r3, #0]
   d4d3e:	689b      	ldr	r3, [r3, #8]
   d4d40:	9301      	str	r3, [sp, #4]
   d4d42:	bd08      	pop	{r3, pc}
   d4d44:	00030268 	.word	0x00030268

000d4d48 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4d48:	b508      	push	{r3, lr}
   d4d4a:	4b02      	ldr	r3, [pc, #8]	; (d4d54 <netdb_getaddrinfo+0xc>)
   d4d4c:	681b      	ldr	r3, [r3, #0]
   d4d4e:	68db      	ldr	r3, [r3, #12]
   d4d50:	9301      	str	r3, [sp, #4]
   d4d52:	bd08      	pop	{r3, pc}
   d4d54:	00030268 	.word	0x00030268

000d4d58 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4d58:	b508      	push	{r3, lr}
   d4d5a:	4b02      	ldr	r3, [pc, #8]	; (d4d64 <HAL_Validate_Pin_Function+0xc>)
   d4d5c:	681b      	ldr	r3, [r3, #0]
   d4d5e:	685b      	ldr	r3, [r3, #4]
   d4d60:	9301      	str	r3, [sp, #4]
   d4d62:	bd08      	pop	{r3, pc}
   d4d64:	0003022c 	.word	0x0003022c

000d4d68 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4d68:	b508      	push	{r3, lr}
   d4d6a:	4b02      	ldr	r3, [pc, #8]	; (d4d74 <HAL_Pin_Mode+0xc>)
   d4d6c:	681b      	ldr	r3, [r3, #0]
   d4d6e:	689b      	ldr	r3, [r3, #8]
   d4d70:	9301      	str	r3, [sp, #4]
   d4d72:	bd08      	pop	{r3, pc}
   d4d74:	0003022c 	.word	0x0003022c

000d4d78 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4d78:	b508      	push	{r3, lr}
   d4d7a:	4b02      	ldr	r3, [pc, #8]	; (d4d84 <HAL_Get_Pin_Mode+0xc>)
   d4d7c:	681b      	ldr	r3, [r3, #0]
   d4d7e:	68db      	ldr	r3, [r3, #12]
   d4d80:	9301      	str	r3, [sp, #4]
   d4d82:	bd08      	pop	{r3, pc}
   d4d84:	0003022c 	.word	0x0003022c

000d4d88 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4d88:	b508      	push	{r3, lr}
   d4d8a:	4b02      	ldr	r3, [pc, #8]	; (d4d94 <HAL_GPIO_Write+0xc>)
   d4d8c:	681b      	ldr	r3, [r3, #0]
   d4d8e:	691b      	ldr	r3, [r3, #16]
   d4d90:	9301      	str	r3, [sp, #4]
   d4d92:	bd08      	pop	{r3, pc}
   d4d94:	0003022c 	.word	0x0003022c

000d4d98 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4d98:	b508      	push	{r3, lr}
   d4d9a:	4b02      	ldr	r3, [pc, #8]	; (d4da4 <HAL_GPIO_Read+0xc>)
   d4d9c:	681b      	ldr	r3, [r3, #0]
   d4d9e:	695b      	ldr	r3, [r3, #20]
   d4da0:	9301      	str	r3, [sp, #4]
   d4da2:	bd08      	pop	{r3, pc}
   d4da4:	0003022c 	.word	0x0003022c

000d4da8 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d4da8:	b508      	push	{r3, lr}
   d4daa:	4b02      	ldr	r3, [pc, #8]	; (d4db4 <hal_adc_read+0xc>)
   d4dac:	681b      	ldr	r3, [r3, #0]
   d4dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4db0:	9301      	str	r3, [sp, #4]
   d4db2:	bd08      	pop	{r3, pc}
   d4db4:	0003022c 	.word	0x0003022c

000d4db8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4db8:	b508      	push	{r3, lr}
   d4dba:	4b02      	ldr	r3, [pc, #8]	; (d4dc4 <HAL_RNG_GetRandomNumber+0xc>)
   d4dbc:	681b      	ldr	r3, [r3, #0]
   d4dbe:	685b      	ldr	r3, [r3, #4]
   d4dc0:	9301      	str	r3, [sp, #4]
   d4dc2:	bd08      	pop	{r3, pc}
   d4dc4:	00030218 	.word	0x00030218

000d4dc8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4dc8:	b508      	push	{r3, lr}
   d4dca:	4b02      	ldr	r3, [pc, #8]	; (d4dd4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4dcc:	681b      	ldr	r3, [r3, #0]
   d4dce:	695b      	ldr	r3, [r3, #20]
   d4dd0:	9301      	str	r3, [sp, #4]
   d4dd2:	bd08      	pop	{r3, pc}
   d4dd4:	00030218 	.word	0x00030218

000d4dd8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4dd8:	b508      	push	{r3, lr}
   d4dda:	4b02      	ldr	r3, [pc, #8]	; (d4de4 <os_mutex_recursive_create+0xc>)
   d4ddc:	681b      	ldr	r3, [r3, #0]
   d4dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4de0:	9301      	str	r3, [sp, #4]
   d4de2:	bd08      	pop	{r3, pc}
   d4de4:	00030248 	.word	0x00030248

000d4de8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4de8:	b508      	push	{r3, lr}
   d4dea:	4b02      	ldr	r3, [pc, #8]	; (d4df4 <os_mutex_recursive_destroy+0xc>)
   d4dec:	681b      	ldr	r3, [r3, #0]
   d4dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4df0:	9301      	str	r3, [sp, #4]
   d4df2:	bd08      	pop	{r3, pc}
   d4df4:	00030248 	.word	0x00030248

000d4df8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4df8:	b508      	push	{r3, lr}
   d4dfa:	4b02      	ldr	r3, [pc, #8]	; (d4e04 <inet_inet_ntop+0xc>)
   d4dfc:	681b      	ldr	r3, [r3, #0]
   d4dfe:	695b      	ldr	r3, [r3, #20]
   d4e00:	9301      	str	r3, [sp, #4]
   d4e02:	bd08      	pop	{r3, pc}
   d4e04:	00030264 	.word	0x00030264

000d4e08 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4e08:	b508      	push	{r3, lr}
   d4e0a:	4b02      	ldr	r3, [pc, #8]	; (d4e14 <hal_usart_init+0xc>)
   d4e0c:	681b      	ldr	r3, [r3, #0]
   d4e0e:	681b      	ldr	r3, [r3, #0]
   d4e10:	9301      	str	r3, [sp, #4]
   d4e12:	bd08      	pop	{r3, pc}
   d4e14:	0003023c 	.word	0x0003023c

000d4e18 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4e18:	b508      	push	{r3, lr}
   d4e1a:	4b02      	ldr	r3, [pc, #8]	; (d4e24 <hal_usart_write+0xc>)
   d4e1c:	681b      	ldr	r3, [r3, #0]
   d4e1e:	68db      	ldr	r3, [r3, #12]
   d4e20:	9301      	str	r3, [sp, #4]
   d4e22:	bd08      	pop	{r3, pc}
   d4e24:	0003023c 	.word	0x0003023c

000d4e28 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4e28:	b508      	push	{r3, lr}
   d4e2a:	4b02      	ldr	r3, [pc, #8]	; (d4e34 <hal_usart_available+0xc>)
   d4e2c:	681b      	ldr	r3, [r3, #0]
   d4e2e:	691b      	ldr	r3, [r3, #16]
   d4e30:	9301      	str	r3, [sp, #4]
   d4e32:	bd08      	pop	{r3, pc}
   d4e34:	0003023c 	.word	0x0003023c

000d4e38 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4e38:	b508      	push	{r3, lr}
   d4e3a:	4b02      	ldr	r3, [pc, #8]	; (d4e44 <hal_usart_read+0xc>)
   d4e3c:	681b      	ldr	r3, [r3, #0]
   d4e3e:	695b      	ldr	r3, [r3, #20]
   d4e40:	9301      	str	r3, [sp, #4]
   d4e42:	bd08      	pop	{r3, pc}
   d4e44:	0003023c 	.word	0x0003023c

000d4e48 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4e48:	b508      	push	{r3, lr}
   d4e4a:	4b02      	ldr	r3, [pc, #8]	; (d4e54 <hal_usart_peek+0xc>)
   d4e4c:	681b      	ldr	r3, [r3, #0]
   d4e4e:	699b      	ldr	r3, [r3, #24]
   d4e50:	9301      	str	r3, [sp, #4]
   d4e52:	bd08      	pop	{r3, pc}
   d4e54:	0003023c 	.word	0x0003023c

000d4e58 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4e58:	b508      	push	{r3, lr}
   d4e5a:	4b02      	ldr	r3, [pc, #8]	; (d4e64 <hal_usart_flush+0xc>)
   d4e5c:	681b      	ldr	r3, [r3, #0]
   d4e5e:	69db      	ldr	r3, [r3, #28]
   d4e60:	9301      	str	r3, [sp, #4]
   d4e62:	bd08      	pop	{r3, pc}
   d4e64:	0003023c 	.word	0x0003023c

000d4e68 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4e68:	b508      	push	{r3, lr}
   d4e6a:	4b02      	ldr	r3, [pc, #8]	; (d4e74 <hal_usart_is_enabled+0xc>)
   d4e6c:	681b      	ldr	r3, [r3, #0]
   d4e6e:	6a1b      	ldr	r3, [r3, #32]
   d4e70:	9301      	str	r3, [sp, #4]
   d4e72:	bd08      	pop	{r3, pc}
   d4e74:	0003023c 	.word	0x0003023c

000d4e78 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4e78:	b508      	push	{r3, lr}
   d4e7a:	4b02      	ldr	r3, [pc, #8]	; (d4e84 <hal_usart_available_data_for_write+0xc>)
   d4e7c:	681b      	ldr	r3, [r3, #0]
   d4e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4e80:	9301      	str	r3, [sp, #4]
   d4e82:	bd08      	pop	{r3, pc}
   d4e84:	0003023c 	.word	0x0003023c

000d4e88 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d4e88:	b508      	push	{r3, lr}
   d4e8a:	4b02      	ldr	r3, [pc, #8]	; (d4e94 <hal_usart_begin_config+0xc>)
   d4e8c:	681b      	ldr	r3, [r3, #0]
   d4e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e90:	9301      	str	r3, [sp, #4]
   d4e92:	bd08      	pop	{r3, pc}
   d4e94:	0003023c 	.word	0x0003023c

000d4e98 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4e98:	b508      	push	{r3, lr}
   d4e9a:	4b02      	ldr	r3, [pc, #8]	; (d4ea4 <hal_i2c_write+0xc>)
   d4e9c:	681b      	ldr	r3, [r3, #0]
   d4e9e:	6a1b      	ldr	r3, [r3, #32]
   d4ea0:	9301      	str	r3, [sp, #4]
   d4ea2:	bd08      	pop	{r3, pc}
   d4ea4:	00030228 	.word	0x00030228

000d4ea8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4ea8:	b508      	push	{r3, lr}
   d4eaa:	4b02      	ldr	r3, [pc, #8]	; (d4eb4 <hal_i2c_available+0xc>)
   d4eac:	681b      	ldr	r3, [r3, #0]
   d4eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4eb0:	9301      	str	r3, [sp, #4]
   d4eb2:	bd08      	pop	{r3, pc}
   d4eb4:	00030228 	.word	0x00030228

000d4eb8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4eb8:	b508      	push	{r3, lr}
   d4eba:	4b02      	ldr	r3, [pc, #8]	; (d4ec4 <hal_i2c_read+0xc>)
   d4ebc:	681b      	ldr	r3, [r3, #0]
   d4ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4ec0:	9301      	str	r3, [sp, #4]
   d4ec2:	bd08      	pop	{r3, pc}
   d4ec4:	00030228 	.word	0x00030228

000d4ec8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4ec8:	b508      	push	{r3, lr}
   d4eca:	4b02      	ldr	r3, [pc, #8]	; (d4ed4 <hal_i2c_peek+0xc>)
   d4ecc:	681b      	ldr	r3, [r3, #0]
   d4ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4ed0:	9301      	str	r3, [sp, #4]
   d4ed2:	bd08      	pop	{r3, pc}
   d4ed4:	00030228 	.word	0x00030228

000d4ed8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4ed8:	b508      	push	{r3, lr}
   d4eda:	4b02      	ldr	r3, [pc, #8]	; (d4ee4 <hal_i2c_flush+0xc>)
   d4edc:	681b      	ldr	r3, [r3, #0]
   d4ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ee0:	9301      	str	r3, [sp, #4]
   d4ee2:	bd08      	pop	{r3, pc}
   d4ee4:	00030228 	.word	0x00030228

000d4ee8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4ee8:	b508      	push	{r3, lr}
   d4eea:	4b02      	ldr	r3, [pc, #8]	; (d4ef4 <hal_i2c_is_enabled+0xc>)
   d4eec:	681b      	ldr	r3, [r3, #0]
   d4eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4ef0:	9301      	str	r3, [sp, #4]
   d4ef2:	bd08      	pop	{r3, pc}
   d4ef4:	00030228 	.word	0x00030228

000d4ef8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4ef8:	b508      	push	{r3, lr}
   d4efa:	4b02      	ldr	r3, [pc, #8]	; (d4f04 <hal_i2c_init+0xc>)
   d4efc:	681b      	ldr	r3, [r3, #0]
   d4efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4f00:	9301      	str	r3, [sp, #4]
   d4f02:	bd08      	pop	{r3, pc}
   d4f04:	00030228 	.word	0x00030228

000d4f08 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4f08:	b508      	push	{r3, lr}
   d4f0a:	4b02      	ldr	r3, [pc, #8]	; (d4f14 <hal_spi_init+0xc>)
   d4f0c:	681b      	ldr	r3, [r3, #0]
   d4f0e:	69db      	ldr	r3, [r3, #28]
   d4f10:	9301      	str	r3, [sp, #4]
   d4f12:	bd08      	pop	{r3, pc}
   d4f14:	00030230 	.word	0x00030230

000d4f18 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4f18:	b508      	push	{r3, lr}
   d4f1a:	4b02      	ldr	r3, [pc, #8]	; (d4f24 <hal_spi_is_enabled+0xc>)
   d4f1c:	681b      	ldr	r3, [r3, #0]
   d4f1e:	6a1b      	ldr	r3, [r3, #32]
   d4f20:	9301      	str	r3, [sp, #4]
   d4f22:	bd08      	pop	{r3, pc}
   d4f24:	00030230 	.word	0x00030230

000d4f28 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4f28:	b508      	push	{r3, lr}
   d4f2a:	4b02      	ldr	r3, [pc, #8]	; (d4f34 <HAL_USB_USART_Init+0xc>)
   d4f2c:	681b      	ldr	r3, [r3, #0]
   d4f2e:	681b      	ldr	r3, [r3, #0]
   d4f30:	9301      	str	r3, [sp, #4]
   d4f32:	bd08      	pop	{r3, pc}
   d4f34:	0003024c 	.word	0x0003024c

000d4f38 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4f38:	b508      	push	{r3, lr}
   d4f3a:	4b02      	ldr	r3, [pc, #8]	; (d4f44 <HAL_USB_USART_Begin+0xc>)
   d4f3c:	681b      	ldr	r3, [r3, #0]
   d4f3e:	685b      	ldr	r3, [r3, #4]
   d4f40:	9301      	str	r3, [sp, #4]
   d4f42:	bd08      	pop	{r3, pc}
   d4f44:	0003024c 	.word	0x0003024c

000d4f48 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4f48:	b508      	push	{r3, lr}
   d4f4a:	4b02      	ldr	r3, [pc, #8]	; (d4f54 <HAL_USB_USART_Available_Data+0xc>)
   d4f4c:	681b      	ldr	r3, [r3, #0]
   d4f4e:	691b      	ldr	r3, [r3, #16]
   d4f50:	9301      	str	r3, [sp, #4]
   d4f52:	bd08      	pop	{r3, pc}
   d4f54:	0003024c 	.word	0x0003024c

000d4f58 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4f58:	b508      	push	{r3, lr}
   d4f5a:	4b02      	ldr	r3, [pc, #8]	; (d4f64 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4f5c:	681b      	ldr	r3, [r3, #0]
   d4f5e:	695b      	ldr	r3, [r3, #20]
   d4f60:	9301      	str	r3, [sp, #4]
   d4f62:	bd08      	pop	{r3, pc}
   d4f64:	0003024c 	.word	0x0003024c

000d4f68 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4f68:	b508      	push	{r3, lr}
   d4f6a:	4b02      	ldr	r3, [pc, #8]	; (d4f74 <HAL_USB_USART_Receive_Data+0xc>)
   d4f6c:	681b      	ldr	r3, [r3, #0]
   d4f6e:	699b      	ldr	r3, [r3, #24]
   d4f70:	9301      	str	r3, [sp, #4]
   d4f72:	bd08      	pop	{r3, pc}
   d4f74:	0003024c 	.word	0x0003024c

000d4f78 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4f78:	b508      	push	{r3, lr}
   d4f7a:	4b02      	ldr	r3, [pc, #8]	; (d4f84 <HAL_USB_USART_Send_Data+0xc>)
   d4f7c:	681b      	ldr	r3, [r3, #0]
   d4f7e:	69db      	ldr	r3, [r3, #28]
   d4f80:	9301      	str	r3, [sp, #4]
   d4f82:	bd08      	pop	{r3, pc}
   d4f84:	0003024c 	.word	0x0003024c

000d4f88 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4f88:	b508      	push	{r3, lr}
   d4f8a:	4b02      	ldr	r3, [pc, #8]	; (d4f94 <HAL_USB_USART_Flush_Data+0xc>)
   d4f8c:	681b      	ldr	r3, [r3, #0]
   d4f8e:	6a1b      	ldr	r3, [r3, #32]
   d4f90:	9301      	str	r3, [sp, #4]
   d4f92:	bd08      	pop	{r3, pc}
   d4f94:	0003024c 	.word	0x0003024c

000d4f98 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4f98:	b508      	push	{r3, lr}
   d4f9a:	4b02      	ldr	r3, [pc, #8]	; (d4fa4 <set_system_mode+0xc>)
   d4f9c:	681b      	ldr	r3, [r3, #0]
   d4f9e:	685b      	ldr	r3, [r3, #4]
   d4fa0:	9301      	str	r3, [sp, #4]
   d4fa2:	bd08      	pop	{r3, pc}
   d4fa4:	00030220 	.word	0x00030220

000d4fa8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4fa8:	b508      	push	{r3, lr}
   d4faa:	4b02      	ldr	r3, [pc, #8]	; (d4fb4 <application_thread_current+0xc>)
   d4fac:	681b      	ldr	r3, [r3, #0]
   d4fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4fb0:	9301      	str	r3, [sp, #4]
   d4fb2:	bd08      	pop	{r3, pc}
   d4fb4:	00030220 	.word	0x00030220

000d4fb8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4fb8:	b508      	push	{r3, lr}
   d4fba:	4b02      	ldr	r3, [pc, #8]	; (d4fc4 <application_thread_invoke+0xc>)
   d4fbc:	681b      	ldr	r3, [r3, #0]
   d4fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4fc0:	9301      	str	r3, [sp, #4]
   d4fc2:	bd08      	pop	{r3, pc}
   d4fc4:	00030220 	.word	0x00030220

000d4fc8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4fc8:	b508      	push	{r3, lr}
   d4fca:	4b03      	ldr	r3, [pc, #12]	; (d4fd8 <system_ctrl_set_app_request_handler+0x10>)
   d4fcc:	681b      	ldr	r3, [r3, #0]
   d4fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4fd2:	9301      	str	r3, [sp, #4]
   d4fd4:	bd08      	pop	{r3, pc}
   d4fd6:	0000      	.short	0x0000
   d4fd8:	00030220 	.word	0x00030220

000d4fdc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4fdc:	b508      	push	{r3, lr}
   d4fde:	4b03      	ldr	r3, [pc, #12]	; (d4fec <system_ctrl_set_result+0x10>)
   d4fe0:	681b      	ldr	r3, [r3, #0]
   d4fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4fe6:	9301      	str	r3, [sp, #4]
   d4fe8:	bd08      	pop	{r3, pc}
   d4fea:	0000      	.short	0x0000
   d4fec:	00030220 	.word	0x00030220

000d4ff0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4ff0:	b508      	push	{r3, lr}
   d4ff2:	4b02      	ldr	r3, [pc, #8]	; (d4ffc <network_connect+0xc>)
   d4ff4:	681b      	ldr	r3, [r3, #0]
   d4ff6:	685b      	ldr	r3, [r3, #4]
   d4ff8:	9301      	str	r3, [sp, #4]
   d4ffa:	bd08      	pop	{r3, pc}
   d4ffc:	00030240 	.word	0x00030240

000d5000 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5000:	b508      	push	{r3, lr}
   d5002:	4b02      	ldr	r3, [pc, #8]	; (d500c <network_connecting+0xc>)
   d5004:	681b      	ldr	r3, [r3, #0]
   d5006:	689b      	ldr	r3, [r3, #8]
   d5008:	9301      	str	r3, [sp, #4]
   d500a:	bd08      	pop	{r3, pc}
   d500c:	00030240 	.word	0x00030240

000d5010 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5010:	b508      	push	{r3, lr}
   d5012:	4b02      	ldr	r3, [pc, #8]	; (d501c <network_disconnect+0xc>)
   d5014:	681b      	ldr	r3, [r3, #0]
   d5016:	68db      	ldr	r3, [r3, #12]
   d5018:	9301      	str	r3, [sp, #4]
   d501a:	bd08      	pop	{r3, pc}
   d501c:	00030240 	.word	0x00030240

000d5020 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5020:	b508      	push	{r3, lr}
   d5022:	4b02      	ldr	r3, [pc, #8]	; (d502c <network_ready+0xc>)
   d5024:	681b      	ldr	r3, [r3, #0]
   d5026:	691b      	ldr	r3, [r3, #16]
   d5028:	9301      	str	r3, [sp, #4]
   d502a:	bd08      	pop	{r3, pc}
   d502c:	00030240 	.word	0x00030240

000d5030 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5030:	b508      	push	{r3, lr}
   d5032:	4b02      	ldr	r3, [pc, #8]	; (d503c <network_on+0xc>)
   d5034:	681b      	ldr	r3, [r3, #0]
   d5036:	695b      	ldr	r3, [r3, #20]
   d5038:	9301      	str	r3, [sp, #4]
   d503a:	bd08      	pop	{r3, pc}
   d503c:	00030240 	.word	0x00030240

000d5040 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5040:	b508      	push	{r3, lr}
   d5042:	4b02      	ldr	r3, [pc, #8]	; (d504c <network_off+0xc>)
   d5044:	681b      	ldr	r3, [r3, #0]
   d5046:	699b      	ldr	r3, [r3, #24]
   d5048:	9301      	str	r3, [sp, #4]
   d504a:	bd08      	pop	{r3, pc}
   d504c:	00030240 	.word	0x00030240

000d5050 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5050:	b508      	push	{r3, lr}
   d5052:	4b02      	ldr	r3, [pc, #8]	; (d505c <network_listen+0xc>)
   d5054:	681b      	ldr	r3, [r3, #0]
   d5056:	69db      	ldr	r3, [r3, #28]
   d5058:	9301      	str	r3, [sp, #4]
   d505a:	bd08      	pop	{r3, pc}
   d505c:	00030240 	.word	0x00030240

000d5060 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5060:	b508      	push	{r3, lr}
   d5062:	4b02      	ldr	r3, [pc, #8]	; (d506c <network_listening+0xc>)
   d5064:	681b      	ldr	r3, [r3, #0]
   d5066:	6a1b      	ldr	r3, [r3, #32]
   d5068:	9301      	str	r3, [sp, #4]
   d506a:	bd08      	pop	{r3, pc}
   d506c:	00030240 	.word	0x00030240

000d5070 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5070:	b508      	push	{r3, lr}
   d5072:	4b02      	ldr	r3, [pc, #8]	; (d507c <network_set_listen_timeout+0xc>)
   d5074:	681b      	ldr	r3, [r3, #0]
   d5076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5078:	9301      	str	r3, [sp, #4]
   d507a:	bd08      	pop	{r3, pc}
   d507c:	00030240 	.word	0x00030240

000d5080 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5080:	b508      	push	{r3, lr}
   d5082:	4b02      	ldr	r3, [pc, #8]	; (d508c <network_get_listen_timeout+0xc>)
   d5084:	681b      	ldr	r3, [r3, #0]
   d5086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5088:	9301      	str	r3, [sp, #4]
   d508a:	bd08      	pop	{r3, pc}
   d508c:	00030240 	.word	0x00030240

000d5090 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5090:	b508      	push	{r3, lr}
   d5092:	4b02      	ldr	r3, [pc, #8]	; (d509c <network_is_on+0xc>)
   d5094:	681b      	ldr	r3, [r3, #0]
   d5096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5098:	9301      	str	r3, [sp, #4]
   d509a:	bd08      	pop	{r3, pc}
   d509c:	00030240 	.word	0x00030240

000d50a0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d50a0:	b508      	push	{r3, lr}
   d50a2:	4b02      	ldr	r3, [pc, #8]	; (d50ac <network_is_off+0xc>)
   d50a4:	681b      	ldr	r3, [r3, #0]
   d50a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d50a8:	9301      	str	r3, [sp, #4]
   d50aa:	bd08      	pop	{r3, pc}
   d50ac:	00030240 	.word	0x00030240

000d50b0 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d50b0:	b508      	push	{r3, lr}
   d50b2:	4b02      	ldr	r3, [pc, #8]	; (d50bc <spark_cloud_flag_connected+0xc>)
   d50b4:	681b      	ldr	r3, [r3, #0]
   d50b6:	695b      	ldr	r3, [r3, #20]
   d50b8:	9301      	str	r3, [sp, #4]
   d50ba:	bd08      	pop	{r3, pc}
   d50bc:	00030244 	.word	0x00030244

000d50c0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d50c0:	b508      	push	{r3, lr}
   d50c2:	4b02      	ldr	r3, [pc, #8]	; (d50cc <spark_send_event+0xc>)
   d50c4:	681b      	ldr	r3, [r3, #0]
   d50c6:	6a1b      	ldr	r3, [r3, #32]
   d50c8:	9301      	str	r3, [sp, #4]
   d50ca:	bd08      	pop	{r3, pc}
   d50cc:	00030244 	.word	0x00030244

000d50d0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d50d0:	b508      	push	{r3, lr}
   d50d2:	4b02      	ldr	r3, [pc, #8]	; (d50dc <spark_set_random_seed_from_cloud_handler+0xc>)
   d50d4:	681b      	ldr	r3, [r3, #0]
   d50d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d50d8:	9301      	str	r3, [sp, #4]
   d50da:	bd08      	pop	{r3, pc}
   d50dc:	00030244 	.word	0x00030244

000d50e0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d50e0:	b508      	push	{r3, lr}
   d50e2:	4b02      	ldr	r3, [pc, #8]	; (d50ec <malloc+0xc>)
   d50e4:	681b      	ldr	r3, [r3, #0]
   d50e6:	681b      	ldr	r3, [r3, #0]
   d50e8:	9301      	str	r3, [sp, #4]
   d50ea:	bd08      	pop	{r3, pc}
   d50ec:	0003021c 	.word	0x0003021c

000d50f0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d50f0:	b508      	push	{r3, lr}
   d50f2:	4b02      	ldr	r3, [pc, #8]	; (d50fc <free+0xc>)
   d50f4:	681b      	ldr	r3, [r3, #0]
   d50f6:	685b      	ldr	r3, [r3, #4]
   d50f8:	9301      	str	r3, [sp, #4]
   d50fa:	bd08      	pop	{r3, pc}
   d50fc:	0003021c 	.word	0x0003021c

000d5100 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5100:	b508      	push	{r3, lr}
   d5102:	4b02      	ldr	r3, [pc, #8]	; (d510c <realloc+0xc>)
   d5104:	681b      	ldr	r3, [r3, #0]
   d5106:	689b      	ldr	r3, [r3, #8]
   d5108:	9301      	str	r3, [sp, #4]
   d510a:	bd08      	pop	{r3, pc}
   d510c:	0003021c 	.word	0x0003021c

000d5110 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5110:	b508      	push	{r3, lr}
   d5112:	4b02      	ldr	r3, [pc, #8]	; (d511c <abort+0xc>)
   d5114:	681b      	ldr	r3, [r3, #0]
   d5116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5118:	9301      	str	r3, [sp, #4]
   d511a:	bd08      	pop	{r3, pc}
   d511c:	0003021c 	.word	0x0003021c

000d5120 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5120:	b508      	push	{r3, lr}
   d5122:	4b02      	ldr	r3, [pc, #8]	; (d512c <_malloc_r+0xc>)
   d5124:	681b      	ldr	r3, [r3, #0]
   d5126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5128:	9301      	str	r3, [sp, #4]
   d512a:	bd08      	pop	{r3, pc}
   d512c:	0003021c 	.word	0x0003021c

000d5130 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5130:	b508      	push	{r3, lr}
   d5132:	4b02      	ldr	r3, [pc, #8]	; (d513c <newlib_impure_ptr_callback+0xc>)
   d5134:	681b      	ldr	r3, [r3, #0]
   d5136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5138:	9301      	str	r3, [sp, #4]
   d513a:	bd08      	pop	{r3, pc}
   d513c:	0003021c 	.word	0x0003021c

000d5140 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5140:	2200      	movs	r2, #0
   d5142:	6840      	ldr	r0, [r0, #4]
   d5144:	4611      	mov	r1, r2
   d5146:	f7ff bf8b 	b.w	d5060 <network_listening>

000d514a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d514a:	2200      	movs	r2, #0
   d514c:	6840      	ldr	r0, [r0, #4]
   d514e:	4611      	mov	r1, r2
   d5150:	f7ff bf96 	b.w	d5080 <network_get_listen_timeout>

000d5154 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5154:	6840      	ldr	r0, [r0, #4]
   d5156:	2200      	movs	r2, #0
   d5158:	f7ff bf8a 	b.w	d5070 <network_set_listen_timeout>

000d515c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d515c:	6840      	ldr	r0, [r0, #4]
   d515e:	2200      	movs	r2, #0
   d5160:	f081 0101 	eor.w	r1, r1, #1
   d5164:	f7ff bf74 	b.w	d5050 <network_listen>

000d5168 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5168:	2300      	movs	r3, #0
   d516a:	6840      	ldr	r0, [r0, #4]
   d516c:	461a      	mov	r2, r3
   d516e:	4619      	mov	r1, r3
   d5170:	f7ff bf66 	b.w	d5040 <network_off>

000d5174 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5174:	2300      	movs	r3, #0
   d5176:	6840      	ldr	r0, [r0, #4]
   d5178:	461a      	mov	r2, r3
   d517a:	4619      	mov	r1, r3
   d517c:	f7ff bf58 	b.w	d5030 <network_on>

000d5180 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5180:	2200      	movs	r2, #0
   d5182:	6840      	ldr	r0, [r0, #4]
   d5184:	4611      	mov	r1, r2
   d5186:	f7ff bf4b 	b.w	d5020 <network_ready>

000d518a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d518a:	2200      	movs	r2, #0
   d518c:	6840      	ldr	r0, [r0, #4]
   d518e:	4611      	mov	r1, r2
   d5190:	f7ff bf36 	b.w	d5000 <network_connecting>

000d5194 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5194:	6840      	ldr	r0, [r0, #4]
   d5196:	2200      	movs	r2, #0
   d5198:	2102      	movs	r1, #2
   d519a:	f7ff bf39 	b.w	d5010 <network_disconnect>

000d519e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d519e:	2300      	movs	r3, #0
   d51a0:	6840      	ldr	r0, [r0, #4]
   d51a2:	461a      	mov	r2, r3
   d51a4:	f7ff bf24 	b.w	d4ff0 <network_connect>

000d51a8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d51a8:	4b02      	ldr	r3, [pc, #8]	; (d51b4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d51aa:	2203      	movs	r2, #3
   d51ac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d51ae:	4a02      	ldr	r2, [pc, #8]	; (d51b8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d51b0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d51b2:	4770      	bx	lr
   d51b4:	2003e61c 	.word	0x2003e61c
   d51b8:	000d7530 	.word	0x000d7530

000d51bc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d51bc:	b510      	push	{r4, lr}
   d51be:	4604      	mov	r4, r0
   d51c0:	4608      	mov	r0, r1
{
    _spi = spi;
   d51c2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d51c4:	f7ff fea0 	bl	d4f08 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d51c8:	2300      	movs	r3, #0
   d51ca:	6063      	str	r3, [r4, #4]
}
   d51cc:	4620      	mov	r0, r4
   d51ce:	bd10      	pop	{r4, pc}

000d51d0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d51d0:	b510      	push	{r4, lr}
   d51d2:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d51d4:	6800      	ldr	r0, [r0, #0]
   d51d6:	b118      	cbz	r0, d51e0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d51d8:	f7ff ff8a 	bl	d50f0 <free>
            wakeupSource_ = nullptr;
   d51dc:	2300      	movs	r3, #0
   d51de:	6023      	str	r3, [r4, #0]
        }
    }
   d51e0:	bd10      	pop	{r4, pc}

000d51e2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d51e2:	b510      	push	{r4, lr}
   d51e4:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d51e6:	f7ff fff3 	bl	d51d0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d51ea:	4620      	mov	r0, r4
   d51ec:	bd10      	pop	{r4, pc}
	...

000d51f0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d51f0:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d51f2:	4b09      	ldr	r3, [pc, #36]	; (d5218 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d51f4:	4c09      	ldr	r4, [pc, #36]	; (d521c <_GLOBAL__sub_I_System+0x2c>)
   d51f6:	2202      	movs	r2, #2
   d51f8:	2000      	movs	r0, #0
   d51fa:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d51fc:	4b08      	ldr	r3, [pc, #32]	; (d5220 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d51fe:	6020      	str	r0, [r4, #0]
   d5200:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5202:	71a0      	strb	r0, [r4, #6]
   d5204:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5206:	f7ff fec7 	bl	d4f98 <set_system_mode>
SystemClass System;
   d520a:	4620      	mov	r0, r4
   d520c:	4a05      	ldr	r2, [pc, #20]	; (d5224 <_GLOBAL__sub_I_System+0x34>)
   d520e:	4906      	ldr	r1, [pc, #24]	; (d5228 <_GLOBAL__sub_I_System+0x38>)
   d5210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5214:	f001 b972 	b.w	d64fc <__aeabi_atexit>
   d5218:	2003e630 	.word	0x2003e630
   d521c:	2003e624 	.word	0x2003e624
   d5220:	ffff0000 	.word	0xffff0000
   d5224:	2003e54c 	.word	0x2003e54c
   d5228:	000d51e3 	.word	0x000d51e3

000d522c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d522c:	b510      	push	{r4, lr}
   d522e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d5230:	f002 f861 	bl	d72f6 <strlen>
   d5234:	3801      	subs	r0, #1
   d5236:	1823      	adds	r3, r4, r0
   d5238:	4620      	mov	r0, r4
	while(i<j){
   d523a:	4283      	cmp	r3, r0
   d523c:	d906      	bls.n	d524c <_Z11str_reversePc+0x20>
		c = *i;
   d523e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d5240:	7819      	ldrb	r1, [r3, #0]
   d5242:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d5246:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d524a:	e7f6      	b.n	d523a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d524c:	bd10      	pop	{r4, pc}

000d524e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d524e:	b570      	push	{r4, r5, r6, lr}
   d5250:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d5252:	1e91      	subs	r1, r2, #2
   d5254:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5256:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d5258:	d822      	bhi.n	d52a0 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d525a:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d525c:	b16d      	cbz	r5, d527a <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d525e:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d5262:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d5266:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d5268:	2d09      	cmp	r5, #9
                *ptr += '0';
   d526a:	bf94      	ite	ls
   d526c:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d526e:	3157      	addhi	r1, #87	; 0x57
   d5270:	b2c9      	uxtb	r1, r1
   d5272:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d5276:	4635      	mov	r5, r6
	while(a){
   d5278:	e7f0      	b.n	d525c <ultoa+0xe>
   d527a:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d527c:	4423      	add	r3, r4
            *ptr++ = '0';
   d527e:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d5280:	4293      	cmp	r3, r2
   d5282:	d902      	bls.n	d528a <ultoa+0x3c>
            *ptr++ = '0';
   d5284:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d5288:	e7fa      	b.n	d5280 <ultoa+0x32>
   d528a:	1a1a      	subs	r2, r3, r0
   d528c:	4283      	cmp	r3, r0
   d528e:	bf38      	it	cc
   d5290:	2200      	movcc	r2, #0

	*ptr = '\0';
   d5292:	2300      	movs	r3, #0
   d5294:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d5296:	4620      	mov	r0, r4
   d5298:	f7ff ffc8 	bl	d522c <_Z11str_reversePc>
	return buffer;
   d529c:	4620      	mov	r0, r4
}
   d529e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d52a0:	2000      	movs	r0, #0
   d52a2:	e7fc      	b.n	d529e <ultoa+0x50>

000d52a4 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d52a4:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d52a6:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d52a8:	460c      	mov	r4, r1
   d52aa:	4615      	mov	r5, r2
	if(a<0){
   d52ac:	da0e      	bge.n	d52cc <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d52ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d52b2:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d52b6:	bf14      	ite	ne
   d52b8:	4258      	negne	r0, r3
   d52ba:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d52bc:	2301      	movs	r3, #1
		*buffer = '-';
   d52be:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d52c0:	462a      	mov	r2, r5
   d52c2:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d52c4:	f7ff ffc3 	bl	d524e <ultoa>
	}
	return buffer;
}
   d52c8:	4620      	mov	r0, r4
   d52ca:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d52cc:	2301      	movs	r3, #1
   d52ce:	e7f9      	b.n	d52c4 <itoa+0x20>

000d52d0 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d52d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d52d4:	ec57 6b10 	vmov	r6, r7, d0
   d52d8:	4680      	mov	r8, r0
   d52da:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d52dc:	ee10 0a10 	vmov	r0, s0
   d52e0:	2200      	movs	r2, #0
   d52e2:	2300      	movs	r3, #0
   d52e4:	4639      	mov	r1, r7
   d52e6:	f001 fd49 	bl	d6d7c <__aeabi_dcmplt>
   d52ea:	b128      	cbz	r0, d52f8 <_Z4dtoadhPc+0x28>
        val = -val;
   d52ec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d52f0:	461f      	mov	r7, r3
        *sout++ = '-';
   d52f2:	232d      	movs	r3, #45	; 0x2d
   d52f4:	f804 3b01 	strb.w	r3, [r4], #1
   d52f8:	2300      	movs	r3, #0
    }
    long scale = 1;
   d52fa:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d52fe:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d5300:	b2d9      	uxtb	r1, r3
   d5302:	4588      	cmp	r8, r1
   d5304:	d903      	bls.n	d530e <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d5306:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d530a:	3301      	adds	r3, #1
   d530c:	e7f8      	b.n	d5300 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d530e:	4648      	mov	r0, r9
   d5310:	f001 fa58 	bl	d67c4 <__aeabi_i2d>
   d5314:	4632      	mov	r2, r6
   d5316:	463b      	mov	r3, r7
   d5318:	f001 fabe 	bl	d6898 <__aeabi_dmul>
   d531c:	4606      	mov	r6, r0
   d531e:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d5320:	f001 fddc 	bl	d6edc <__aeabi_d2ulz>
   d5324:	4605      	mov	r5, r0
   d5326:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d5328:	f001 fa80 	bl	d682c <__aeabi_ul2d>
   d532c:	4602      	mov	r2, r0
   d532e:	460b      	mov	r3, r1
   d5330:	4630      	mov	r0, r6
   d5332:	4639      	mov	r1, r7
   d5334:	f001 f8f8 	bl	d6528 <__aeabi_dsub>
   d5338:	4b13      	ldr	r3, [pc, #76]	; (d5388 <_Z4dtoadhPc+0xb8>)
   d533a:	2200      	movs	r2, #0
   d533c:	f001 fd32 	bl	d6da4 <__aeabi_dcmpge>
   d5340:	b110      	cbz	r0, d5348 <_Z4dtoadhPc+0x78>
        fixed++;
   d5342:	3501      	adds	r5, #1
   d5344:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d5348:	464a      	mov	r2, r9
   d534a:	4628      	mov	r0, r5
   d534c:	17d3      	asrs	r3, r2, #31
   d534e:	4651      	mov	r1, sl
   d5350:	f001 fdac 	bl	d6eac <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d5354:	2301      	movs	r3, #1
   d5356:	4615      	mov	r5, r2
   d5358:	4621      	mov	r1, r4
   d535a:	220a      	movs	r2, #10
   d535c:	f7ff ff77 	bl	d524e <ultoa>
    if (prec) {
   d5360:	f1b8 0f00 	cmp.w	r8, #0
   d5364:	d00d      	beq.n	d5382 <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d5366:	4620      	mov	r0, r4
   d5368:	f001 ffc5 	bl	d72f6 <strlen>
        *sout++ = '.';
   d536c:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d536e:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d5370:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d5372:	220a      	movs	r2, #10
   d5374:	4643      	mov	r3, r8
   d5376:	4628      	mov	r0, r5
   d5378:	3101      	adds	r1, #1
    }
}
   d537a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d537e:	f7ff bf66 	b.w	d524e <ultoa>
}
   d5382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5386:	bf00      	nop
   d5388:	3fe00000 	.word	0x3fe00000

000d538c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d538c:	b510      	push	{r4, lr}
   d538e:	4604      	mov	r4, r0
{
	free(buffer);
   d5390:	6800      	ldr	r0, [r0, #0]
   d5392:	f7ff fead 	bl	d50f0 <free>
}
   d5396:	4620      	mov	r0, r4
   d5398:	bd10      	pop	{r4, pc}

000d539a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d539a:	b510      	push	{r4, lr}
   d539c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d539e:	6800      	ldr	r0, [r0, #0]
   d53a0:	b108      	cbz	r0, d53a6 <_ZN6String10invalidateEv+0xc>
   d53a2:	f7ff fea5 	bl	d50f0 <free>
	buffer = NULL;
   d53a6:	2300      	movs	r3, #0
	capacity = len = 0;
   d53a8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d53ac:	6023      	str	r3, [r4, #0]
}
   d53ae:	bd10      	pop	{r4, pc}

000d53b0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d53b0:	b538      	push	{r3, r4, r5, lr}
   d53b2:	4604      	mov	r4, r0
   d53b4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d53b6:	6800      	ldr	r0, [r0, #0]
   d53b8:	3101      	adds	r1, #1
   d53ba:	f7ff fea1 	bl	d5100 <realloc>
	if (newbuffer) {
   d53be:	b110      	cbz	r0, d53c6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d53c0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d53c4:	2001      	movs	r0, #1
	}
	return 0;
}
   d53c6:	bd38      	pop	{r3, r4, r5, pc}

000d53c8 <_ZN6String7reserveEj>:
{
   d53c8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d53ca:	6803      	ldr	r3, [r0, #0]
{
   d53cc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d53ce:	b123      	cbz	r3, d53da <_ZN6String7reserveEj+0x12>
   d53d0:	6843      	ldr	r3, [r0, #4]
   d53d2:	428b      	cmp	r3, r1
   d53d4:	d301      	bcc.n	d53da <_ZN6String7reserveEj+0x12>
   d53d6:	2001      	movs	r0, #1
}
   d53d8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d53da:	4620      	mov	r0, r4
   d53dc:	f7ff ffe8 	bl	d53b0 <_ZN6String12changeBufferEj>
   d53e0:	2800      	cmp	r0, #0
   d53e2:	d0f9      	beq.n	d53d8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d53e4:	68a3      	ldr	r3, [r4, #8]
   d53e6:	2b00      	cmp	r3, #0
   d53e8:	d1f5      	bne.n	d53d6 <_ZN6String7reserveEj+0xe>
   d53ea:	6822      	ldr	r2, [r4, #0]
   d53ec:	7013      	strb	r3, [r2, #0]
   d53ee:	e7f2      	b.n	d53d6 <_ZN6String7reserveEj+0xe>

000d53f0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d53f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d53f2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d53f4:	4611      	mov	r1, r2
   d53f6:	9201      	str	r2, [sp, #4]
{
   d53f8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d53fa:	f7ff ffe5 	bl	d53c8 <_ZN6String7reserveEj>
   d53fe:	9a01      	ldr	r2, [sp, #4]
   d5400:	b928      	cbnz	r0, d540e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d5402:	4620      	mov	r0, r4
   d5404:	f7ff ffc9 	bl	d539a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5408:	4620      	mov	r0, r4
   d540a:	b003      	add	sp, #12
   d540c:	bd30      	pop	{r4, r5, pc}
	len = length;
   d540e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5410:	4629      	mov	r1, r5
   d5412:	6820      	ldr	r0, [r4, #0]
   d5414:	f001 fef6 	bl	d7204 <memcpy>
	buffer[len] = 0;
   d5418:	6822      	ldr	r2, [r4, #0]
   d541a:	68a3      	ldr	r3, [r4, #8]
   d541c:	2100      	movs	r1, #0
   d541e:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5420:	e7f2      	b.n	d5408 <_ZN6String4copyEPKcj+0x18>

000d5422 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d5422:	2300      	movs	r3, #0
String::String(const char *cstr)
   d5424:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d5426:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d542a:	4604      	mov	r4, r0
	len = 0;
   d542c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d542e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d5430:	b141      	cbz	r1, d5444 <_ZN6StringC1EPKc+0x22>
   d5432:	4608      	mov	r0, r1
   d5434:	9101      	str	r1, [sp, #4]
   d5436:	f001 ff5e 	bl	d72f6 <strlen>
   d543a:	9901      	ldr	r1, [sp, #4]
   d543c:	4602      	mov	r2, r0
   d543e:	4620      	mov	r0, r4
   d5440:	f7ff ffd6 	bl	d53f0 <_ZN6String4copyEPKcj>
}
   d5444:	4620      	mov	r0, r4
   d5446:	b002      	add	sp, #8
   d5448:	bd10      	pop	{r4, pc}

000d544a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d544a:	4288      	cmp	r0, r1
{
   d544c:	b510      	push	{r4, lr}
   d544e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5450:	d005      	beq.n	d545e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5452:	680b      	ldr	r3, [r1, #0]
   d5454:	b12b      	cbz	r3, d5462 <_ZN6StringaSERKS_+0x18>
   d5456:	688a      	ldr	r2, [r1, #8]
   d5458:	4619      	mov	r1, r3
   d545a:	f7ff ffc9 	bl	d53f0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d545e:	4620      	mov	r0, r4
   d5460:	bd10      	pop	{r4, pc}
	else invalidate();
   d5462:	f7ff ff9a 	bl	d539a <_ZN6String10invalidateEv>
   d5466:	e7fa      	b.n	d545e <_ZN6StringaSERKS_+0x14>

000d5468 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d5468:	b510      	push	{r4, lr}
	buffer = NULL;
   d546a:	2300      	movs	r3, #0
String::String(const String &value)
   d546c:	4604      	mov	r4, r0
	capacity = 0;
   d546e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d5472:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5474:	7303      	strb	r3, [r0, #12]
	*this = value;
   d5476:	f7ff ffe8 	bl	d544a <_ZN6StringaSERKS_>
}
   d547a:	4620      	mov	r0, r4
   d547c:	bd10      	pop	{r4, pc}

000d547e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d547e:	b513      	push	{r0, r1, r4, lr}
   d5480:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5482:	b159      	cbz	r1, d549c <_ZN6StringaSEPKc+0x1e>
   d5484:	4608      	mov	r0, r1
   d5486:	9101      	str	r1, [sp, #4]
   d5488:	f001 ff35 	bl	d72f6 <strlen>
   d548c:	9901      	ldr	r1, [sp, #4]
   d548e:	4602      	mov	r2, r0
   d5490:	4620      	mov	r0, r4
   d5492:	f7ff ffad 	bl	d53f0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5496:	4620      	mov	r0, r4
   d5498:	b002      	add	sp, #8
   d549a:	bd10      	pop	{r4, pc}
	else invalidate();
   d549c:	f7ff ff7d 	bl	d539a <_ZN6String10invalidateEv>
   d54a0:	e7f9      	b.n	d5496 <_ZN6StringaSEPKc+0x18>

000d54a2 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d54a2:	b510      	push	{r4, lr}
   d54a4:	4604      	mov	r4, r0
   d54a6:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d54a8:	2300      	movs	r3, #0
	capacity = 0;
   d54aa:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d54ae:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d54b0:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d54b2:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d54b4:	a901      	add	r1, sp, #4
   d54b6:	f7ff fef5 	bl	d52a4 <itoa>
	*this = buf;
   d54ba:	a901      	add	r1, sp, #4
   d54bc:	4620      	mov	r0, r4
   d54be:	f7ff ffde 	bl	d547e <_ZN6StringaSEPKc>
}
   d54c2:	4620      	mov	r0, r4
   d54c4:	b00a      	add	sp, #40	; 0x28
   d54c6:	bd10      	pop	{r4, pc}

000d54c8 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   d54c8:	b530      	push	{r4, r5, lr}
   d54ca:	4604      	mov	r4, r0
	buffer = NULL;
   d54cc:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   d54ce:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   d54d0:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d54d4:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d54d6:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   d54d8:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   d54dc:	b2cd      	uxtb	r5, r1
   d54de:	f001 f983 	bl	d67e8 <__aeabi_f2d>
   d54e2:	ec41 0b10 	vmov	d0, r0, r1
   d54e6:	a901      	add	r1, sp, #4
   d54e8:	4628      	mov	r0, r5
   d54ea:	f7ff fef1 	bl	d52d0 <_Z4dtoadhPc>
        *this = buf;
   d54ee:	a901      	add	r1, sp, #4
   d54f0:	4620      	mov	r0, r4
   d54f2:	f7ff ffc4 	bl	d547e <_ZN6StringaSEPKc>
}
   d54f6:	4620      	mov	r0, r4
   d54f8:	b00b      	add	sp, #44	; 0x2c
   d54fa:	bd30      	pop	{r4, r5, pc}

000d54fc <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d54fc:	b570      	push	{r4, r5, r6, lr}
   d54fe:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d5500:	460e      	mov	r6, r1
   d5502:	b909      	cbnz	r1, d5508 <_ZN6String6concatEPKcj+0xc>
   d5504:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5506:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d5508:	b16a      	cbz	r2, d5526 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d550a:	6884      	ldr	r4, [r0, #8]
   d550c:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d550e:	4621      	mov	r1, r4
   d5510:	f7ff ff5a 	bl	d53c8 <_ZN6String7reserveEj>
   d5514:	2800      	cmp	r0, #0
   d5516:	d0f5      	beq.n	d5504 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d5518:	6828      	ldr	r0, [r5, #0]
   d551a:	68ab      	ldr	r3, [r5, #8]
   d551c:	4631      	mov	r1, r6
   d551e:	4418      	add	r0, r3
   d5520:	f001 fec4 	bl	d72ac <strcpy>
	len = newlen;
   d5524:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d5526:	2001      	movs	r0, #1
   d5528:	e7ed      	b.n	d5506 <_ZN6String6concatEPKcj+0xa>

000d552a <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d552a:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d552c:	688a      	ldr	r2, [r1, #8]
   d552e:	6809      	ldr	r1, [r1, #0]
{
   d5530:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d5532:	f7ff ffe3 	bl	d54fc <_ZN6String6concatEPKcj>
   d5536:	b910      	cbnz	r0, d553e <_ZplRK15StringSumHelperRK6String+0x14>
   d5538:	4620      	mov	r0, r4
   d553a:	f7ff ff2e 	bl	d539a <_ZN6String10invalidateEv>
	return a;
}
   d553e:	4620      	mov	r0, r4
   d5540:	bd10      	pop	{r4, pc}

000d5542 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d5542:	b513      	push	{r0, r1, r4, lr}
   d5544:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d5546:	b929      	cbnz	r1, d5554 <_ZplRK15StringSumHelperPKc+0x12>
   d5548:	4620      	mov	r0, r4
   d554a:	f7ff ff26 	bl	d539a <_ZN6String10invalidateEv>
	return a;
}
   d554e:	4620      	mov	r0, r4
   d5550:	b002      	add	sp, #8
   d5552:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d5554:	4608      	mov	r0, r1
   d5556:	9101      	str	r1, [sp, #4]
   d5558:	f001 fecd 	bl	d72f6 <strlen>
   d555c:	9901      	ldr	r1, [sp, #4]
   d555e:	4602      	mov	r2, r0
   d5560:	4620      	mov	r0, r4
   d5562:	f7ff ffcb 	bl	d54fc <_ZN6String6concatEPKcj>
   d5566:	2800      	cmp	r0, #0
   d5568:	d0ee      	beq.n	d5548 <_ZplRK15StringSumHelperPKc+0x6>
   d556a:	e7f0      	b.n	d554e <_ZplRK15StringSumHelperPKc+0xc>

000d556c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d556c:	b510      	push	{r4, lr}
          _M_dispose();
   d556e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5570:	4604      	mov	r4, r0
          _M_dispose();
   d5572:	689b      	ldr	r3, [r3, #8]
   d5574:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5576:	68a3      	ldr	r3, [r4, #8]
   d5578:	3b01      	subs	r3, #1
   d557a:	60a3      	str	r3, [r4, #8]
   d557c:	b92b      	cbnz	r3, d558a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d557e:	6823      	ldr	r3, [r4, #0]
   d5580:	4620      	mov	r0, r4
   d5582:	68db      	ldr	r3, [r3, #12]
    }
   d5584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d5588:	4718      	bx	r3
    }
   d558a:	bd10      	pop	{r4, pc}

000d558c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d558c:	b510      	push	{r4, lr}
   d558e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5590:	6800      	ldr	r0, [r0, #0]
   d5592:	b108      	cbz	r0, d5598 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5594:	f7ff fc28 	bl	d4de8 <os_mutex_recursive_destroy>
    }
   d5598:	4620      	mov	r0, r4
   d559a:	bd10      	pop	{r4, pc}

000d559c <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d559c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d559e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d55a0:	4604      	mov	r4, r0
      if (_M_manager)
   d55a2:	b113      	cbz	r3, d55aa <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d55a4:	2203      	movs	r2, #3
   d55a6:	4601      	mov	r1, r0
   d55a8:	4798      	blx	r3
    }
   d55aa:	4620      	mov	r0, r4
   d55ac:	bd10      	pop	{r4, pc}

000d55ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d55ae:	680b      	ldr	r3, [r1, #0]
   d55b0:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d55b2:	b113      	cbz	r3, d55ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d55b4:	685a      	ldr	r2, [r3, #4]
   d55b6:	3201      	adds	r2, #1
   d55b8:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d55ba:	4770      	bx	lr

000d55bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d55bc:	b510      	push	{r4, lr}
   d55be:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d55c0:	6800      	ldr	r0, [r0, #0]
   d55c2:	b128      	cbz	r0, d55d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d55c4:	6843      	ldr	r3, [r0, #4]
   d55c6:	3b01      	subs	r3, #1
   d55c8:	6043      	str	r3, [r0, #4]
   d55ca:	b90b      	cbnz	r3, d55d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d55cc:	f7ff ffce 	bl	d556c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d55d0:	4620      	mov	r0, r4
   d55d2:	bd10      	pop	{r4, pc}

000d55d4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d55d4:	b513      	push	{r0, r1, r4, lr}
   d55d6:	460b      	mov	r3, r1
   d55d8:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d55da:	e9d0 0100 	ldrd	r0, r1, [r0]
   d55de:	466c      	mov	r4, sp
   d55e0:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d55e4:	e893 0003 	ldmia.w	r3, {r0, r1}
   d55e8:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d55ec:	e894 0003 	ldmia.w	r4, {r0, r1}
   d55f0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d55f4:	b002      	add	sp, #8
   d55f6:	bd10      	pop	{r4, pc}

000d55f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d55f8:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d55fa:	4c06      	ldr	r4, [pc, #24]	; (d5614 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d55fc:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d55fe:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5600:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5602:	f7ff fbe9 	bl	d4dd8 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5606:	4620      	mov	r0, r4
   d5608:	4a03      	ldr	r2, [pc, #12]	; (d5618 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d560a:	4904      	ldr	r1, [pc, #16]	; (d561c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d560c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5610:	f000 bf74 	b.w	d64fc <__aeabi_atexit>
   d5614:	2003e634 	.word	0x2003e634
   d5618:	2003e54c 	.word	0x2003e54c
   d561c:	000d558d 	.word	0x000d558d

000d5620 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5622:	4606      	mov	r6, r0
   d5624:	460d      	mov	r5, r1
  size_t n = 0;
   d5626:	188f      	adds	r7, r1, r2
   d5628:	2400      	movs	r4, #0
  while (size--) {
   d562a:	42bd      	cmp	r5, r7
   d562c:	d00c      	beq.n	d5648 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d562e:	6833      	ldr	r3, [r6, #0]
   d5630:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5634:	689b      	ldr	r3, [r3, #8]
   d5636:	4630      	mov	r0, r6
   d5638:	4798      	blx	r3
     if (chunk>=0)
   d563a:	1e03      	subs	r3, r0, #0
   d563c:	db01      	blt.n	d5642 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d563e:	441c      	add	r4, r3
  while (size--) {
   d5640:	e7f3      	b.n	d562a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5642:	2c00      	cmp	r4, #0
   d5644:	bf08      	it	eq
   d5646:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5648:	4620      	mov	r0, r4
   d564a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d564c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d564c:	b513      	push	{r0, r1, r4, lr}
   d564e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5650:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5652:	b159      	cbz	r1, d566c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5654:	9101      	str	r1, [sp, #4]
   d5656:	f001 fe4e 	bl	d72f6 <strlen>
   d565a:	6823      	ldr	r3, [r4, #0]
   d565c:	9901      	ldr	r1, [sp, #4]
   d565e:	68db      	ldr	r3, [r3, #12]
   d5660:	4602      	mov	r2, r0
   d5662:	4620      	mov	r0, r4
    }
   d5664:	b002      	add	sp, #8
   d5666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d566a:	4718      	bx	r3
    }
   d566c:	b002      	add	sp, #8
   d566e:	bd10      	pop	{r4, pc}

000d5670 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d5670:	b508      	push	{r3, lr}
  return write(str);
   d5672:	f7ff ffeb 	bl	d564c <_ZN5Print5writeEPKc>
}
   d5676:	bd08      	pop	{r3, pc}

000d5678 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d5678:	6803      	ldr	r3, [r0, #0]
   d567a:	689b      	ldr	r3, [r3, #8]
   d567c:	4718      	bx	r3

000d567e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d567e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5680:	210d      	movs	r1, #13
{
   d5682:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5684:	f7ff fff8 	bl	d5678 <_ZN5Print5printEc>
  n += print('\n');
   d5688:	210a      	movs	r1, #10
  size_t n = print('\r');
   d568a:	4604      	mov	r4, r0
  n += print('\n');
   d568c:	4628      	mov	r0, r5
   d568e:	f7ff fff3 	bl	d5678 <_ZN5Print5printEc>
  return n;
}
   d5692:	4420      	add	r0, r4
   d5694:	bd38      	pop	{r3, r4, r5, pc}

000d5696 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5696:	b538      	push	{r3, r4, r5, lr}
   d5698:	4605      	mov	r5, r0
  return write(str);
   d569a:	f7ff ffd7 	bl	d564c <_ZN5Print5writeEPKc>
   d569e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d56a0:	4628      	mov	r0, r5
   d56a2:	f7ff ffec 	bl	d567e <_ZN5Print7printlnEv>
  return n;
}
   d56a6:	4420      	add	r0, r4
   d56a8:	bd38      	pop	{r3, r4, r5, pc}

000d56aa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d56aa:	b530      	push	{r4, r5, lr}
   d56ac:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d56ae:	2300      	movs	r3, #0
   d56b0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d56b4:	2a01      	cmp	r2, #1
   d56b6:	bf98      	it	ls
   d56b8:	220a      	movls	r2, #10
   d56ba:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d56bc:	460d      	mov	r5, r1
   d56be:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d56c2:	fb01 5312 	mls	r3, r1, r2, r5
   d56c6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d56ca:	2b09      	cmp	r3, #9
   d56cc:	bf94      	ite	ls
   d56ce:	3330      	addls	r3, #48	; 0x30
   d56d0:	3337      	addhi	r3, #55	; 0x37
   d56d2:	b2db      	uxtb	r3, r3
  } while(n);
   d56d4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d56d6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d56da:	d9ef      	bls.n	d56bc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d56dc:	4621      	mov	r1, r4
   d56de:	f7ff ffb5 	bl	d564c <_ZN5Print5writeEPKc>
}
   d56e2:	b00b      	add	sp, #44	; 0x2c
   d56e4:	bd30      	pop	{r4, r5, pc}
	...

000d56e8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d56e8:	4b01      	ldr	r3, [pc, #4]	; (d56f0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d56ea:	4a02      	ldr	r2, [pc, #8]	; (d56f4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d56ec:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d56ee:	4770      	bx	lr
   d56f0:	2003e638 	.word	0x2003e638
   d56f4:	000d7564 	.word	0x000d7564

000d56f8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d56f8:	4b02      	ldr	r3, [pc, #8]	; (d5704 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d56fa:	681a      	ldr	r2, [r3, #0]
   d56fc:	4b02      	ldr	r3, [pc, #8]	; (d5708 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d56fe:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5700:	4770      	bx	lr
   d5702:	bf00      	nop
   d5704:	2003e4e0 	.word	0x2003e4e0
   d5708:	2003e63c 	.word	0x2003e63c

000d570c <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d570c:	428a      	cmp	r2, r1
{
   d570e:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   d5710:	d007      	beq.n	d5722 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d5712:	9c02      	ldr	r4, [sp, #8]
   d5714:	1a40      	subs	r0, r0, r1
   d5716:	1ae4      	subs	r4, r4, r3
   d5718:	4360      	muls	r0, r4
   d571a:	1a52      	subs	r2, r2, r1
   d571c:	fb90 f0f2 	sdiv	r0, r0, r2
   d5720:	4418      	add	r0, r3
}
   d5722:	bd10      	pop	{r4, pc}

000d5724 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5724:	b510      	push	{r4, lr}
   d5726:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5728:	f7ff ff38 	bl	d559c <_ZNSt14_Function_baseD1Ev>
   d572c:	4620      	mov	r0, r4
   d572e:	bd10      	pop	{r4, pc}

000d5730 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5730:	4803      	ldr	r0, [pc, #12]	; (d5740 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5732:	4a04      	ldr	r2, [pc, #16]	; (d5744 <_GLOBAL__sub_I_RGB+0x14>)
   d5734:	4904      	ldr	r1, [pc, #16]	; (d5748 <_GLOBAL__sub_I_RGB+0x18>)
   d5736:	2300      	movs	r3, #0
   d5738:	6083      	str	r3, [r0, #8]
   d573a:	f000 bedf 	b.w	d64fc <__aeabi_atexit>
   d573e:	bf00      	nop
   d5740:	2003e640 	.word	0x2003e640
   d5744:	2003e54c 	.word	0x2003e54c
   d5748:	000d5725 	.word	0x000d5725

000d574c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d574c:	4b01      	ldr	r3, [pc, #4]	; (d5754 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d574e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5750:	4770      	bx	lr
   d5752:	bf00      	nop
   d5754:	2003e4e8 	.word	0x2003e4e8

000d5758 <serialEventRun>:
{
   d5758:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d575a:	4b0b      	ldr	r3, [pc, #44]	; (d5788 <serialEventRun+0x30>)
   d575c:	b143      	cbz	r3, d5770 <serialEventRun+0x18>
   d575e:	f000 fbf7 	bl	d5f50 <_Z16_fetch_usbserialv>
   d5762:	6803      	ldr	r3, [r0, #0]
   d5764:	691b      	ldr	r3, [r3, #16]
   d5766:	4798      	blx	r3
   d5768:	2800      	cmp	r0, #0
   d576a:	dd01      	ble.n	d5770 <serialEventRun+0x18>
        serialEvent();
   d576c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5770:	4b06      	ldr	r3, [pc, #24]	; (d578c <serialEventRun+0x34>)
   d5772:	b143      	cbz	r3, d5786 <serialEventRun+0x2e>
   d5774:	f000 fcbe 	bl	d60f4 <_Z22__fetch_global_Serial1v>
   d5778:	6803      	ldr	r3, [r0, #0]
   d577a:	691b      	ldr	r3, [r3, #16]
   d577c:	4798      	blx	r3
   d577e:	2800      	cmp	r0, #0
   d5780:	dd01      	ble.n	d5786 <serialEventRun+0x2e>
        serialEvent1();
   d5782:	f3af 8000 	nop.w
}
   d5786:	bd08      	pop	{r3, pc}
	...

000d5790 <_post_loop>:
{
   d5790:	b508      	push	{r3, lr}
	serialEventRun();
   d5792:	f7ff ffe1 	bl	d5758 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5796:	f7ff fb17 	bl	d4dc8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d579a:	4b01      	ldr	r3, [pc, #4]	; (d57a0 <_post_loop+0x10>)
   d579c:	6018      	str	r0, [r3, #0]
}
   d579e:	bd08      	pop	{r3, pc}
   d57a0:	2003e7d4 	.word	0x2003e7d4

000d57a4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d57a4:	4802      	ldr	r0, [pc, #8]	; (d57b0 <_Z33system_initialize_user_backup_ramv+0xc>)
   d57a6:	4a03      	ldr	r2, [pc, #12]	; (d57b4 <_Z33system_initialize_user_backup_ramv+0x10>)
   d57a8:	4903      	ldr	r1, [pc, #12]	; (d57b8 <_Z33system_initialize_user_backup_ramv+0x14>)
   d57aa:	1a12      	subs	r2, r2, r0
   d57ac:	f001 bd2a 	b.w	d7204 <memcpy>
   d57b0:	2003f400 	.word	0x2003f400
   d57b4:	2003f404 	.word	0x2003f404
   d57b8:	000d77e8 	.word	0x000d77e8

000d57bc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d57bc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d57be:	2300      	movs	r3, #0
   d57c0:	9300      	str	r3, [sp, #0]
   d57c2:	461a      	mov	r2, r3
   d57c4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d57c8:	f7ff fc08 	bl	d4fdc <system_ctrl_set_result>
}
   d57cc:	b003      	add	sp, #12
   d57ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d57d4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d57d4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d57d6:	8843      	ldrh	r3, [r0, #2]
   d57d8:	2b0a      	cmp	r3, #10
   d57da:	d008      	beq.n	d57ee <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d57dc:	2b50      	cmp	r3, #80	; 0x50
   d57de:	d10b      	bne.n	d57f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d57e0:	4b09      	ldr	r3, [pc, #36]	; (d5808 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d57e2:	681b      	ldr	r3, [r3, #0]
   d57e4:	b14b      	cbz	r3, d57fa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d57e6:	b003      	add	sp, #12
   d57e8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d57ec:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d57ee:	f7ff ffe5 	bl	d57bc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d57f2:	b003      	add	sp, #12
   d57f4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d57f8:	2300      	movs	r3, #0
   d57fa:	9300      	str	r3, [sp, #0]
   d57fc:	461a      	mov	r2, r3
   d57fe:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5802:	f7ff fbeb 	bl	d4fdc <system_ctrl_set_result>
}
   d5806:	e7f4      	b.n	d57f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5808:	2003e654 	.word	0x2003e654

000d580c <module_user_init_hook>:
{
   d580c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d580e:	4c12      	ldr	r4, [pc, #72]	; (d5858 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5810:	4812      	ldr	r0, [pc, #72]	; (d585c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5812:	4d13      	ldr	r5, [pc, #76]	; (d5860 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5814:	2100      	movs	r1, #0
   d5816:	f7ff fc8b 	bl	d5130 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d581a:	6823      	ldr	r3, [r4, #0]
   d581c:	42ab      	cmp	r3, r5
   d581e:	4b11      	ldr	r3, [pc, #68]	; (d5864 <module_user_init_hook+0x58>)
   d5820:	bf0c      	ite	eq
   d5822:	2201      	moveq	r2, #1
   d5824:	2200      	movne	r2, #0
   d5826:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5828:	d002      	beq.n	d5830 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d582a:	f7ff ffbb 	bl	d57a4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d582e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5830:	f7ff fac2 	bl	d4db8 <HAL_RNG_GetRandomNumber>
   d5834:	4604      	mov	r4, r0
    srand(seed);
   d5836:	f001 fd15 	bl	d7264 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d583a:	4b0b      	ldr	r3, [pc, #44]	; (d5868 <module_user_init_hook+0x5c>)
   d583c:	b113      	cbz	r3, d5844 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d583e:	4620      	mov	r0, r4
   d5840:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5844:	2100      	movs	r1, #0
   d5846:	4808      	ldr	r0, [pc, #32]	; (d5868 <module_user_init_hook+0x5c>)
   d5848:	f7ff fc42 	bl	d50d0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d584c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5850:	4806      	ldr	r0, [pc, #24]	; (d586c <module_user_init_hook+0x60>)
   d5852:	2100      	movs	r1, #0
   d5854:	f7ff bbb8 	b.w	d4fc8 <system_ctrl_set_app_request_handler>
   d5858:	2003f400 	.word	0x2003f400
   d585c:	000d574d 	.word	0x000d574d
   d5860:	9a271c1e 	.word	0x9a271c1e
   d5864:	2003e650 	.word	0x2003e650
   d5868:	00000000 	.word	0x00000000
   d586c:	000d57d5 	.word	0x000d57d5

000d5870 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5870:	4770      	bx	lr

000d5872 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d5872:	2000      	movs	r0, #0
   d5874:	4770      	bx	lr

000d5876 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5876:	b510      	push	{r4, lr}
   d5878:	2110      	movs	r1, #16
   d587a:	4604      	mov	r4, r0
   d587c:	f000 fe43 	bl	d6506 <_ZdlPvj>
   d5880:	4620      	mov	r0, r4
   d5882:	bd10      	pop	{r4, pc}

000d5884 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d5884:	b508      	push	{r3, lr}
      { delete this; }
   d5886:	f7ff fff6 	bl	d5876 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d588a:	bd08      	pop	{r3, pc}

000d588c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d588c:	b530      	push	{r4, r5, lr}
        type_(type) {
   d588e:	2200      	movs	r2, #0
   d5890:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d5894:	6002      	str	r2, [r0, #0]
   d5896:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5898:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d589a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d589c:	680c      	ldr	r4, [r1, #0]
   d589e:	8085      	strh	r5, [r0, #4]
   d58a0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d58a2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d58a4:	bd30      	pop	{r4, r5, pc}

000d58a6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d58a6:	b510      	push	{r4, lr}
   d58a8:	4604      	mov	r4, r0
    free((void*)msg_);
   d58aa:	6800      	ldr	r0, [r0, #0]
   d58ac:	f7ff fc20 	bl	d50f0 <free>
}
   d58b0:	4620      	mov	r0, r4
   d58b2:	bd10      	pop	{r4, pc}

000d58b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d58b4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d58b6:	68c4      	ldr	r4, [r0, #12]
   d58b8:	b1f4      	cbz	r4, d58f8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d58ba:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d58bc:	2b02      	cmp	r3, #2
   d58be:	d103      	bne.n	d58c8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d58c0:	f104 000c 	add.w	r0, r4, #12
   d58c4:	f7ff ffef 	bl	d58a6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d58c8:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d58ca:	b135      	cbz	r5, d58da <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d58cc:	4628      	mov	r0, r5
   d58ce:	f7ff fe65 	bl	d559c <_ZNSt14_Function_baseD1Ev>
   d58d2:	2110      	movs	r1, #16
   d58d4:	4628      	mov	r0, r5
   d58d6:	f000 fe16 	bl	d6506 <_ZdlPvj>
   d58da:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d58dc:	b135      	cbz	r5, d58ec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d58de:	4628      	mov	r0, r5
   d58e0:	f7ff fe5c 	bl	d559c <_ZNSt14_Function_baseD1Ev>
   d58e4:	2110      	movs	r1, #16
   d58e6:	4628      	mov	r0, r5
   d58e8:	f000 fe0d 	bl	d6506 <_ZdlPvj>
   d58ec:	4620      	mov	r0, r4
   d58ee:	2114      	movs	r1, #20
   d58f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d58f4:	f000 be07 	b.w	d6506 <_ZdlPvj>
   d58f8:	bd38      	pop	{r3, r4, r5, pc}

000d58fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d58fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d58fc:	460e      	mov	r6, r1
   d58fe:	4604      	mov	r4, r0
   d5900:	f856 3b04 	ldr.w	r3, [r6], #4
   d5904:	9300      	str	r3, [sp, #0]
   d5906:	460d      	mov	r5, r1
   d5908:	a801      	add	r0, sp, #4
   d590a:	4631      	mov	r1, r6
   d590c:	f7ff fe4f 	bl	d55ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5910:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5912:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d5914:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5916:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d5918:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d591a:	2300      	movs	r3, #0
   d591c:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d591e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d5920:	f7ff fe4c 	bl	d55bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5924:	4630      	mov	r0, r6
   d5926:	f7ff fe49 	bl	d55bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d592a:	4628      	mov	r0, r5
   d592c:	2108      	movs	r1, #8
   d592e:	f000 fdea 	bl	d6506 <_ZdlPvj>
        return p;
    }
   d5932:	4620      	mov	r0, r4
   d5934:	b002      	add	sp, #8
   d5936:	bd70      	pop	{r4, r5, r6, pc}

000d5938 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5938:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d593a:	b510      	push	{r4, lr}
      if (_M_empty())
   d593c:	b90a      	cbnz	r2, d5942 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d593e:	f000 fdec 	bl	d651a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d5942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5946:	68c3      	ldr	r3, [r0, #12]
   d5948:	4718      	bx	r3

000d594a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d594a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d594c:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d594e:	f100 0110 	add.w	r1, r0, #16
   d5952:	f7ff fff1 	bl	d5938 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d5956:	bd08      	pop	{r3, pc}

000d5958 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d5958:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d595a:	b510      	push	{r4, lr}
      if (_M_empty())
   d595c:	b90a      	cbnz	r2, d5962 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d595e:	f000 fddc 	bl	d651a <_ZSt25__throw_bad_function_callv>
    }
   d5962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5966:	68c3      	ldr	r3, [r0, #12]
   d5968:	4718      	bx	r3

000d596a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d596a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d596c:	6800      	ldr	r0, [r0, #0]
   d596e:	f100 0110 	add.w	r1, r0, #16
   d5972:	f7ff fff1 	bl	d5958 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d5976:	bd08      	pop	{r3, pc}

000d5978 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d5978:	b538      	push	{r3, r4, r5, lr}
   d597a:	2300      	movs	r3, #0
   d597c:	4604      	mov	r4, r0
   d597e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5980:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d5982:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5984:	f7fe fb87 	bl	d4096 <_Znwj>
   d5988:	b128      	cbz	r0, d5996 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d598a:	2301      	movs	r3, #1
   d598c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d5990:	4b02      	ldr	r3, [pc, #8]	; (d599c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5992:	6003      	str	r3, [r0, #0]
   d5994:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5996:	6020      	str	r0, [r4, #0]
	}
   d5998:	4620      	mov	r0, r4
   d599a:	bd38      	pop	{r3, r4, r5, pc}
   d599c:	000d758c 	.word	0x000d758c

000d59a0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d59a0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d59a2:	2300      	movs	r3, #0
   d59a4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d59a6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d59a8:	4604      	mov	r4, r0
   d59aa:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d59ac:	b12b      	cbz	r3, d59ba <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d59ae:	2202      	movs	r2, #2
   d59b0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d59b2:	68eb      	ldr	r3, [r5, #12]
   d59b4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d59b6:	68ab      	ldr	r3, [r5, #8]
   d59b8:	60a3      	str	r3, [r4, #8]
    }
   d59ba:	4620      	mov	r0, r4
   d59bc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d59c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d59c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d59c2:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d59c4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d59c6:	4668      	mov	r0, sp
   d59c8:	f7ff ff60 	bl	d588c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d59cc:	f04f 0302 	mov.w	r3, #2
   d59d0:	e8d4 2f4f 	ldrexb	r2, [r4]
   d59d4:	2a00      	cmp	r2, #0
   d59d6:	d103      	bne.n	d59e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d59d8:	e8c4 3f41 	strexb	r1, r3, [r4]
   d59dc:	2900      	cmp	r1, #0
   d59de:	d1f7      	bne.n	d59d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d59e0:	d125      	bne.n	d5a2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d59e2:	f104 050c 	add.w	r5, r4, #12
   d59e6:	4669      	mov	r1, sp
   d59e8:	4628      	mov	r0, r5
   d59ea:	f7ff ff4f 	bl	d588c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d59ee:	f3bf 8f5b 	dmb	ish
   d59f2:	2301      	movs	r3, #1
   d59f4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d59f6:	2000      	movs	r0, #0
   d59f8:	f104 0308 	add.w	r3, r4, #8
   d59fc:	f3bf 8f5b 	dmb	ish
   d5a00:	e853 6f00 	ldrex	r6, [r3]
   d5a04:	e843 0200 	strex	r2, r0, [r3]
   d5a08:	2a00      	cmp	r2, #0
   d5a0a:	d1f9      	bne.n	d5a00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d5a0c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5a10:	b16e      	cbz	r6, d5a2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d5a12:	f7ff fac9 	bl	d4fa8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5a16:	b178      	cbz	r0, d5a38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5a18:	4629      	mov	r1, r5
   d5a1a:	4630      	mov	r0, r6
   d5a1c:	f7ff ff8c 	bl	d5938 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d5a20:	4630      	mov	r0, r6
   d5a22:	f7ff fdbb 	bl	d559c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d5a26:	2110      	movs	r1, #16
   d5a28:	4630      	mov	r0, r6
   d5a2a:	f000 fd6c 	bl	d6506 <_ZdlPvj>
        p_->setError(std::move(error));
   d5a2e:	4668      	mov	r0, sp
   d5a30:	f7ff ff39 	bl	d58a6 <_ZN8particle5ErrorD1Ev>
    }
   d5a34:	b009      	add	sp, #36	; 0x24
   d5a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5a38:	4631      	mov	r1, r6
   d5a3a:	a802      	add	r0, sp, #8
   d5a3c:	f7ff ffb0 	bl	d59a0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5a40:	68e0      	ldr	r0, [r4, #12]
   d5a42:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5a46:	b108      	cbz	r0, d5a4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d5a48:	f001 fc38 	bl	d72bc <strdup>
        type_(type) {
   d5a4c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5a4e:	2010      	movs	r0, #16
   d5a50:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5a54:	f7fe fb1f 	bl	d4096 <_Znwj>
   d5a58:	4605      	mov	r5, r0
   d5a5a:	b1e8      	cbz	r0, d5a98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d5a5c:	2700      	movs	r7, #0
   d5a5e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5a60:	2018      	movs	r0, #24
   d5a62:	f7fe fb18 	bl	d4096 <_Znwj>
   d5a66:	4604      	mov	r4, r0
   d5a68:	b188      	cbz	r0, d5a8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d5a6a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d5a6c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d5a6e:	a802      	add	r0, sp, #8
   d5a70:	f7ff fdb0 	bl	d55d4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a74:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5a76:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a78:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a7a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5a7c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5a7e:	a906      	add	r1, sp, #24
   d5a80:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a82:	60e3      	str	r3, [r4, #12]
   d5a84:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d5a88:	9205      	str	r2, [sp, #20]
   d5a8a:	f7ff feff 	bl	d588c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d5a8e:	4b08      	ldr	r3, [pc, #32]	; (d5ab0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d5a90:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5a92:	4b08      	ldr	r3, [pc, #32]	; (d5ab4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5a94:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5a96:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d5a98:	a806      	add	r0, sp, #24
   d5a9a:	f7ff ff04 	bl	d58a6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5a9e:	a802      	add	r0, sp, #8
   d5aa0:	f7ff fd7c 	bl	d559c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5aa4:	2200      	movs	r2, #0
   d5aa6:	4629      	mov	r1, r5
   d5aa8:	4803      	ldr	r0, [pc, #12]	; (d5ab8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d5aaa:	f7ff fa85 	bl	d4fb8 <application_thread_invoke>
   d5aae:	e7b7      	b.n	d5a20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d5ab0:	000d594b 	.word	0x000d594b
   d5ab4:	000d5be1 	.word	0x000d5be1
   d5ab8:	000d6149 	.word	0x000d6149

000d5abc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5ac0:	b08a      	sub	sp, #40	; 0x28
   d5ac2:	4605      	mov	r5, r0
   d5ac4:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d5ac8:	460c      	mov	r4, r1
   d5aca:	4617      	mov	r7, r2
   d5acc:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5ace:	f7ff faef 	bl	d50b0 <spark_cloud_flag_connected>
   d5ad2:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d5ad4:	4682      	mov	sl, r0
   d5ad6:	bb38      	cbnz	r0, d5b28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d5ad8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5adc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5ade:	a905      	add	r1, sp, #20
   d5ae0:	4630      	mov	r0, r6
   d5ae2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5ae6:	f7ff fed1 	bl	d588c <_ZN8particle5ErrorC1EOS0_>
   d5aea:	2014      	movs	r0, #20
   d5aec:	f7fe fad3 	bl	d4096 <_Znwj>
   d5af0:	4604      	mov	r4, r0
   d5af2:	b148      	cbz	r0, d5b08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5af4:	2302      	movs	r3, #2
   d5af6:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5af8:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5afa:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5afe:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d5b00:	4631      	mov	r1, r6
   d5b02:	300c      	adds	r0, #12
   d5b04:	f7ff fec2 	bl	d588c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5b08:	4628      	mov	r0, r5
	: __shared_count(__p)
   d5b0a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5b0c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d5b10:	f7ff ff32 	bl	d5978 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5b14:	4630      	mov	r0, r6
   d5b16:	f7ff fec6 	bl	d58a6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5b1a:	a805      	add	r0, sp, #20
   d5b1c:	f7ff fec3 	bl	d58a6 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d5b20:	4628      	mov	r0, r5
   d5b22:	b00a      	add	sp, #40	; 0x28
   d5b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5b28:	230c      	movs	r3, #12
   d5b2a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5b2e:	2014      	movs	r0, #20
   d5b30:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d5b34:	9307      	str	r3, [sp, #28]
   d5b36:	f7fe faae 	bl	d4096 <_Znwj>
   d5b3a:	4601      	mov	r1, r0
   d5b3c:	b128      	cbz	r0, d5b4a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5b3e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d5b42:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5b46:	f880 a001 	strb.w	sl, [r0, #1]
   d5b4a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5b4c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d5b4e:	f7ff ff13 	bl	d5978 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d5b52:	4b22      	ldr	r3, [pc, #136]	; (d5bdc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d5b54:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5b56:	2008      	movs	r0, #8
   d5b58:	f7fe fa9d 	bl	d4096 <_Znwj>
   d5b5c:	4682      	mov	sl, r0
   d5b5e:	b128      	cbz	r0, d5b6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5b60:	9b03      	ldr	r3, [sp, #12]
   d5b62:	f840 3b04 	str.w	r3, [r0], #4
   d5b66:	a904      	add	r1, sp, #16
   d5b68:	f7ff fd21 	bl	d55ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5b6c:	9600      	str	r6, [sp, #0]
   d5b6e:	fa5f f389 	uxtb.w	r3, r9
   d5b72:	4642      	mov	r2, r8
   d5b74:	4639      	mov	r1, r7
   d5b76:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d5b78:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5b7c:	f7ff faa0 	bl	d50c0 <spark_send_event>
   d5b80:	b9b8      	cbnz	r0, d5bb2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d5b82:	9b03      	ldr	r3, [sp, #12]
   d5b84:	785b      	ldrb	r3, [r3, #1]
   d5b86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5b8a:	b993      	cbnz	r3, d5bb2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d5b8c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d5b90:	a905      	add	r1, sp, #20
   d5b92:	a803      	add	r0, sp, #12
   d5b94:	9205      	str	r2, [sp, #20]
   d5b96:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5b9a:	f7ff ff11 	bl	d59c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5b9e:	a805      	add	r0, sp, #20
   d5ba0:	f7ff fe81 	bl	d58a6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5ba4:	a805      	add	r0, sp, #20
   d5ba6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5ba8:	f7ff fea7 	bl	d58fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d5bac:	a806      	add	r0, sp, #24
   d5bae:	f7ff fd05 	bl	d55bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5bb2:	9b03      	ldr	r3, [sp, #12]
   d5bb4:	9305      	str	r3, [sp, #20]
   d5bb6:	a904      	add	r1, sp, #16
   d5bb8:	a806      	add	r0, sp, #24
   d5bba:	f7ff fcf8 	bl	d55ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5bbe:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5bc0:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5bc2:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d5bc4:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d5bc6:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d5bc8:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d5bca:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d5bcc:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d5bce:	f7ff fcf5 	bl	d55bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5bd2:	a804      	add	r0, sp, #16
   d5bd4:	f7ff fcf2 	bl	d55bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d5bd8:	e7a2      	b.n	d5b20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d5bda:	bf00      	nop
   d5bdc:	000d5ca5 	.word	0x000d5ca5

000d5be0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d5be0:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5be2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5be4:	4605      	mov	r5, r0
	  switch (__op)
   d5be6:	d007      	beq.n	d5bf8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d5be8:	2a03      	cmp	r2, #3
   d5bea:	d018      	beq.n	d5c1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d5bec:	2a01      	cmp	r2, #1
   d5bee:	d101      	bne.n	d5bf4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5bf0:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5bf2:	6003      	str	r3, [r0, #0]
	}
   d5bf4:	2000      	movs	r0, #0
   d5bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5bf8:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d5bfa:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5bfc:	f7fe fa4b 	bl	d4096 <_Znwj>
   d5c00:	4604      	mov	r4, r0
   d5c02:	b150      	cbz	r0, d5c1a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5c04:	4631      	mov	r1, r6
   d5c06:	f7ff fecb 	bl	d59a0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5c0a:	6930      	ldr	r0, [r6, #16]
   d5c0c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5c10:	b108      	cbz	r0, d5c16 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d5c12:	f001 fb53 	bl	d72bc <strdup>
        type_(type) {
   d5c16:	6120      	str	r0, [r4, #16]
   d5c18:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d5c1a:	602c      	str	r4, [r5, #0]
	}
   d5c1c:	e7ea      	b.n	d5bf4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5c1e:	6804      	ldr	r4, [r0, #0]
   d5c20:	2c00      	cmp	r4, #0
   d5c22:	d0e7      	beq.n	d5bf4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d5c24:	f104 0010 	add.w	r0, r4, #16
   d5c28:	f7ff fe3d 	bl	d58a6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5c2c:	4620      	mov	r0, r4
   d5c2e:	f7ff fcb5 	bl	d559c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5c32:	2118      	movs	r1, #24
   d5c34:	4620      	mov	r0, r4
   d5c36:	f000 fc66 	bl	d6506 <_ZdlPvj>
   d5c3a:	e7db      	b.n	d5bf4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d5c3c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d5c3c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5c3e:	2300      	movs	r3, #0
   d5c40:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d5c42:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5c44:	4604      	mov	r4, r0
   d5c46:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5c48:	b12b      	cbz	r3, d5c56 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5c4a:	2202      	movs	r2, #2
   d5c4c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5c4e:	68eb      	ldr	r3, [r5, #12]
   d5c50:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5c52:	68ab      	ldr	r3, [r5, #8]
   d5c54:	60a3      	str	r3, [r4, #8]
    }
   d5c56:	4620      	mov	r0, r4
   d5c58:	bd38      	pop	{r3, r4, r5, pc}

000d5c5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d5c5a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5c5c:	b570      	push	{r4, r5, r6, lr}
   d5c5e:	4604      	mov	r4, r0
	  switch (__op)
   d5c60:	d007      	beq.n	d5c72 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d5c62:	2a03      	cmp	r2, #3
   d5c64:	d012      	beq.n	d5c8c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d5c66:	2a01      	cmp	r2, #1
   d5c68:	d101      	bne.n	d5c6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5c6a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5c6c:	6003      	str	r3, [r0, #0]
	}
   d5c6e:	2000      	movs	r0, #0
   d5c70:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5c72:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d5c74:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5c76:	f7fe fa0e 	bl	d4096 <_Znwj>
   d5c7a:	4605      	mov	r5, r0
   d5c7c:	b120      	cbz	r0, d5c88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d5c7e:	4631      	mov	r1, r6
   d5c80:	f7ff ffdc 	bl	d5c3c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5c84:	7c33      	ldrb	r3, [r6, #16]
   d5c86:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d5c88:	6025      	str	r5, [r4, #0]
	}
   d5c8a:	e7f0      	b.n	d5c6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5c8c:	6804      	ldr	r4, [r0, #0]
   d5c8e:	2c00      	cmp	r4, #0
   d5c90:	d0ed      	beq.n	d5c6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d5c92:	4620      	mov	r0, r4
   d5c94:	f7ff fc82 	bl	d559c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5c98:	2114      	movs	r1, #20
   d5c9a:	4620      	mov	r0, r4
   d5c9c:	f000 fc33 	bl	d6506 <_ZdlPvj>
   d5ca0:	e7e5      	b.n	d5c6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d5ca4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5ca6:	b089      	sub	sp, #36	; 0x24
   d5ca8:	4604      	mov	r4, r0
   d5caa:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5cac:	a801      	add	r0, sp, #4
   d5cae:	4611      	mov	r1, r2
   d5cb0:	f7ff fe23 	bl	d58fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5cb4:	b1a4      	cbz	r4, d5ce0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5cb6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5cb8:	b11d      	cbz	r5, d5cc2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d5cba:	4628      	mov	r0, r5
   d5cbc:	f001 fafe 	bl	d72bc <strdup>
   d5cc0:	4605      	mov	r5, r0
   d5cc2:	a801      	add	r0, sp, #4
   d5cc4:	a903      	add	r1, sp, #12
        type_(type) {
   d5cc6:	9503      	str	r5, [sp, #12]
   d5cc8:	f8ad 4010 	strh.w	r4, [sp, #16]
   d5ccc:	f7ff fe78 	bl	d59c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5cd0:	a803      	add	r0, sp, #12
   d5cd2:	f7ff fde8 	bl	d58a6 <_ZN8particle5ErrorD1Ev>
   d5cd6:	a802      	add	r0, sp, #8
   d5cd8:	f7ff fc70 	bl	d55bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5cdc:	b009      	add	sp, #36	; 0x24
   d5cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5ce0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5ce2:	2301      	movs	r3, #1
   d5ce4:	e8d5 2f4f 	ldrexb	r2, [r5]
   d5ce8:	2a00      	cmp	r2, #0
   d5cea:	d103      	bne.n	d5cf4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d5cec:	e8c5 3f41 	strexb	r1, r3, [r5]
   d5cf0:	2900      	cmp	r1, #0
   d5cf2:	d1f7      	bne.n	d5ce4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d5cf4:	d1ef      	bne.n	d5cd6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d5cf6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d5cf8:	f3bf 8f5b 	dmb	ish
   d5cfc:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d5cfe:	1d2b      	adds	r3, r5, #4
   d5d00:	f3bf 8f5b 	dmb	ish
   d5d04:	e853 6f00 	ldrex	r6, [r3]
   d5d08:	e843 4200 	strex	r2, r4, [r3]
   d5d0c:	2a00      	cmp	r2, #0
   d5d0e:	d1f9      	bne.n	d5d04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d5d10:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5d14:	2e00      	cmp	r6, #0
   d5d16:	d0de      	beq.n	d5cd6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d5d18:	4620      	mov	r0, r4
   d5d1a:	f7ff f945 	bl	d4fa8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5d1e:	4607      	mov	r7, r0
   d5d20:	b160      	cbz	r0, d5d3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5d22:	f105 010c 	add.w	r1, r5, #12
   d5d26:	4630      	mov	r0, r6
   d5d28:	f7ff fe16 	bl	d5958 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d5d2c:	4630      	mov	r0, r6
   d5d2e:	f7ff fc35 	bl	d559c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d5d32:	2110      	movs	r1, #16
   d5d34:	4630      	mov	r0, r6
   d5d36:	f000 fbe6 	bl	d6506 <_ZdlPvj>
   d5d3a:	e7cc      	b.n	d5cd6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5d3c:	4631      	mov	r1, r6
   d5d3e:	a803      	add	r0, sp, #12
   d5d40:	f7ff ff7c 	bl	d5c3c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5d44:	7b2b      	ldrb	r3, [r5, #12]
   d5d46:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5d4a:	2010      	movs	r0, #16
   d5d4c:	f7fe f9a3 	bl	d4096 <_Znwj>
   d5d50:	4605      	mov	r5, r0
   d5d52:	b1d0      	cbz	r0, d5d8a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d5d54:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5d56:	2014      	movs	r0, #20
   d5d58:	f7fe f99d 	bl	d4096 <_Znwj>
   d5d5c:	4604      	mov	r4, r0
   d5d5e:	b178      	cbz	r0, d5d80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d5d60:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d5d62:	4601      	mov	r1, r0
   d5d64:	a803      	add	r0, sp, #12
   d5d66:	f7ff fc35 	bl	d55d4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5d6a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5d6c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5d6e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5d70:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d5d72:	9205      	str	r2, [sp, #20]
   d5d74:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5d76:	60e3      	str	r3, [r4, #12]
   d5d78:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d5d7c:	9206      	str	r2, [sp, #24]
   d5d7e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d5d80:	4b06      	ldr	r3, [pc, #24]	; (d5d9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d5d82:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5d84:	4b06      	ldr	r3, [pc, #24]	; (d5da0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5d86:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5d88:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d5d8a:	a803      	add	r0, sp, #12
   d5d8c:	f7ff fc06 	bl	d559c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5d90:	2200      	movs	r2, #0
   d5d92:	4629      	mov	r1, r5
   d5d94:	4803      	ldr	r0, [pc, #12]	; (d5da4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d5d96:	f7ff f90f 	bl	d4fb8 <application_thread_invoke>
   d5d9a:	e7c7      	b.n	d5d2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d5d9c:	000d596b 	.word	0x000d596b
   d5da0:	000d5c5b 	.word	0x000d5c5b
   d5da4:	000d6149 	.word	0x000d6149

000d5da8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5da8:	4770      	bx	lr

000d5daa <_ZN9IPAddressD0Ev>:
   d5daa:	b510      	push	{r4, lr}
   d5dac:	2118      	movs	r1, #24
   d5dae:	4604      	mov	r4, r0
   d5db0:	f000 fba9 	bl	d6506 <_ZdlPvj>
   d5db4:	4620      	mov	r0, r4
   d5db6:	bd10      	pop	{r4, pc}

000d5db8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5db8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5dba:	7d03      	ldrb	r3, [r0, #20]
   d5dbc:	2b06      	cmp	r3, #6
{
   d5dbe:	b08d      	sub	sp, #52	; 0x34
   d5dc0:	460e      	mov	r6, r1
   d5dc2:	f100 0704 	add.w	r7, r0, #4
   d5dc6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5dca:	d012      	beq.n	d5df2 <_ZNK9IPAddress7printToER5Print+0x3a>
   d5dcc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5dd0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5dd4:	220a      	movs	r2, #10
   d5dd6:	4630      	mov	r0, r6
   d5dd8:	f7ff fc67 	bl	d56aa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5ddc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5dde:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5de0:	d019      	beq.n	d5e16 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5de2:	2c00      	cmp	r4, #0
   d5de4:	d0f4      	beq.n	d5dd0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5de6:	212e      	movs	r1, #46	; 0x2e
   d5de8:	4630      	mov	r0, r6
   d5dea:	f7ff fc45 	bl	d5678 <_ZN5Print5printEc>
   d5dee:	4404      	add	r4, r0
   d5df0:	e7ee      	b.n	d5dd0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5df2:	232f      	movs	r3, #47	; 0x2f
   d5df4:	466a      	mov	r2, sp
   d5df6:	4639      	mov	r1, r7
   d5df8:	200a      	movs	r0, #10
		buf[0] = 0;
   d5dfa:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5dfe:	f7fe fffb 	bl	d4df8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5e02:	4668      	mov	r0, sp
   d5e04:	f001 fa77 	bl	d72f6 <strlen>
   d5e08:	6833      	ldr	r3, [r6, #0]
   d5e0a:	4602      	mov	r2, r0
   d5e0c:	68db      	ldr	r3, [r3, #12]
   d5e0e:	4669      	mov	r1, sp
   d5e10:	4630      	mov	r0, r6
   d5e12:	4798      	blx	r3
   d5e14:	4604      	mov	r4, r0
    }
    return n;
}
   d5e16:	4620      	mov	r0, r4
   d5e18:	b00d      	add	sp, #52	; 0x34
   d5e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5e1c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5e1c:	b510      	push	{r4, lr}
   d5e1e:	4b05      	ldr	r3, [pc, #20]	; (d5e34 <_ZN9IPAddressC1Ev+0x18>)
   d5e20:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5e22:	2211      	movs	r2, #17
   d5e24:	f840 3b04 	str.w	r3, [r0], #4
   d5e28:	2100      	movs	r1, #0
   d5e2a:	f001 fa13 	bl	d7254 <memset>
}
   d5e2e:	4620      	mov	r0, r4
   d5e30:	bd10      	pop	{r4, pc}
   d5e32:	bf00      	nop
   d5e34:	000d75a8 	.word	0x000d75a8

000d5e38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5e38:	4603      	mov	r3, r0
   d5e3a:	4a07      	ldr	r2, [pc, #28]	; (d5e58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5e3c:	b510      	push	{r4, lr}
   d5e3e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5e42:	f101 0210 	add.w	r2, r1, #16
   d5e46:	f851 4b04 	ldr.w	r4, [r1], #4
   d5e4a:	f843 4b04 	str.w	r4, [r3], #4
   d5e4e:	4291      	cmp	r1, r2
   d5e50:	d1f9      	bne.n	d5e46 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5e52:	780a      	ldrb	r2, [r1, #0]
   d5e54:	701a      	strb	r2, [r3, #0]
}
   d5e56:	bd10      	pop	{r4, pc}
   d5e58:	000d75a8 	.word	0x000d75a8

000d5e5c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5e5c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5e5e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5e62:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5e66:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5e6a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5e6e:	2304      	movs	r3, #4
   d5e70:	6041      	str	r1, [r0, #4]
   d5e72:	7503      	strb	r3, [r0, #20]
}
   d5e74:	bd10      	pop	{r4, pc}
	...

000d5e78 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d5e78:	b513      	push	{r0, r1, r4, lr}
   d5e7a:	4b05      	ldr	r3, [pc, #20]	; (d5e90 <_ZN9IPAddressC1EPKh+0x18>)
   d5e7c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d5e7e:	78cb      	ldrb	r3, [r1, #3]
   d5e80:	9300      	str	r3, [sp, #0]
   d5e82:	788b      	ldrb	r3, [r1, #2]
   d5e84:	784a      	ldrb	r2, [r1, #1]
   d5e86:	7809      	ldrb	r1, [r1, #0]
   d5e88:	f7ff ffe8 	bl	d5e5c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5e8c:	b002      	add	sp, #8
   d5e8e:	bd10      	pop	{r4, pc}
   d5e90:	000d75a8 	.word	0x000d75a8

000d5e94 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5e94:	7441      	strb	r1, [r0, #17]
}
   d5e96:	4770      	bx	lr

000d5e98 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5e98:	4770      	bx	lr

000d5e9a <_ZN9USBSerial4readEv>:
{
   d5e9a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5e9c:	2100      	movs	r1, #0
   d5e9e:	7c00      	ldrb	r0, [r0, #16]
   d5ea0:	f7ff f862 	bl	d4f68 <HAL_USB_USART_Receive_Data>
}
   d5ea4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5ea8:	bd08      	pop	{r3, pc}

000d5eaa <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5eaa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5eac:	2101      	movs	r1, #1
   d5eae:	7c00      	ldrb	r0, [r0, #16]
   d5eb0:	f7ff f85a 	bl	d4f68 <HAL_USB_USART_Receive_Data>
}
   d5eb4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5eb8:	bd08      	pop	{r3, pc}

000d5eba <_ZN9USBSerial17availableForWriteEv>:
{
   d5eba:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5ebc:	7c00      	ldrb	r0, [r0, #16]
   d5ebe:	f7ff f84b 	bl	d4f58 <HAL_USB_USART_Available_Data_For_Write>
}
   d5ec2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5ec6:	bd08      	pop	{r3, pc}

000d5ec8 <_ZN9USBSerial9availableEv>:
{
   d5ec8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5eca:	7c00      	ldrb	r0, [r0, #16]
   d5ecc:	f7ff f83c 	bl	d4f48 <HAL_USB_USART_Available_Data>
}
   d5ed0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5ed4:	bd08      	pop	{r3, pc}

000d5ed6 <_ZN9USBSerial5writeEh>:
{
   d5ed6:	b513      	push	{r0, r1, r4, lr}
   d5ed8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5eda:	7c00      	ldrb	r0, [r0, #16]
{
   d5edc:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5ede:	f7ff f83b 	bl	d4f58 <HAL_USB_USART_Available_Data_For_Write>
   d5ee2:	2800      	cmp	r0, #0
   d5ee4:	9901      	ldr	r1, [sp, #4]
   d5ee6:	dc01      	bgt.n	d5eec <_ZN9USBSerial5writeEh+0x16>
   d5ee8:	7c60      	ldrb	r0, [r4, #17]
   d5eea:	b120      	cbz	r0, d5ef6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5eec:	7c20      	ldrb	r0, [r4, #16]
   d5eee:	f7ff f843 	bl	d4f78 <HAL_USB_USART_Send_Data>
   d5ef2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5ef6:	b002      	add	sp, #8
   d5ef8:	bd10      	pop	{r4, pc}

000d5efa <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5efa:	7c00      	ldrb	r0, [r0, #16]
   d5efc:	f7ff b844 	b.w	d4f88 <HAL_USB_USART_Flush_Data>

000d5f00 <_ZN9USBSerialD0Ev>:
   d5f00:	b510      	push	{r4, lr}
   d5f02:	2114      	movs	r1, #20
   d5f04:	4604      	mov	r4, r0
   d5f06:	f000 fafe 	bl	d6506 <_ZdlPvj>
   d5f0a:	4620      	mov	r0, r4
   d5f0c:	bd10      	pop	{r4, pc}
	...

000d5f10 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5f10:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5f16:	4604      	mov	r4, r0
   d5f18:	4608      	mov	r0, r1
   d5f1a:	2100      	movs	r1, #0
   d5f1c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5f20:	4b04      	ldr	r3, [pc, #16]	; (d5f34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5f22:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5f24:	2301      	movs	r3, #1
  _serial = serial;
   d5f26:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5f28:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5f2a:	4611      	mov	r1, r2
   d5f2c:	f7fe fffc 	bl	d4f28 <HAL_USB_USART_Init>
}
   d5f30:	4620      	mov	r0, r4
   d5f32:	bd10      	pop	{r4, pc}
   d5f34:	000d75bc 	.word	0x000d75bc

000d5f38 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5f38:	7c00      	ldrb	r0, [r0, #16]
   d5f3a:	2200      	movs	r2, #0
   d5f3c:	f7fe bffc 	b.w	d4f38 <HAL_USB_USART_Begin>

000d5f40 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5f40:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5f42:	2214      	movs	r2, #20
{
   d5f44:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5f46:	2100      	movs	r1, #0
   d5f48:	f001 f984 	bl	d7254 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5f4c:	4620      	mov	r0, r4
   d5f4e:	bd10      	pop	{r4, pc}

000d5f50 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5f50:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5f52:	4c10      	ldr	r4, [pc, #64]	; (d5f94 <_Z16_fetch_usbserialv+0x44>)
{
   d5f54:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5f56:	a803      	add	r0, sp, #12
   d5f58:	f7ff fff2 	bl	d5f40 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5f5c:	7821      	ldrb	r1, [r4, #0]
   d5f5e:	f3bf 8f5b 	dmb	ish
   d5f62:	f011 0101 	ands.w	r1, r1, #1
   d5f66:	d111      	bne.n	d5f8c <_Z16_fetch_usbserialv+0x3c>
   d5f68:	4620      	mov	r0, r4
   d5f6a:	9101      	str	r1, [sp, #4]
   d5f6c:	f7fe f899 	bl	d40a2 <__cxa_guard_acquire>
   d5f70:	9901      	ldr	r1, [sp, #4]
   d5f72:	b158      	cbz	r0, d5f8c <_Z16_fetch_usbserialv+0x3c>
   d5f74:	aa03      	add	r2, sp, #12
   d5f76:	4808      	ldr	r0, [pc, #32]	; (d5f98 <_Z16_fetch_usbserialv+0x48>)
   d5f78:	f7ff ffca 	bl	d5f10 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5f7c:	4620      	mov	r0, r4
   d5f7e:	f7fe f895 	bl	d40ac <__cxa_guard_release>
   d5f82:	4a06      	ldr	r2, [pc, #24]	; (d5f9c <_Z16_fetch_usbserialv+0x4c>)
   d5f84:	4906      	ldr	r1, [pc, #24]	; (d5fa0 <_Z16_fetch_usbserialv+0x50>)
   d5f86:	4804      	ldr	r0, [pc, #16]	; (d5f98 <_Z16_fetch_usbserialv+0x48>)
   d5f88:	f000 fab8 	bl	d64fc <__aeabi_atexit>
	return _usbserial;
}
   d5f8c:	4802      	ldr	r0, [pc, #8]	; (d5f98 <_Z16_fetch_usbserialv+0x48>)
   d5f8e:	b008      	add	sp, #32
   d5f90:	bd10      	pop	{r4, pc}
   d5f92:	bf00      	nop
   d5f94:	2003e658 	.word	0x2003e658
   d5f98:	2003e65c 	.word	0x2003e65c
   d5f9c:	2003e54c 	.word	0x2003e54c
   d5fa0:	000d5e99 	.word	0x000d5e99

000d5fa4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5fa4:	2200      	movs	r2, #0
   d5fa6:	6840      	ldr	r0, [r0, #4]
   d5fa8:	4611      	mov	r1, r2
   d5faa:	f7ff b839 	b.w	d5020 <network_ready>

000d5fae <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d5fae:	2200      	movs	r2, #0
   d5fb0:	6840      	ldr	r0, [r0, #4]
   d5fb2:	4611      	mov	r1, r2
   d5fb4:	f7ff b854 	b.w	d5060 <network_listening>

000d5fb8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5fb8:	2200      	movs	r2, #0
   d5fba:	6840      	ldr	r0, [r0, #4]
   d5fbc:	4611      	mov	r1, r2
   d5fbe:	f7ff b85f 	b.w	d5080 <network_get_listen_timeout>

000d5fc2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5fc2:	6840      	ldr	r0, [r0, #4]
   d5fc4:	2200      	movs	r2, #0
   d5fc6:	f7ff b853 	b.w	d5070 <network_set_listen_timeout>

000d5fca <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5fca:	6840      	ldr	r0, [r0, #4]
   d5fcc:	2200      	movs	r2, #0
   d5fce:	f081 0101 	eor.w	r1, r1, #1
   d5fd2:	f7ff b83d 	b.w	d5050 <network_listen>

000d5fd6 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5fd6:	2300      	movs	r3, #0
   d5fd8:	6840      	ldr	r0, [r0, #4]
   d5fda:	461a      	mov	r2, r3
   d5fdc:	4619      	mov	r1, r3
   d5fde:	f7ff b82f 	b.w	d5040 <network_off>

000d5fe2 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5fe2:	2300      	movs	r3, #0
   d5fe4:	6840      	ldr	r0, [r0, #4]
   d5fe6:	461a      	mov	r2, r3
   d5fe8:	4619      	mov	r1, r3
   d5fea:	f7ff b821 	b.w	d5030 <network_on>

000d5fee <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5fee:	2200      	movs	r2, #0
   d5ff0:	6840      	ldr	r0, [r0, #4]
   d5ff2:	4611      	mov	r1, r2
   d5ff4:	f7ff b804 	b.w	d5000 <network_connecting>

000d5ff8 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5ff8:	6840      	ldr	r0, [r0, #4]
   d5ffa:	2200      	movs	r2, #0
   d5ffc:	2102      	movs	r1, #2
   d5ffe:	f7ff b807 	b.w	d5010 <network_disconnect>

000d6002 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6002:	2300      	movs	r3, #0
   d6004:	6840      	ldr	r0, [r0, #4]
   d6006:	461a      	mov	r2, r3
   d6008:	f7fe bff2 	b.w	d4ff0 <network_connect>

000d600c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d600c:	4b08      	ldr	r3, [pc, #32]	; (d6030 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d600e:	b510      	push	{r4, lr}
   d6010:	2428      	movs	r4, #40	; 0x28
   d6012:	4622      	mov	r2, r4
   d6014:	4618      	mov	r0, r3
   d6016:	2100      	movs	r1, #0
   d6018:	f001 f91c 	bl	d7254 <memset>
   d601c:	4b05      	ldr	r3, [pc, #20]	; (d6034 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d601e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d6020:	f04f 32ff 	mov.w	r2, #4294967295
   d6024:	6042      	str	r2, [r0, #4]
   d6026:	2204      	movs	r2, #4
   d6028:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d602a:	4a03      	ldr	r2, [pc, #12]	; (d6038 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d602c:	601a      	str	r2, [r3, #0]
   d602e:	bd10      	pop	{r4, pc}
   d6030:	2003e678 	.word	0x2003e678
   d6034:	2003e670 	.word	0x2003e670
   d6038:	000d75ec 	.word	0x000d75ec

000d603c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d603c:	4770      	bx	lr

000d603e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d603e:	7441      	strb	r1, [r0, #17]
}
   d6040:	4770      	bx	lr

000d6042 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d6042:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6044:	7c00      	ldrb	r0, [r0, #16]
   d6046:	f7fe ff17 	bl	d4e78 <hal_usart_available_data_for_write>
}
   d604a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d604e:	bd08      	pop	{r3, pc}

000d6050 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6050:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d6052:	7c00      	ldrb	r0, [r0, #16]
   d6054:	f7fe fee8 	bl	d4e28 <hal_usart_available>
}
   d6058:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d605c:	bd08      	pop	{r3, pc}

000d605e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d605e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6060:	7c00      	ldrb	r0, [r0, #16]
   d6062:	f7fe fef1 	bl	d4e48 <hal_usart_peek>
}
   d6066:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d606a:	bd08      	pop	{r3, pc}

000d606c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d606c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d606e:	7c00      	ldrb	r0, [r0, #16]
   d6070:	f7fe fee2 	bl	d4e38 <hal_usart_read>
}
   d6074:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6078:	bd08      	pop	{r3, pc}

000d607a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d607a:	7c00      	ldrb	r0, [r0, #16]
   d607c:	f7fe beec 	b.w	d4e58 <hal_usart_flush>

000d6080 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6080:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6082:	7c45      	ldrb	r5, [r0, #17]
{
   d6084:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6086:	b12d      	cbz	r5, d6094 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d6088:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d608a:	b003      	add	sp, #12
   d608c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6090:	f7fe bec2 	b.w	d4e18 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6094:	7c00      	ldrb	r0, [r0, #16]
   d6096:	9101      	str	r1, [sp, #4]
   d6098:	f7fe feee 	bl	d4e78 <hal_usart_available_data_for_write>
   d609c:	2800      	cmp	r0, #0
   d609e:	9901      	ldr	r1, [sp, #4]
   d60a0:	dcf2      	bgt.n	d6088 <_ZN11USARTSerial5writeEh+0x8>
}
   d60a2:	4628      	mov	r0, r5
   d60a4:	b003      	add	sp, #12
   d60a6:	bd30      	pop	{r4, r5, pc}

000d60a8 <_ZN11USARTSerialD0Ev>:
   d60a8:	b510      	push	{r4, lr}
   d60aa:	2114      	movs	r1, #20
   d60ac:	4604      	mov	r4, r0
   d60ae:	f000 fa2a 	bl	d6506 <_ZdlPvj>
   d60b2:	4620      	mov	r0, r4
   d60b4:	bd10      	pop	{r4, pc}
	...

000d60b8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d60b8:	b510      	push	{r4, lr}
   d60ba:	f04f 0c00 	mov.w	ip, #0
   d60be:	4604      	mov	r4, r0
   d60c0:	4608      	mov	r0, r1
   d60c2:	4611      	mov	r1, r2
   d60c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d60c8:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d60cc:	4a04      	ldr	r2, [pc, #16]	; (d60e0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d60ce:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d60d0:	2201      	movs	r2, #1
  _serial = serial;
   d60d2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d60d4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d60d6:	461a      	mov	r2, r3
   d60d8:	f7fe fe96 	bl	d4e08 <hal_usart_init>
}
   d60dc:	4620      	mov	r0, r4
   d60de:	bd10      	pop	{r4, pc}
   d60e0:	000d7628 	.word	0x000d7628

000d60e4 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d60e4:	7c00      	ldrb	r0, [r0, #16]
   d60e6:	2300      	movs	r3, #0
   d60e8:	f7fe bece 	b.w	d4e88 <hal_usart_begin_config>

000d60ec <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d60ec:	2200      	movs	r2, #0
   d60ee:	f7ff bff9 	b.w	d60e4 <_ZN11USARTSerial5beginEmm>
	...

000d60f4 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d60f4:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d60f6:	4c0e      	ldr	r4, [pc, #56]	; (d6130 <_Z22__fetch_global_Serial1v+0x3c>)
   d60f8:	7821      	ldrb	r1, [r4, #0]
   d60fa:	f3bf 8f5b 	dmb	ish
   d60fe:	f011 0101 	ands.w	r1, r1, #1
   d6102:	d112      	bne.n	d612a <_Z22__fetch_global_Serial1v+0x36>
   d6104:	4620      	mov	r0, r4
   d6106:	9101      	str	r1, [sp, #4]
   d6108:	f7fd ffcb 	bl	d40a2 <__cxa_guard_acquire>
   d610c:	9901      	ldr	r1, [sp, #4]
   d610e:	b160      	cbz	r0, d612a <_Z22__fetch_global_Serial1v+0x36>
   d6110:	4a08      	ldr	r2, [pc, #32]	; (d6134 <_Z22__fetch_global_Serial1v+0x40>)
   d6112:	4b09      	ldr	r3, [pc, #36]	; (d6138 <_Z22__fetch_global_Serial1v+0x44>)
   d6114:	4809      	ldr	r0, [pc, #36]	; (d613c <_Z22__fetch_global_Serial1v+0x48>)
   d6116:	f7ff ffcf 	bl	d60b8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d611a:	4620      	mov	r0, r4
   d611c:	f7fd ffc6 	bl	d40ac <__cxa_guard_release>
   d6120:	4a07      	ldr	r2, [pc, #28]	; (d6140 <_Z22__fetch_global_Serial1v+0x4c>)
   d6122:	4908      	ldr	r1, [pc, #32]	; (d6144 <_Z22__fetch_global_Serial1v+0x50>)
   d6124:	4805      	ldr	r0, [pc, #20]	; (d613c <_Z22__fetch_global_Serial1v+0x48>)
   d6126:	f000 f9e9 	bl	d64fc <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d612a:	4804      	ldr	r0, [pc, #16]	; (d613c <_Z22__fetch_global_Serial1v+0x48>)
   d612c:	b002      	add	sp, #8
   d612e:	bd10      	pop	{r4, pc}
   d6130:	2003e6a0 	.word	0x2003e6a0
   d6134:	2003e6a4 	.word	0x2003e6a4
   d6138:	2003e728 	.word	0x2003e728
   d613c:	2003e7ac 	.word	0x2003e7ac
   d6140:	2003e54c 	.word	0x2003e54c
   d6144:	000d603d 	.word	0x000d603d

000d6148 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6148:	b510      	push	{r4, lr}
      if (_M_empty())
   d614a:	6883      	ldr	r3, [r0, #8]
   d614c:	4604      	mov	r4, r0
   d614e:	b90b      	cbnz	r3, d6154 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6150:	f000 f9e3 	bl	d651a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6154:	68c3      	ldr	r3, [r0, #12]
   d6156:	4798      	blx	r3
      if (_M_manager)
   d6158:	68a3      	ldr	r3, [r4, #8]
   d615a:	b11b      	cbz	r3, d6164 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d615c:	2203      	movs	r2, #3
   d615e:	4621      	mov	r1, r4
   d6160:	4620      	mov	r0, r4
   d6162:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6164:	4620      	mov	r0, r4
   d6166:	2110      	movs	r1, #16
}
   d6168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d616c:	f000 b9cb 	b.w	d6506 <_ZdlPvj>

000d6170 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6170:	4770      	bx	lr

000d6172 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6174:	4606      	mov	r6, r0
   d6176:	4615      	mov	r5, r2
   d6178:	460c      	mov	r4, r1
   d617a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d617c:	42bc      	cmp	r4, r7
   d617e:	d006      	beq.n	d618e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6180:	6833      	ldr	r3, [r6, #0]
   d6182:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6186:	689b      	ldr	r3, [r3, #8]
   d6188:	4630      	mov	r0, r6
   d618a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d618c:	e7f6      	b.n	d617c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d618e:	4628      	mov	r0, r5
   d6190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6192 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d6192:	7c00      	ldrb	r0, [r0, #16]
   d6194:	2200      	movs	r2, #0
   d6196:	f7fe be7f 	b.w	d4e98 <hal_i2c_write>

000d619a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d619a:	7c00      	ldrb	r0, [r0, #16]
   d619c:	2100      	movs	r1, #0
   d619e:	f7fe be83 	b.w	d4ea8 <hal_i2c_available>

000d61a2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d61a2:	7c00      	ldrb	r0, [r0, #16]
   d61a4:	2100      	movs	r1, #0
   d61a6:	f7fe be87 	b.w	d4eb8 <hal_i2c_read>

000d61aa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d61aa:	7c00      	ldrb	r0, [r0, #16]
   d61ac:	2100      	movs	r1, #0
   d61ae:	f7fe be8b 	b.w	d4ec8 <hal_i2c_peek>

000d61b2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d61b2:	7c00      	ldrb	r0, [r0, #16]
   d61b4:	2100      	movs	r1, #0
   d61b6:	f7fe be8f 	b.w	d4ed8 <hal_i2c_flush>

000d61ba <_ZN7TwoWireD0Ev>:
   d61ba:	b510      	push	{r4, lr}
   d61bc:	2114      	movs	r1, #20
   d61be:	4604      	mov	r4, r0
   d61c0:	f000 f9a1 	bl	d6506 <_ZdlPvj>
   d61c4:	4620      	mov	r0, r4
   d61c6:	bd10      	pop	{r4, pc}

000d61c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d61c8:	b510      	push	{r4, lr}
   d61ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d61ce:	4604      	mov	r4, r0
   d61d0:	4608      	mov	r0, r1
   d61d2:	2100      	movs	r1, #0
   d61d4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d61d8:	4b03      	ldr	r3, [pc, #12]	; (d61e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d61da:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d61dc:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d61de:	4611      	mov	r1, r2
   d61e0:	f7fe fe8a 	bl	d4ef8 <hal_i2c_init>
}
   d61e4:	4620      	mov	r0, r4
   d61e6:	bd10      	pop	{r4, pc}
   d61e8:	000d7658 	.word	0x000d7658

000d61ec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d61ec:	2300      	movs	r3, #0
   d61ee:	6840      	ldr	r0, [r0, #4]
   d61f0:	461a      	mov	r2, r3
   d61f2:	f7fe befd 	b.w	d4ff0 <network_connect>

000d61f6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d61f6:	6840      	ldr	r0, [r0, #4]
   d61f8:	2200      	movs	r2, #0
   d61fa:	2102      	movs	r1, #2
   d61fc:	f7fe bf08 	b.w	d5010 <network_disconnect>

000d6200 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6200:	2200      	movs	r2, #0
   d6202:	6840      	ldr	r0, [r0, #4]
   d6204:	4611      	mov	r1, r2
   d6206:	f7fe befb 	b.w	d5000 <network_connecting>

000d620a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d620a:	2200      	movs	r2, #0
   d620c:	6840      	ldr	r0, [r0, #4]
   d620e:	4611      	mov	r1, r2
   d6210:	f7fe bf06 	b.w	d5020 <network_ready>

000d6214 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6214:	2300      	movs	r3, #0
   d6216:	6840      	ldr	r0, [r0, #4]
   d6218:	461a      	mov	r2, r3
   d621a:	4619      	mov	r1, r3
   d621c:	f7fe bf08 	b.w	d5030 <network_on>

000d6220 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6220:	2300      	movs	r3, #0
   d6222:	6840      	ldr	r0, [r0, #4]
   d6224:	461a      	mov	r2, r3
   d6226:	4619      	mov	r1, r3
   d6228:	f7fe bf0a 	b.w	d5040 <network_off>

000d622c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d622c:	6840      	ldr	r0, [r0, #4]
   d622e:	2100      	movs	r1, #0
   d6230:	f7fe bf2e 	b.w	d5090 <network_is_on>

000d6234 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d6234:	6840      	ldr	r0, [r0, #4]
   d6236:	2100      	movs	r1, #0
   d6238:	f7fe bf32 	b.w	d50a0 <network_is_off>

000d623c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d623c:	6840      	ldr	r0, [r0, #4]
   d623e:	2200      	movs	r2, #0
   d6240:	f081 0101 	eor.w	r1, r1, #1
   d6244:	f7fe bf04 	b.w	d5050 <network_listen>

000d6248 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6248:	6840      	ldr	r0, [r0, #4]
   d624a:	2200      	movs	r2, #0
   d624c:	f7fe bf10 	b.w	d5070 <network_set_listen_timeout>

000d6250 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6250:	2200      	movs	r2, #0
   d6252:	6840      	ldr	r0, [r0, #4]
   d6254:	4611      	mov	r1, r2
   d6256:	f7fe bf13 	b.w	d5080 <network_get_listen_timeout>

000d625a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d625a:	2200      	movs	r2, #0
   d625c:	6840      	ldr	r0, [r0, #4]
   d625e:	4611      	mov	r1, r2
   d6260:	f7fe befe 	b.w	d5060 <network_listening>

000d6264 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6268:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d626a:	b095      	sub	sp, #84	; 0x54
   d626c:	4616      	mov	r6, r2
   d626e:	460d      	mov	r5, r1
   d6270:	4607      	mov	r7, r0
    IPAddress addr;
   d6272:	f7ff fdd3 	bl	d5e1c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d6276:	4621      	mov	r1, r4
   d6278:	2218      	movs	r2, #24
   d627a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d627c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d627e:	f000 ffe9 	bl	d7254 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6282:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6284:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6288:	4621      	mov	r1, r4
   d628a:	466b      	mov	r3, sp
   d628c:	aa0c      	add	r2, sp, #48	; 0x30
   d628e:	4630      	mov	r0, r6
   d6290:	f7fe fd5a 	bl	d4d48 <netdb_getaddrinfo>
    if (!r) {
   d6294:	4604      	mov	r4, r0
   d6296:	2800      	cmp	r0, #0
   d6298:	d14c      	bne.n	d6334 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d629a:	4602      	mov	r2, r0
   d629c:	2101      	movs	r1, #1
   d629e:	6868      	ldr	r0, [r5, #4]
   d62a0:	f7fe febe 	bl	d5020 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d62a4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d62a6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d62a8:	4622      	mov	r2, r4
   d62aa:	6868      	ldr	r0, [r5, #4]
   d62ac:	f7fe feb8 	bl	d5020 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d62b0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d62b2:	4681      	mov	r9, r0
        bool ok = false;
   d62b4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d62b6:	2e00      	cmp	r6, #0
   d62b8:	d03c      	beq.n	d6334 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d62ba:	2900      	cmp	r1, #0
   d62bc:	d13a      	bne.n	d6334 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d62be:	6873      	ldr	r3, [r6, #4]
   d62c0:	2b02      	cmp	r3, #2
   d62c2:	d003      	beq.n	d62cc <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d62c4:	2b0a      	cmp	r3, #10
   d62c6:	d011      	beq.n	d62ec <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d62c8:	69f6      	ldr	r6, [r6, #28]
   d62ca:	e7f4      	b.n	d62b6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d62cc:	f1b8 0f00 	cmp.w	r8, #0
   d62d0:	d00a      	beq.n	d62e8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d62d2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d62d4:	a806      	add	r0, sp, #24
   d62d6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d62d8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d62da:	f7ff fdcd 	bl	d5e78 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d62de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d62e0:	1d3c      	adds	r4, r7, #4
   d62e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d62e4:	682b      	ldr	r3, [r5, #0]
   d62e6:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d62e8:	4641      	mov	r1, r8
   d62ea:	e7ed      	b.n	d62c8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d62ec:	f1b9 0f00 	cmp.w	r9, #0
   d62f0:	d101      	bne.n	d62f6 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d62f2:	4649      	mov	r1, r9
   d62f4:	e7e8      	b.n	d62c8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d62f6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d62f8:	2210      	movs	r2, #16
   d62fa:	a801      	add	r0, sp, #4
   d62fc:	f000 ffaa 	bl	d7254 <memset>
                    a.v = 6;
   d6300:	2306      	movs	r3, #6
   d6302:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6306:	ad01      	add	r5, sp, #4
   d6308:	f104 0308 	add.w	r3, r4, #8
   d630c:	3418      	adds	r4, #24
   d630e:	6818      	ldr	r0, [r3, #0]
   d6310:	6859      	ldr	r1, [r3, #4]
   d6312:	462a      	mov	r2, r5
   d6314:	c203      	stmia	r2!, {r0, r1}
   d6316:	3308      	adds	r3, #8
   d6318:	42a3      	cmp	r3, r4
   d631a:	4615      	mov	r5, r2
   d631c:	d1f7      	bne.n	d630e <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d631e:	a901      	add	r1, sp, #4
   d6320:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6322:	ad07      	add	r5, sp, #28
   d6324:	f7ff fd88 	bl	d5e38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d632a:	1d3c      	adds	r4, r7, #4
   d632c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d632e:	682b      	ldr	r3, [r5, #0]
   d6330:	7023      	strb	r3, [r4, #0]
   d6332:	e7de      	b.n	d62f2 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6334:	9800      	ldr	r0, [sp, #0]
   d6336:	f7fe fcff 	bl	d4d38 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d633a:	4638      	mov	r0, r7
   d633c:	b015      	add	sp, #84	; 0x54
   d633e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6344 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6344:	4b02      	ldr	r3, [pc, #8]	; (d6350 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6346:	4a03      	ldr	r2, [pc, #12]	; (d6354 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6348:	601a      	str	r2, [r3, #0]
   d634a:	2200      	movs	r2, #0
   d634c:	605a      	str	r2, [r3, #4]

} // spark
   d634e:	4770      	bx	lr
   d6350:	2003e7c0 	.word	0x2003e7c0
   d6354:	000d7680 	.word	0x000d7680

000d6358 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6358:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d635a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d635c:	d902      	bls.n	d6364 <pinAvailable+0xc>
    return false;
   d635e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6360:	b002      	add	sp, #8
   d6362:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6364:	f1a0 030b 	sub.w	r3, r0, #11
   d6368:	2b02      	cmp	r3, #2
   d636a:	d81a      	bhi.n	d63a2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d636c:	4c17      	ldr	r4, [pc, #92]	; (d63cc <pinAvailable+0x74>)
   d636e:	7821      	ldrb	r1, [r4, #0]
   d6370:	f3bf 8f5b 	dmb	ish
   d6374:	f011 0101 	ands.w	r1, r1, #1
   d6378:	d10b      	bne.n	d6392 <pinAvailable+0x3a>
   d637a:	4620      	mov	r0, r4
   d637c:	9101      	str	r1, [sp, #4]
   d637e:	f7fd fe90 	bl	d40a2 <__cxa_guard_acquire>
   d6382:	9901      	ldr	r1, [sp, #4]
   d6384:	b128      	cbz	r0, d6392 <pinAvailable+0x3a>
   d6386:	4812      	ldr	r0, [pc, #72]	; (d63d0 <pinAvailable+0x78>)
   d6388:	f7fe ff18 	bl	d51bc <_ZN8SPIClassC1E19hal_spi_interface_t>
   d638c:	4620      	mov	r0, r4
   d638e:	f7fd fe8d 	bl	d40ac <__cxa_guard_release>
   d6392:	4b0f      	ldr	r3, [pc, #60]	; (d63d0 <pinAvailable+0x78>)
   d6394:	7818      	ldrb	r0, [r3, #0]
   d6396:	f7fe fdbf 	bl	d4f18 <hal_spi_is_enabled>
   d639a:	2800      	cmp	r0, #0
   d639c:	d1df      	bne.n	d635e <pinAvailable+0x6>
  return true; // 'pin' is available
   d639e:	2001      	movs	r0, #1
   d63a0:	e7de      	b.n	d6360 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d63a2:	2801      	cmp	r0, #1
   d63a4:	d809      	bhi.n	d63ba <pinAvailable+0x62>
   d63a6:	f000 f881 	bl	d64ac <_Z19__fetch_global_Wirev>
   d63aa:	2100      	movs	r1, #0
   d63ac:	7c00      	ldrb	r0, [r0, #16]
   d63ae:	f7fe fd9b 	bl	d4ee8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d63b2:	f080 0001 	eor.w	r0, r0, #1
   d63b6:	b2c0      	uxtb	r0, r0
   d63b8:	e7d2      	b.n	d6360 <pinAvailable+0x8>
   d63ba:	3809      	subs	r0, #9
   d63bc:	2801      	cmp	r0, #1
   d63be:	d8ee      	bhi.n	d639e <pinAvailable+0x46>
   d63c0:	f7ff fe98 	bl	d60f4 <_Z22__fetch_global_Serial1v>
   d63c4:	7c00      	ldrb	r0, [r0, #16]
   d63c6:	f7fe fd4f 	bl	d4e68 <hal_usart_is_enabled>
   d63ca:	e7f2      	b.n	d63b2 <pinAvailable+0x5a>
   d63cc:	2003e7c8 	.word	0x2003e7c8
   d63d0:	2003e7cc 	.word	0x2003e7cc

000d63d4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d63d4:	2823      	cmp	r0, #35	; 0x23
{
   d63d6:	b538      	push	{r3, r4, r5, lr}
   d63d8:	4604      	mov	r4, r0
   d63da:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d63dc:	d80a      	bhi.n	d63f4 <pinMode+0x20>
   d63de:	29ff      	cmp	r1, #255	; 0xff
   d63e0:	d008      	beq.n	d63f4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d63e2:	f7ff ffb9 	bl	d6358 <pinAvailable>
   d63e6:	b128      	cbz	r0, d63f4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d63e8:	4629      	mov	r1, r5
   d63ea:	4620      	mov	r0, r4
}
   d63ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d63f0:	f7fe bcba 	b.w	d4d68 <HAL_Pin_Mode>
}
   d63f4:	bd38      	pop	{r3, r4, r5, pc}

000d63f6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d63f6:	b538      	push	{r3, r4, r5, lr}
   d63f8:	4604      	mov	r4, r0
   d63fa:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d63fc:	f7fe fcbc 	bl	d4d78 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6400:	28ff      	cmp	r0, #255	; 0xff
   d6402:	d010      	beq.n	d6426 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d6404:	2806      	cmp	r0, #6
   d6406:	d804      	bhi.n	d6412 <digitalWrite+0x1c>
   d6408:	234d      	movs	r3, #77	; 0x4d
   d640a:	fa23 f000 	lsr.w	r0, r3, r0
   d640e:	07c3      	lsls	r3, r0, #31
   d6410:	d409      	bmi.n	d6426 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6412:	4620      	mov	r0, r4
   d6414:	f7ff ffa0 	bl	d6358 <pinAvailable>
   d6418:	b128      	cbz	r0, d6426 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d641a:	4629      	mov	r1, r5
   d641c:	4620      	mov	r0, r4
}
   d641e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d6422:	f7fe bcb1 	b.w	d4d88 <HAL_GPIO_Write>
}
   d6426:	bd38      	pop	{r3, r4, r5, pc}

000d6428 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6428:	b510      	push	{r4, lr}
   d642a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d642c:	f7fe fca4 	bl	d4d78 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d6430:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d6432:	b2db      	uxtb	r3, r3
   d6434:	2b01      	cmp	r3, #1
   d6436:	d908      	bls.n	d644a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6438:	4620      	mov	r0, r4
   d643a:	f7ff ff8d 	bl	d6358 <pinAvailable>
   d643e:	b120      	cbz	r0, d644a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6440:	4620      	mov	r0, r4
}
   d6442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d6446:	f7fe bca7 	b.w	d4d98 <HAL_GPIO_Read>
}
   d644a:	2000      	movs	r0, #0
   d644c:	bd10      	pop	{r4, pc}

000d644e <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d644e:	280d      	cmp	r0, #13
{
   d6450:	b510      	push	{r4, lr}
   d6452:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d6454:	bf9c      	itt	ls
   d6456:	340e      	addls	r4, #14
   d6458:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d645a:	4620      	mov	r0, r4
   d645c:	f7ff ff7c 	bl	d6358 <pinAvailable>
   d6460:	b150      	cbz	r0, d6478 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6462:	2103      	movs	r1, #3
   d6464:	4620      	mov	r0, r4
   d6466:	f7fe fc77 	bl	d4d58 <HAL_Validate_Pin_Function>
   d646a:	2803      	cmp	r0, #3
   d646c:	d104      	bne.n	d6478 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d646e:	4620      	mov	r0, r4
}
   d6470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d6474:	f7fe bc98 	b.w	d4da8 <hal_adc_read>
}
   d6478:	2000      	movs	r0, #0
   d647a:	bd10      	pop	{r4, pc}

000d647c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d647c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d647e:	2300      	movs	r3, #0
   d6480:	2520      	movs	r5, #32
   d6482:	8043      	strh	r3, [r0, #2]
   d6484:	2314      	movs	r3, #20
{
   d6486:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6488:	8003      	strh	r3, [r0, #0]
   d648a:	6085      	str	r5, [r0, #8]
   d648c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d648e:	4906      	ldr	r1, [pc, #24]	; (d64a8 <_Z17acquireWireBufferv+0x2c>)
   d6490:	4628      	mov	r0, r5
   d6492:	f000 f83a 	bl	d650a <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6496:	4904      	ldr	r1, [pc, #16]	; (d64a8 <_Z17acquireWireBufferv+0x2c>)
	};
   d6498:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d649a:	4628      	mov	r0, r5
   d649c:	f000 f835 	bl	d650a <_ZnajRKSt9nothrow_t>
	};
   d64a0:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d64a2:	4620      	mov	r0, r4
   d64a4:	bd38      	pop	{r3, r4, r5, pc}
   d64a6:	bf00      	nop
   d64a8:	000d76b4 	.word	0x000d76b4

000d64ac <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d64ac:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d64ae:	4d0f      	ldr	r5, [pc, #60]	; (d64ec <_Z19__fetch_global_Wirev+0x40>)
   d64b0:	7829      	ldrb	r1, [r5, #0]
   d64b2:	f3bf 8f5b 	dmb	ish
   d64b6:	f011 0401 	ands.w	r4, r1, #1
{
   d64ba:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d64bc:	d113      	bne.n	d64e6 <_Z19__fetch_global_Wirev+0x3a>
   d64be:	4628      	mov	r0, r5
   d64c0:	f7fd fdef 	bl	d40a2 <__cxa_guard_acquire>
   d64c4:	b178      	cbz	r0, d64e6 <_Z19__fetch_global_Wirev+0x3a>
   d64c6:	a801      	add	r0, sp, #4
   d64c8:	f7ff ffd8 	bl	d647c <_Z17acquireWireBufferv>
   d64cc:	aa01      	add	r2, sp, #4
   d64ce:	4621      	mov	r1, r4
   d64d0:	4807      	ldr	r0, [pc, #28]	; (d64f0 <_Z19__fetch_global_Wirev+0x44>)
   d64d2:	f7ff fe79 	bl	d61c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d64d6:	4628      	mov	r0, r5
   d64d8:	f7fd fde8 	bl	d40ac <__cxa_guard_release>
   d64dc:	4a05      	ldr	r2, [pc, #20]	; (d64f4 <_Z19__fetch_global_Wirev+0x48>)
   d64de:	4906      	ldr	r1, [pc, #24]	; (d64f8 <_Z19__fetch_global_Wirev+0x4c>)
   d64e0:	4803      	ldr	r0, [pc, #12]	; (d64f0 <_Z19__fetch_global_Wirev+0x44>)
   d64e2:	f000 f80b 	bl	d64fc <__aeabi_atexit>
	return wire;
}
   d64e6:	4802      	ldr	r0, [pc, #8]	; (d64f0 <_Z19__fetch_global_Wirev+0x44>)
   d64e8:	b007      	add	sp, #28
   d64ea:	bd30      	pop	{r4, r5, pc}
   d64ec:	2003e7d8 	.word	0x2003e7d8
   d64f0:	2003e7dc 	.word	0x2003e7dc
   d64f4:	2003e54c 	.word	0x2003e54c
   d64f8:	000d6171 	.word	0x000d6171

000d64fc <__aeabi_atexit>:
   d64fc:	460b      	mov	r3, r1
   d64fe:	4601      	mov	r1, r0
   d6500:	4618      	mov	r0, r3
   d6502:	f000 be71 	b.w	d71e8 <__cxa_atexit>

000d6506 <_ZdlPvj>:
   d6506:	f7fd bdca 	b.w	d409e <_ZdlPv>

000d650a <_ZnajRKSt9nothrow_t>:
   d650a:	f7fd bdc6 	b.w	d409a <_Znaj>

000d650e <_ZSt17__throw_bad_allocv>:
   d650e:	b508      	push	{r3, lr}
   d6510:	f7fe fdfe 	bl	d5110 <abort>

000d6514 <_ZSt20__throw_length_errorPKc>:
   d6514:	b508      	push	{r3, lr}
   d6516:	f7fe fdfb 	bl	d5110 <abort>

000d651a <_ZSt25__throw_bad_function_callv>:
   d651a:	b508      	push	{r3, lr}
   d651c:	f7fe fdf8 	bl	d5110 <abort>

000d6520 <__aeabi_drsub>:
   d6520:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6524:	e002      	b.n	d652c <__adddf3>
   d6526:	bf00      	nop

000d6528 <__aeabi_dsub>:
   d6528:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d652c <__adddf3>:
   d652c:	b530      	push	{r4, r5, lr}
   d652e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6532:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6536:	ea94 0f05 	teq	r4, r5
   d653a:	bf08      	it	eq
   d653c:	ea90 0f02 	teqeq	r0, r2
   d6540:	bf1f      	itttt	ne
   d6542:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6546:	ea55 0c02 	orrsne.w	ip, r5, r2
   d654a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d654e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6552:	f000 80e2 	beq.w	d671a <__adddf3+0x1ee>
   d6556:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d655a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d655e:	bfb8      	it	lt
   d6560:	426d      	neglt	r5, r5
   d6562:	dd0c      	ble.n	d657e <__adddf3+0x52>
   d6564:	442c      	add	r4, r5
   d6566:	ea80 0202 	eor.w	r2, r0, r2
   d656a:	ea81 0303 	eor.w	r3, r1, r3
   d656e:	ea82 0000 	eor.w	r0, r2, r0
   d6572:	ea83 0101 	eor.w	r1, r3, r1
   d6576:	ea80 0202 	eor.w	r2, r0, r2
   d657a:	ea81 0303 	eor.w	r3, r1, r3
   d657e:	2d36      	cmp	r5, #54	; 0x36
   d6580:	bf88      	it	hi
   d6582:	bd30      	pophi	{r4, r5, pc}
   d6584:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6588:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d658c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6590:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6594:	d002      	beq.n	d659c <__adddf3+0x70>
   d6596:	4240      	negs	r0, r0
   d6598:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d659c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d65a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d65a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d65a8:	d002      	beq.n	d65b0 <__adddf3+0x84>
   d65aa:	4252      	negs	r2, r2
   d65ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d65b0:	ea94 0f05 	teq	r4, r5
   d65b4:	f000 80a7 	beq.w	d6706 <__adddf3+0x1da>
   d65b8:	f1a4 0401 	sub.w	r4, r4, #1
   d65bc:	f1d5 0e20 	rsbs	lr, r5, #32
   d65c0:	db0d      	blt.n	d65de <__adddf3+0xb2>
   d65c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   d65c6:	fa22 f205 	lsr.w	r2, r2, r5
   d65ca:	1880      	adds	r0, r0, r2
   d65cc:	f141 0100 	adc.w	r1, r1, #0
   d65d0:	fa03 f20e 	lsl.w	r2, r3, lr
   d65d4:	1880      	adds	r0, r0, r2
   d65d6:	fa43 f305 	asr.w	r3, r3, r5
   d65da:	4159      	adcs	r1, r3
   d65dc:	e00e      	b.n	d65fc <__adddf3+0xd0>
   d65de:	f1a5 0520 	sub.w	r5, r5, #32
   d65e2:	f10e 0e20 	add.w	lr, lr, #32
   d65e6:	2a01      	cmp	r2, #1
   d65e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d65ec:	bf28      	it	cs
   d65ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   d65f2:	fa43 f305 	asr.w	r3, r3, r5
   d65f6:	18c0      	adds	r0, r0, r3
   d65f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d65fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6600:	d507      	bpl.n	d6612 <__adddf3+0xe6>
   d6602:	f04f 0e00 	mov.w	lr, #0
   d6606:	f1dc 0c00 	rsbs	ip, ip, #0
   d660a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d660e:	eb6e 0101 	sbc.w	r1, lr, r1
   d6612:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6616:	d31b      	bcc.n	d6650 <__adddf3+0x124>
   d6618:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d661c:	d30c      	bcc.n	d6638 <__adddf3+0x10c>
   d661e:	0849      	lsrs	r1, r1, #1
   d6620:	ea5f 0030 	movs.w	r0, r0, rrx
   d6624:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6628:	f104 0401 	add.w	r4, r4, #1
   d662c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6630:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6634:	f080 809a 	bcs.w	d676c <__adddf3+0x240>
   d6638:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d663c:	bf08      	it	eq
   d663e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6642:	f150 0000 	adcs.w	r0, r0, #0
   d6646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d664a:	ea41 0105 	orr.w	r1, r1, r5
   d664e:	bd30      	pop	{r4, r5, pc}
   d6650:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6654:	4140      	adcs	r0, r0
   d6656:	eb41 0101 	adc.w	r1, r1, r1
   d665a:	3c01      	subs	r4, #1
   d665c:	bf28      	it	cs
   d665e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d6662:	d2e9      	bcs.n	d6638 <__adddf3+0x10c>
   d6664:	f091 0f00 	teq	r1, #0
   d6668:	bf04      	itt	eq
   d666a:	4601      	moveq	r1, r0
   d666c:	2000      	moveq	r0, #0
   d666e:	fab1 f381 	clz	r3, r1
   d6672:	bf08      	it	eq
   d6674:	3320      	addeq	r3, #32
   d6676:	f1a3 030b 	sub.w	r3, r3, #11
   d667a:	f1b3 0220 	subs.w	r2, r3, #32
   d667e:	da0c      	bge.n	d669a <__adddf3+0x16e>
   d6680:	320c      	adds	r2, #12
   d6682:	dd08      	ble.n	d6696 <__adddf3+0x16a>
   d6684:	f102 0c14 	add.w	ip, r2, #20
   d6688:	f1c2 020c 	rsb	r2, r2, #12
   d668c:	fa01 f00c 	lsl.w	r0, r1, ip
   d6690:	fa21 f102 	lsr.w	r1, r1, r2
   d6694:	e00c      	b.n	d66b0 <__adddf3+0x184>
   d6696:	f102 0214 	add.w	r2, r2, #20
   d669a:	bfd8      	it	le
   d669c:	f1c2 0c20 	rsble	ip, r2, #32
   d66a0:	fa01 f102 	lsl.w	r1, r1, r2
   d66a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d66a8:	bfdc      	itt	le
   d66aa:	ea41 010c 	orrle.w	r1, r1, ip
   d66ae:	4090      	lslle	r0, r2
   d66b0:	1ae4      	subs	r4, r4, r3
   d66b2:	bfa2      	ittt	ge
   d66b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d66b8:	4329      	orrge	r1, r5
   d66ba:	bd30      	popge	{r4, r5, pc}
   d66bc:	ea6f 0404 	mvn.w	r4, r4
   d66c0:	3c1f      	subs	r4, #31
   d66c2:	da1c      	bge.n	d66fe <__adddf3+0x1d2>
   d66c4:	340c      	adds	r4, #12
   d66c6:	dc0e      	bgt.n	d66e6 <__adddf3+0x1ba>
   d66c8:	f104 0414 	add.w	r4, r4, #20
   d66cc:	f1c4 0220 	rsb	r2, r4, #32
   d66d0:	fa20 f004 	lsr.w	r0, r0, r4
   d66d4:	fa01 f302 	lsl.w	r3, r1, r2
   d66d8:	ea40 0003 	orr.w	r0, r0, r3
   d66dc:	fa21 f304 	lsr.w	r3, r1, r4
   d66e0:	ea45 0103 	orr.w	r1, r5, r3
   d66e4:	bd30      	pop	{r4, r5, pc}
   d66e6:	f1c4 040c 	rsb	r4, r4, #12
   d66ea:	f1c4 0220 	rsb	r2, r4, #32
   d66ee:	fa20 f002 	lsr.w	r0, r0, r2
   d66f2:	fa01 f304 	lsl.w	r3, r1, r4
   d66f6:	ea40 0003 	orr.w	r0, r0, r3
   d66fa:	4629      	mov	r1, r5
   d66fc:	bd30      	pop	{r4, r5, pc}
   d66fe:	fa21 f004 	lsr.w	r0, r1, r4
   d6702:	4629      	mov	r1, r5
   d6704:	bd30      	pop	{r4, r5, pc}
   d6706:	f094 0f00 	teq	r4, #0
   d670a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d670e:	bf06      	itte	eq
   d6710:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6714:	3401      	addeq	r4, #1
   d6716:	3d01      	subne	r5, #1
   d6718:	e74e      	b.n	d65b8 <__adddf3+0x8c>
   d671a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d671e:	bf18      	it	ne
   d6720:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6724:	d029      	beq.n	d677a <__adddf3+0x24e>
   d6726:	ea94 0f05 	teq	r4, r5
   d672a:	bf08      	it	eq
   d672c:	ea90 0f02 	teqeq	r0, r2
   d6730:	d005      	beq.n	d673e <__adddf3+0x212>
   d6732:	ea54 0c00 	orrs.w	ip, r4, r0
   d6736:	bf04      	itt	eq
   d6738:	4619      	moveq	r1, r3
   d673a:	4610      	moveq	r0, r2
   d673c:	bd30      	pop	{r4, r5, pc}
   d673e:	ea91 0f03 	teq	r1, r3
   d6742:	bf1e      	ittt	ne
   d6744:	2100      	movne	r1, #0
   d6746:	2000      	movne	r0, #0
   d6748:	bd30      	popne	{r4, r5, pc}
   d674a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d674e:	d105      	bne.n	d675c <__adddf3+0x230>
   d6750:	0040      	lsls	r0, r0, #1
   d6752:	4149      	adcs	r1, r1
   d6754:	bf28      	it	cs
   d6756:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d675a:	bd30      	pop	{r4, r5, pc}
   d675c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6760:	bf3c      	itt	cc
   d6762:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6766:	bd30      	popcc	{r4, r5, pc}
   d6768:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d676c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6770:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6774:	f04f 0000 	mov.w	r0, #0
   d6778:	bd30      	pop	{r4, r5, pc}
   d677a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d677e:	bf1a      	itte	ne
   d6780:	4619      	movne	r1, r3
   d6782:	4610      	movne	r0, r2
   d6784:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6788:	bf1c      	itt	ne
   d678a:	460b      	movne	r3, r1
   d678c:	4602      	movne	r2, r0
   d678e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6792:	bf06      	itte	eq
   d6794:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6798:	ea91 0f03 	teqeq	r1, r3
   d679c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d67a0:	bd30      	pop	{r4, r5, pc}
   d67a2:	bf00      	nop

000d67a4 <__aeabi_ui2d>:
   d67a4:	f090 0f00 	teq	r0, #0
   d67a8:	bf04      	itt	eq
   d67aa:	2100      	moveq	r1, #0
   d67ac:	4770      	bxeq	lr
   d67ae:	b530      	push	{r4, r5, lr}
   d67b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d67b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d67b8:	f04f 0500 	mov.w	r5, #0
   d67bc:	f04f 0100 	mov.w	r1, #0
   d67c0:	e750      	b.n	d6664 <__adddf3+0x138>
   d67c2:	bf00      	nop

000d67c4 <__aeabi_i2d>:
   d67c4:	f090 0f00 	teq	r0, #0
   d67c8:	bf04      	itt	eq
   d67ca:	2100      	moveq	r1, #0
   d67cc:	4770      	bxeq	lr
   d67ce:	b530      	push	{r4, r5, lr}
   d67d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d67d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d67d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d67dc:	bf48      	it	mi
   d67de:	4240      	negmi	r0, r0
   d67e0:	f04f 0100 	mov.w	r1, #0
   d67e4:	e73e      	b.n	d6664 <__adddf3+0x138>
   d67e6:	bf00      	nop

000d67e8 <__aeabi_f2d>:
   d67e8:	0042      	lsls	r2, r0, #1
   d67ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d67ee:	ea4f 0131 	mov.w	r1, r1, rrx
   d67f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d67f6:	bf1f      	itttt	ne
   d67f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d67fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6800:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6804:	4770      	bxne	lr
   d6806:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d680a:	bf08      	it	eq
   d680c:	4770      	bxeq	lr
   d680e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d6812:	bf04      	itt	eq
   d6814:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d6818:	4770      	bxeq	lr
   d681a:	b530      	push	{r4, r5, lr}
   d681c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6820:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6824:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6828:	e71c      	b.n	d6664 <__adddf3+0x138>
   d682a:	bf00      	nop

000d682c <__aeabi_ul2d>:
   d682c:	ea50 0201 	orrs.w	r2, r0, r1
   d6830:	bf08      	it	eq
   d6832:	4770      	bxeq	lr
   d6834:	b530      	push	{r4, r5, lr}
   d6836:	f04f 0500 	mov.w	r5, #0
   d683a:	e00a      	b.n	d6852 <__aeabi_l2d+0x16>

000d683c <__aeabi_l2d>:
   d683c:	ea50 0201 	orrs.w	r2, r0, r1
   d6840:	bf08      	it	eq
   d6842:	4770      	bxeq	lr
   d6844:	b530      	push	{r4, r5, lr}
   d6846:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d684a:	d502      	bpl.n	d6852 <__aeabi_l2d+0x16>
   d684c:	4240      	negs	r0, r0
   d684e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6852:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6856:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d685a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d685e:	f43f aed8 	beq.w	d6612 <__adddf3+0xe6>
   d6862:	f04f 0203 	mov.w	r2, #3
   d6866:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d686a:	bf18      	it	ne
   d686c:	3203      	addne	r2, #3
   d686e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6872:	bf18      	it	ne
   d6874:	3203      	addne	r2, #3
   d6876:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d687a:	f1c2 0320 	rsb	r3, r2, #32
   d687e:	fa00 fc03 	lsl.w	ip, r0, r3
   d6882:	fa20 f002 	lsr.w	r0, r0, r2
   d6886:	fa01 fe03 	lsl.w	lr, r1, r3
   d688a:	ea40 000e 	orr.w	r0, r0, lr
   d688e:	fa21 f102 	lsr.w	r1, r1, r2
   d6892:	4414      	add	r4, r2
   d6894:	e6bd      	b.n	d6612 <__adddf3+0xe6>
   d6896:	bf00      	nop

000d6898 <__aeabi_dmul>:
   d6898:	b570      	push	{r4, r5, r6, lr}
   d689a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d689e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d68a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d68a6:	bf1d      	ittte	ne
   d68a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d68ac:	ea94 0f0c 	teqne	r4, ip
   d68b0:	ea95 0f0c 	teqne	r5, ip
   d68b4:	f000 f8de 	bleq	d6a74 <__aeabi_dmul+0x1dc>
   d68b8:	442c      	add	r4, r5
   d68ba:	ea81 0603 	eor.w	r6, r1, r3
   d68be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d68c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d68c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d68ca:	bf18      	it	ne
   d68cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d68d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d68d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d68d8:	d038      	beq.n	d694c <__aeabi_dmul+0xb4>
   d68da:	fba0 ce02 	umull	ip, lr, r0, r2
   d68de:	f04f 0500 	mov.w	r5, #0
   d68e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d68e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d68ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   d68ee:	f04f 0600 	mov.w	r6, #0
   d68f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d68f6:	f09c 0f00 	teq	ip, #0
   d68fa:	bf18      	it	ne
   d68fc:	f04e 0e01 	orrne.w	lr, lr, #1
   d6900:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6904:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6908:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d690c:	d204      	bcs.n	d6918 <__aeabi_dmul+0x80>
   d690e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6912:	416d      	adcs	r5, r5
   d6914:	eb46 0606 	adc.w	r6, r6, r6
   d6918:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d691c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6920:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6924:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6928:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d692c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6930:	bf88      	it	hi
   d6932:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6936:	d81e      	bhi.n	d6976 <__aeabi_dmul+0xde>
   d6938:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d693c:	bf08      	it	eq
   d693e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6942:	f150 0000 	adcs.w	r0, r0, #0
   d6946:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d694a:	bd70      	pop	{r4, r5, r6, pc}
   d694c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6950:	ea46 0101 	orr.w	r1, r6, r1
   d6954:	ea40 0002 	orr.w	r0, r0, r2
   d6958:	ea81 0103 	eor.w	r1, r1, r3
   d695c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6960:	bfc2      	ittt	gt
   d6962:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6966:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d696a:	bd70      	popgt	{r4, r5, r6, pc}
   d696c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6970:	f04f 0e00 	mov.w	lr, #0
   d6974:	3c01      	subs	r4, #1
   d6976:	f300 80ab 	bgt.w	d6ad0 <__aeabi_dmul+0x238>
   d697a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d697e:	bfde      	ittt	le
   d6980:	2000      	movle	r0, #0
   d6982:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6986:	bd70      	pople	{r4, r5, r6, pc}
   d6988:	f1c4 0400 	rsb	r4, r4, #0
   d698c:	3c20      	subs	r4, #32
   d698e:	da35      	bge.n	d69fc <__aeabi_dmul+0x164>
   d6990:	340c      	adds	r4, #12
   d6992:	dc1b      	bgt.n	d69cc <__aeabi_dmul+0x134>
   d6994:	f104 0414 	add.w	r4, r4, #20
   d6998:	f1c4 0520 	rsb	r5, r4, #32
   d699c:	fa00 f305 	lsl.w	r3, r0, r5
   d69a0:	fa20 f004 	lsr.w	r0, r0, r4
   d69a4:	fa01 f205 	lsl.w	r2, r1, r5
   d69a8:	ea40 0002 	orr.w	r0, r0, r2
   d69ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d69b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d69b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d69b8:	fa21 f604 	lsr.w	r6, r1, r4
   d69bc:	eb42 0106 	adc.w	r1, r2, r6
   d69c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d69c4:	bf08      	it	eq
   d69c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d69ca:	bd70      	pop	{r4, r5, r6, pc}
   d69cc:	f1c4 040c 	rsb	r4, r4, #12
   d69d0:	f1c4 0520 	rsb	r5, r4, #32
   d69d4:	fa00 f304 	lsl.w	r3, r0, r4
   d69d8:	fa20 f005 	lsr.w	r0, r0, r5
   d69dc:	fa01 f204 	lsl.w	r2, r1, r4
   d69e0:	ea40 0002 	orr.w	r0, r0, r2
   d69e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d69e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d69ec:	f141 0100 	adc.w	r1, r1, #0
   d69f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d69f4:	bf08      	it	eq
   d69f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d69fa:	bd70      	pop	{r4, r5, r6, pc}
   d69fc:	f1c4 0520 	rsb	r5, r4, #32
   d6a00:	fa00 f205 	lsl.w	r2, r0, r5
   d6a04:	ea4e 0e02 	orr.w	lr, lr, r2
   d6a08:	fa20 f304 	lsr.w	r3, r0, r4
   d6a0c:	fa01 f205 	lsl.w	r2, r1, r5
   d6a10:	ea43 0302 	orr.w	r3, r3, r2
   d6a14:	fa21 f004 	lsr.w	r0, r1, r4
   d6a18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6a1c:	fa21 f204 	lsr.w	r2, r1, r4
   d6a20:	ea20 0002 	bic.w	r0, r0, r2
   d6a24:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6a28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6a2c:	bf08      	it	eq
   d6a2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6a32:	bd70      	pop	{r4, r5, r6, pc}
   d6a34:	f094 0f00 	teq	r4, #0
   d6a38:	d10f      	bne.n	d6a5a <__aeabi_dmul+0x1c2>
   d6a3a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6a3e:	0040      	lsls	r0, r0, #1
   d6a40:	eb41 0101 	adc.w	r1, r1, r1
   d6a44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6a48:	bf08      	it	eq
   d6a4a:	3c01      	subeq	r4, #1
   d6a4c:	d0f7      	beq.n	d6a3e <__aeabi_dmul+0x1a6>
   d6a4e:	ea41 0106 	orr.w	r1, r1, r6
   d6a52:	f095 0f00 	teq	r5, #0
   d6a56:	bf18      	it	ne
   d6a58:	4770      	bxne	lr
   d6a5a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6a5e:	0052      	lsls	r2, r2, #1
   d6a60:	eb43 0303 	adc.w	r3, r3, r3
   d6a64:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6a68:	bf08      	it	eq
   d6a6a:	3d01      	subeq	r5, #1
   d6a6c:	d0f7      	beq.n	d6a5e <__aeabi_dmul+0x1c6>
   d6a6e:	ea43 0306 	orr.w	r3, r3, r6
   d6a72:	4770      	bx	lr
   d6a74:	ea94 0f0c 	teq	r4, ip
   d6a78:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6a7c:	bf18      	it	ne
   d6a7e:	ea95 0f0c 	teqne	r5, ip
   d6a82:	d00c      	beq.n	d6a9e <__aeabi_dmul+0x206>
   d6a84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6a88:	bf18      	it	ne
   d6a8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6a8e:	d1d1      	bne.n	d6a34 <__aeabi_dmul+0x19c>
   d6a90:	ea81 0103 	eor.w	r1, r1, r3
   d6a94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6a98:	f04f 0000 	mov.w	r0, #0
   d6a9c:	bd70      	pop	{r4, r5, r6, pc}
   d6a9e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6aa2:	bf06      	itte	eq
   d6aa4:	4610      	moveq	r0, r2
   d6aa6:	4619      	moveq	r1, r3
   d6aa8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6aac:	d019      	beq.n	d6ae2 <__aeabi_dmul+0x24a>
   d6aae:	ea94 0f0c 	teq	r4, ip
   d6ab2:	d102      	bne.n	d6aba <__aeabi_dmul+0x222>
   d6ab4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6ab8:	d113      	bne.n	d6ae2 <__aeabi_dmul+0x24a>
   d6aba:	ea95 0f0c 	teq	r5, ip
   d6abe:	d105      	bne.n	d6acc <__aeabi_dmul+0x234>
   d6ac0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6ac4:	bf1c      	itt	ne
   d6ac6:	4610      	movne	r0, r2
   d6ac8:	4619      	movne	r1, r3
   d6aca:	d10a      	bne.n	d6ae2 <__aeabi_dmul+0x24a>
   d6acc:	ea81 0103 	eor.w	r1, r1, r3
   d6ad0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6ad4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6ad8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6adc:	f04f 0000 	mov.w	r0, #0
   d6ae0:	bd70      	pop	{r4, r5, r6, pc}
   d6ae2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6ae6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6aea:	bd70      	pop	{r4, r5, r6, pc}

000d6aec <__aeabi_ddiv>:
   d6aec:	b570      	push	{r4, r5, r6, lr}
   d6aee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6af2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6af6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6afa:	bf1d      	ittte	ne
   d6afc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6b00:	ea94 0f0c 	teqne	r4, ip
   d6b04:	ea95 0f0c 	teqne	r5, ip
   d6b08:	f000 f8a7 	bleq	d6c5a <__aeabi_ddiv+0x16e>
   d6b0c:	eba4 0405 	sub.w	r4, r4, r5
   d6b10:	ea81 0e03 	eor.w	lr, r1, r3
   d6b14:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6b18:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6b1c:	f000 8088 	beq.w	d6c30 <__aeabi_ddiv+0x144>
   d6b20:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6b24:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6b28:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6b2c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6b30:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6b34:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6b38:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6b3c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6b40:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6b44:	429d      	cmp	r5, r3
   d6b46:	bf08      	it	eq
   d6b48:	4296      	cmpeq	r6, r2
   d6b4a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6b4e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6b52:	d202      	bcs.n	d6b5a <__aeabi_ddiv+0x6e>
   d6b54:	085b      	lsrs	r3, r3, #1
   d6b56:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b5a:	1ab6      	subs	r6, r6, r2
   d6b5c:	eb65 0503 	sbc.w	r5, r5, r3
   d6b60:	085b      	lsrs	r3, r3, #1
   d6b62:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b66:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6b6a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6b6e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6b72:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6b76:	bf22      	ittt	cs
   d6b78:	1ab6      	subcs	r6, r6, r2
   d6b7a:	4675      	movcs	r5, lr
   d6b7c:	ea40 000c 	orrcs.w	r0, r0, ip
   d6b80:	085b      	lsrs	r3, r3, #1
   d6b82:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b86:	ebb6 0e02 	subs.w	lr, r6, r2
   d6b8a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6b8e:	bf22      	ittt	cs
   d6b90:	1ab6      	subcs	r6, r6, r2
   d6b92:	4675      	movcs	r5, lr
   d6b94:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6b98:	085b      	lsrs	r3, r3, #1
   d6b9a:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b9e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6ba2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6ba6:	bf22      	ittt	cs
   d6ba8:	1ab6      	subcs	r6, r6, r2
   d6baa:	4675      	movcs	r5, lr
   d6bac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6bb0:	085b      	lsrs	r3, r3, #1
   d6bb2:	ea4f 0232 	mov.w	r2, r2, rrx
   d6bb6:	ebb6 0e02 	subs.w	lr, r6, r2
   d6bba:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6bbe:	bf22      	ittt	cs
   d6bc0:	1ab6      	subcs	r6, r6, r2
   d6bc2:	4675      	movcs	r5, lr
   d6bc4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6bc8:	ea55 0e06 	orrs.w	lr, r5, r6
   d6bcc:	d018      	beq.n	d6c00 <__aeabi_ddiv+0x114>
   d6bce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6bd2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6bd6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6bda:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6bde:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6be2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6be6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6bea:	d1c0      	bne.n	d6b6e <__aeabi_ddiv+0x82>
   d6bec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6bf0:	d10b      	bne.n	d6c0a <__aeabi_ddiv+0x11e>
   d6bf2:	ea41 0100 	orr.w	r1, r1, r0
   d6bf6:	f04f 0000 	mov.w	r0, #0
   d6bfa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6bfe:	e7b6      	b.n	d6b6e <__aeabi_ddiv+0x82>
   d6c00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6c04:	bf04      	itt	eq
   d6c06:	4301      	orreq	r1, r0
   d6c08:	2000      	moveq	r0, #0
   d6c0a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6c0e:	bf88      	it	hi
   d6c10:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6c14:	f63f aeaf 	bhi.w	d6976 <__aeabi_dmul+0xde>
   d6c18:	ebb5 0c03 	subs.w	ip, r5, r3
   d6c1c:	bf04      	itt	eq
   d6c1e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6c22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6c26:	f150 0000 	adcs.w	r0, r0, #0
   d6c2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6c2e:	bd70      	pop	{r4, r5, r6, pc}
   d6c30:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6c34:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6c38:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6c3c:	bfc2      	ittt	gt
   d6c3e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6c42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6c46:	bd70      	popgt	{r4, r5, r6, pc}
   d6c48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6c4c:	f04f 0e00 	mov.w	lr, #0
   d6c50:	3c01      	subs	r4, #1
   d6c52:	e690      	b.n	d6976 <__aeabi_dmul+0xde>
   d6c54:	ea45 0e06 	orr.w	lr, r5, r6
   d6c58:	e68d      	b.n	d6976 <__aeabi_dmul+0xde>
   d6c5a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6c5e:	ea94 0f0c 	teq	r4, ip
   d6c62:	bf08      	it	eq
   d6c64:	ea95 0f0c 	teqeq	r5, ip
   d6c68:	f43f af3b 	beq.w	d6ae2 <__aeabi_dmul+0x24a>
   d6c6c:	ea94 0f0c 	teq	r4, ip
   d6c70:	d10a      	bne.n	d6c88 <__aeabi_ddiv+0x19c>
   d6c72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6c76:	f47f af34 	bne.w	d6ae2 <__aeabi_dmul+0x24a>
   d6c7a:	ea95 0f0c 	teq	r5, ip
   d6c7e:	f47f af25 	bne.w	d6acc <__aeabi_dmul+0x234>
   d6c82:	4610      	mov	r0, r2
   d6c84:	4619      	mov	r1, r3
   d6c86:	e72c      	b.n	d6ae2 <__aeabi_dmul+0x24a>
   d6c88:	ea95 0f0c 	teq	r5, ip
   d6c8c:	d106      	bne.n	d6c9c <__aeabi_ddiv+0x1b0>
   d6c8e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6c92:	f43f aefd 	beq.w	d6a90 <__aeabi_dmul+0x1f8>
   d6c96:	4610      	mov	r0, r2
   d6c98:	4619      	mov	r1, r3
   d6c9a:	e722      	b.n	d6ae2 <__aeabi_dmul+0x24a>
   d6c9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6ca0:	bf18      	it	ne
   d6ca2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6ca6:	f47f aec5 	bne.w	d6a34 <__aeabi_dmul+0x19c>
   d6caa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6cae:	f47f af0d 	bne.w	d6acc <__aeabi_dmul+0x234>
   d6cb2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6cb6:	f47f aeeb 	bne.w	d6a90 <__aeabi_dmul+0x1f8>
   d6cba:	e712      	b.n	d6ae2 <__aeabi_dmul+0x24a>

000d6cbc <__gedf2>:
   d6cbc:	f04f 3cff 	mov.w	ip, #4294967295
   d6cc0:	e006      	b.n	d6cd0 <__cmpdf2+0x4>
   d6cc2:	bf00      	nop

000d6cc4 <__ledf2>:
   d6cc4:	f04f 0c01 	mov.w	ip, #1
   d6cc8:	e002      	b.n	d6cd0 <__cmpdf2+0x4>
   d6cca:	bf00      	nop

000d6ccc <__cmpdf2>:
   d6ccc:	f04f 0c01 	mov.w	ip, #1
   d6cd0:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6cd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6cd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6cdc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6ce0:	bf18      	it	ne
   d6ce2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6ce6:	d01b      	beq.n	d6d20 <__cmpdf2+0x54>
   d6ce8:	b001      	add	sp, #4
   d6cea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6cee:	bf0c      	ite	eq
   d6cf0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6cf4:	ea91 0f03 	teqne	r1, r3
   d6cf8:	bf02      	ittt	eq
   d6cfa:	ea90 0f02 	teqeq	r0, r2
   d6cfe:	2000      	moveq	r0, #0
   d6d00:	4770      	bxeq	lr
   d6d02:	f110 0f00 	cmn.w	r0, #0
   d6d06:	ea91 0f03 	teq	r1, r3
   d6d0a:	bf58      	it	pl
   d6d0c:	4299      	cmppl	r1, r3
   d6d0e:	bf08      	it	eq
   d6d10:	4290      	cmpeq	r0, r2
   d6d12:	bf2c      	ite	cs
   d6d14:	17d8      	asrcs	r0, r3, #31
   d6d16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6d1a:	f040 0001 	orr.w	r0, r0, #1
   d6d1e:	4770      	bx	lr
   d6d20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6d24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6d28:	d102      	bne.n	d6d30 <__cmpdf2+0x64>
   d6d2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6d2e:	d107      	bne.n	d6d40 <__cmpdf2+0x74>
   d6d30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6d34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6d38:	d1d6      	bne.n	d6ce8 <__cmpdf2+0x1c>
   d6d3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6d3e:	d0d3      	beq.n	d6ce8 <__cmpdf2+0x1c>
   d6d40:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6d44:	4770      	bx	lr
   d6d46:	bf00      	nop

000d6d48 <__aeabi_cdrcmple>:
   d6d48:	4684      	mov	ip, r0
   d6d4a:	4610      	mov	r0, r2
   d6d4c:	4662      	mov	r2, ip
   d6d4e:	468c      	mov	ip, r1
   d6d50:	4619      	mov	r1, r3
   d6d52:	4663      	mov	r3, ip
   d6d54:	e000      	b.n	d6d58 <__aeabi_cdcmpeq>
   d6d56:	bf00      	nop

000d6d58 <__aeabi_cdcmpeq>:
   d6d58:	b501      	push	{r0, lr}
   d6d5a:	f7ff ffb7 	bl	d6ccc <__cmpdf2>
   d6d5e:	2800      	cmp	r0, #0
   d6d60:	bf48      	it	mi
   d6d62:	f110 0f00 	cmnmi.w	r0, #0
   d6d66:	bd01      	pop	{r0, pc}

000d6d68 <__aeabi_dcmpeq>:
   d6d68:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6d6c:	f7ff fff4 	bl	d6d58 <__aeabi_cdcmpeq>
   d6d70:	bf0c      	ite	eq
   d6d72:	2001      	moveq	r0, #1
   d6d74:	2000      	movne	r0, #0
   d6d76:	f85d fb08 	ldr.w	pc, [sp], #8
   d6d7a:	bf00      	nop

000d6d7c <__aeabi_dcmplt>:
   d6d7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6d80:	f7ff ffea 	bl	d6d58 <__aeabi_cdcmpeq>
   d6d84:	bf34      	ite	cc
   d6d86:	2001      	movcc	r0, #1
   d6d88:	2000      	movcs	r0, #0
   d6d8a:	f85d fb08 	ldr.w	pc, [sp], #8
   d6d8e:	bf00      	nop

000d6d90 <__aeabi_dcmple>:
   d6d90:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6d94:	f7ff ffe0 	bl	d6d58 <__aeabi_cdcmpeq>
   d6d98:	bf94      	ite	ls
   d6d9a:	2001      	movls	r0, #1
   d6d9c:	2000      	movhi	r0, #0
   d6d9e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6da2:	bf00      	nop

000d6da4 <__aeabi_dcmpge>:
   d6da4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6da8:	f7ff ffce 	bl	d6d48 <__aeabi_cdrcmple>
   d6dac:	bf94      	ite	ls
   d6dae:	2001      	movls	r0, #1
   d6db0:	2000      	movhi	r0, #0
   d6db2:	f85d fb08 	ldr.w	pc, [sp], #8
   d6db6:	bf00      	nop

000d6db8 <__aeabi_dcmpgt>:
   d6db8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6dbc:	f7ff ffc4 	bl	d6d48 <__aeabi_cdrcmple>
   d6dc0:	bf34      	ite	cc
   d6dc2:	2001      	movcc	r0, #1
   d6dc4:	2000      	movcs	r0, #0
   d6dc6:	f85d fb08 	ldr.w	pc, [sp], #8
   d6dca:	bf00      	nop

000d6dcc <__aeabi_d2uiz>:
   d6dcc:	004a      	lsls	r2, r1, #1
   d6dce:	d211      	bcs.n	d6df4 <__aeabi_d2uiz+0x28>
   d6dd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6dd4:	d211      	bcs.n	d6dfa <__aeabi_d2uiz+0x2e>
   d6dd6:	d50d      	bpl.n	d6df4 <__aeabi_d2uiz+0x28>
   d6dd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6ddc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6de0:	d40e      	bmi.n	d6e00 <__aeabi_d2uiz+0x34>
   d6de2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6de6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6dea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6dee:	fa23 f002 	lsr.w	r0, r3, r2
   d6df2:	4770      	bx	lr
   d6df4:	f04f 0000 	mov.w	r0, #0
   d6df8:	4770      	bx	lr
   d6dfa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6dfe:	d102      	bne.n	d6e06 <__aeabi_d2uiz+0x3a>
   d6e00:	f04f 30ff 	mov.w	r0, #4294967295
   d6e04:	4770      	bx	lr
   d6e06:	f04f 0000 	mov.w	r0, #0
   d6e0a:	4770      	bx	lr

000d6e0c <__aeabi_d2f>:
   d6e0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6e10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6e14:	bf24      	itt	cs
   d6e16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6e1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6e1e:	d90d      	bls.n	d6e3c <__aeabi_d2f+0x30>
   d6e20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6e24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6e28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6e2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6e30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6e34:	bf08      	it	eq
   d6e36:	f020 0001 	biceq.w	r0, r0, #1
   d6e3a:	4770      	bx	lr
   d6e3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6e40:	d121      	bne.n	d6e86 <__aeabi_d2f+0x7a>
   d6e42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d6e46:	bfbc      	itt	lt
   d6e48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6e4c:	4770      	bxlt	lr
   d6e4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6e52:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6e56:	f1c2 0218 	rsb	r2, r2, #24
   d6e5a:	f1c2 0c20 	rsb	ip, r2, #32
   d6e5e:	fa10 f30c 	lsls.w	r3, r0, ip
   d6e62:	fa20 f002 	lsr.w	r0, r0, r2
   d6e66:	bf18      	it	ne
   d6e68:	f040 0001 	orrne.w	r0, r0, #1
   d6e6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6e70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6e74:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6e78:	ea40 000c 	orr.w	r0, r0, ip
   d6e7c:	fa23 f302 	lsr.w	r3, r3, r2
   d6e80:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6e84:	e7cc      	b.n	d6e20 <__aeabi_d2f+0x14>
   d6e86:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6e8a:	d107      	bne.n	d6e9c <__aeabi_d2f+0x90>
   d6e8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6e90:	bf1e      	ittt	ne
   d6e92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6e96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6e9a:	4770      	bxne	lr
   d6e9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6ea0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6ea4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6ea8:	4770      	bx	lr
   d6eaa:	bf00      	nop

000d6eac <__aeabi_uldivmod>:
   d6eac:	b953      	cbnz	r3, d6ec4 <__aeabi_uldivmod+0x18>
   d6eae:	b94a      	cbnz	r2, d6ec4 <__aeabi_uldivmod+0x18>
   d6eb0:	2900      	cmp	r1, #0
   d6eb2:	bf08      	it	eq
   d6eb4:	2800      	cmpeq	r0, #0
   d6eb6:	bf1c      	itt	ne
   d6eb8:	f04f 31ff 	movne.w	r1, #4294967295
   d6ebc:	f04f 30ff 	movne.w	r0, #4294967295
   d6ec0:	f000 b98c 	b.w	d71dc <__aeabi_idiv0>
   d6ec4:	f1ad 0c08 	sub.w	ip, sp, #8
   d6ec8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d6ecc:	f000 f824 	bl	d6f18 <__udivmoddi4>
   d6ed0:	f8dd e004 	ldr.w	lr, [sp, #4]
   d6ed4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6ed8:	b004      	add	sp, #16
   d6eda:	4770      	bx	lr

000d6edc <__aeabi_d2ulz>:
   d6edc:	b5d0      	push	{r4, r6, r7, lr}
   d6ede:	4b0c      	ldr	r3, [pc, #48]	; (d6f10 <__aeabi_d2ulz+0x34>)
   d6ee0:	2200      	movs	r2, #0
   d6ee2:	4606      	mov	r6, r0
   d6ee4:	460f      	mov	r7, r1
   d6ee6:	f7ff fcd7 	bl	d6898 <__aeabi_dmul>
   d6eea:	f7ff ff6f 	bl	d6dcc <__aeabi_d2uiz>
   d6eee:	4604      	mov	r4, r0
   d6ef0:	f7ff fc58 	bl	d67a4 <__aeabi_ui2d>
   d6ef4:	4b07      	ldr	r3, [pc, #28]	; (d6f14 <__aeabi_d2ulz+0x38>)
   d6ef6:	2200      	movs	r2, #0
   d6ef8:	f7ff fcce 	bl	d6898 <__aeabi_dmul>
   d6efc:	4602      	mov	r2, r0
   d6efe:	460b      	mov	r3, r1
   d6f00:	4630      	mov	r0, r6
   d6f02:	4639      	mov	r1, r7
   d6f04:	f7ff fb10 	bl	d6528 <__aeabi_dsub>
   d6f08:	f7ff ff60 	bl	d6dcc <__aeabi_d2uiz>
   d6f0c:	4621      	mov	r1, r4
   d6f0e:	bdd0      	pop	{r4, r6, r7, pc}
   d6f10:	3df00000 	.word	0x3df00000
   d6f14:	41f00000 	.word	0x41f00000

000d6f18 <__udivmoddi4>:
   d6f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6f1c:	9d08      	ldr	r5, [sp, #32]
   d6f1e:	4604      	mov	r4, r0
   d6f20:	468c      	mov	ip, r1
   d6f22:	2b00      	cmp	r3, #0
   d6f24:	f040 8083 	bne.w	d702e <__udivmoddi4+0x116>
   d6f28:	428a      	cmp	r2, r1
   d6f2a:	4617      	mov	r7, r2
   d6f2c:	d947      	bls.n	d6fbe <__udivmoddi4+0xa6>
   d6f2e:	fab2 f282 	clz	r2, r2
   d6f32:	b142      	cbz	r2, d6f46 <__udivmoddi4+0x2e>
   d6f34:	f1c2 0020 	rsb	r0, r2, #32
   d6f38:	fa24 f000 	lsr.w	r0, r4, r0
   d6f3c:	4091      	lsls	r1, r2
   d6f3e:	4097      	lsls	r7, r2
   d6f40:	ea40 0c01 	orr.w	ip, r0, r1
   d6f44:	4094      	lsls	r4, r2
   d6f46:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d6f4a:	0c23      	lsrs	r3, r4, #16
   d6f4c:	fbbc f6f8 	udiv	r6, ip, r8
   d6f50:	fa1f fe87 	uxth.w	lr, r7
   d6f54:	fb08 c116 	mls	r1, r8, r6, ip
   d6f58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d6f5c:	fb06 f10e 	mul.w	r1, r6, lr
   d6f60:	4299      	cmp	r1, r3
   d6f62:	d909      	bls.n	d6f78 <__udivmoddi4+0x60>
   d6f64:	18fb      	adds	r3, r7, r3
   d6f66:	f106 30ff 	add.w	r0, r6, #4294967295
   d6f6a:	f080 8119 	bcs.w	d71a0 <__udivmoddi4+0x288>
   d6f6e:	4299      	cmp	r1, r3
   d6f70:	f240 8116 	bls.w	d71a0 <__udivmoddi4+0x288>
   d6f74:	3e02      	subs	r6, #2
   d6f76:	443b      	add	r3, r7
   d6f78:	1a5b      	subs	r3, r3, r1
   d6f7a:	b2a4      	uxth	r4, r4
   d6f7c:	fbb3 f0f8 	udiv	r0, r3, r8
   d6f80:	fb08 3310 	mls	r3, r8, r0, r3
   d6f84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d6f88:	fb00 fe0e 	mul.w	lr, r0, lr
   d6f8c:	45a6      	cmp	lr, r4
   d6f8e:	d909      	bls.n	d6fa4 <__udivmoddi4+0x8c>
   d6f90:	193c      	adds	r4, r7, r4
   d6f92:	f100 33ff 	add.w	r3, r0, #4294967295
   d6f96:	f080 8105 	bcs.w	d71a4 <__udivmoddi4+0x28c>
   d6f9a:	45a6      	cmp	lr, r4
   d6f9c:	f240 8102 	bls.w	d71a4 <__udivmoddi4+0x28c>
   d6fa0:	3802      	subs	r0, #2
   d6fa2:	443c      	add	r4, r7
   d6fa4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d6fa8:	eba4 040e 	sub.w	r4, r4, lr
   d6fac:	2600      	movs	r6, #0
   d6fae:	b11d      	cbz	r5, d6fb8 <__udivmoddi4+0xa0>
   d6fb0:	40d4      	lsrs	r4, r2
   d6fb2:	2300      	movs	r3, #0
   d6fb4:	e9c5 4300 	strd	r4, r3, [r5]
   d6fb8:	4631      	mov	r1, r6
   d6fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6fbe:	b902      	cbnz	r2, d6fc2 <__udivmoddi4+0xaa>
   d6fc0:	deff      	udf	#255	; 0xff
   d6fc2:	fab2 f282 	clz	r2, r2
   d6fc6:	2a00      	cmp	r2, #0
   d6fc8:	d150      	bne.n	d706c <__udivmoddi4+0x154>
   d6fca:	1bcb      	subs	r3, r1, r7
   d6fcc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d6fd0:	fa1f f887 	uxth.w	r8, r7
   d6fd4:	2601      	movs	r6, #1
   d6fd6:	fbb3 fcfe 	udiv	ip, r3, lr
   d6fda:	0c21      	lsrs	r1, r4, #16
   d6fdc:	fb0e 331c 	mls	r3, lr, ip, r3
   d6fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d6fe4:	fb08 f30c 	mul.w	r3, r8, ip
   d6fe8:	428b      	cmp	r3, r1
   d6fea:	d907      	bls.n	d6ffc <__udivmoddi4+0xe4>
   d6fec:	1879      	adds	r1, r7, r1
   d6fee:	f10c 30ff 	add.w	r0, ip, #4294967295
   d6ff2:	d202      	bcs.n	d6ffa <__udivmoddi4+0xe2>
   d6ff4:	428b      	cmp	r3, r1
   d6ff6:	f200 80e9 	bhi.w	d71cc <__udivmoddi4+0x2b4>
   d6ffa:	4684      	mov	ip, r0
   d6ffc:	1ac9      	subs	r1, r1, r3
   d6ffe:	b2a3      	uxth	r3, r4
   d7000:	fbb1 f0fe 	udiv	r0, r1, lr
   d7004:	fb0e 1110 	mls	r1, lr, r0, r1
   d7008:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d700c:	fb08 f800 	mul.w	r8, r8, r0
   d7010:	45a0      	cmp	r8, r4
   d7012:	d907      	bls.n	d7024 <__udivmoddi4+0x10c>
   d7014:	193c      	adds	r4, r7, r4
   d7016:	f100 33ff 	add.w	r3, r0, #4294967295
   d701a:	d202      	bcs.n	d7022 <__udivmoddi4+0x10a>
   d701c:	45a0      	cmp	r8, r4
   d701e:	f200 80d9 	bhi.w	d71d4 <__udivmoddi4+0x2bc>
   d7022:	4618      	mov	r0, r3
   d7024:	eba4 0408 	sub.w	r4, r4, r8
   d7028:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d702c:	e7bf      	b.n	d6fae <__udivmoddi4+0x96>
   d702e:	428b      	cmp	r3, r1
   d7030:	d909      	bls.n	d7046 <__udivmoddi4+0x12e>
   d7032:	2d00      	cmp	r5, #0
   d7034:	f000 80b1 	beq.w	d719a <__udivmoddi4+0x282>
   d7038:	2600      	movs	r6, #0
   d703a:	e9c5 0100 	strd	r0, r1, [r5]
   d703e:	4630      	mov	r0, r6
   d7040:	4631      	mov	r1, r6
   d7042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7046:	fab3 f683 	clz	r6, r3
   d704a:	2e00      	cmp	r6, #0
   d704c:	d14a      	bne.n	d70e4 <__udivmoddi4+0x1cc>
   d704e:	428b      	cmp	r3, r1
   d7050:	d302      	bcc.n	d7058 <__udivmoddi4+0x140>
   d7052:	4282      	cmp	r2, r0
   d7054:	f200 80b8 	bhi.w	d71c8 <__udivmoddi4+0x2b0>
   d7058:	1a84      	subs	r4, r0, r2
   d705a:	eb61 0103 	sbc.w	r1, r1, r3
   d705e:	2001      	movs	r0, #1
   d7060:	468c      	mov	ip, r1
   d7062:	2d00      	cmp	r5, #0
   d7064:	d0a8      	beq.n	d6fb8 <__udivmoddi4+0xa0>
   d7066:	e9c5 4c00 	strd	r4, ip, [r5]
   d706a:	e7a5      	b.n	d6fb8 <__udivmoddi4+0xa0>
   d706c:	f1c2 0320 	rsb	r3, r2, #32
   d7070:	fa20 f603 	lsr.w	r6, r0, r3
   d7074:	4097      	lsls	r7, r2
   d7076:	fa01 f002 	lsl.w	r0, r1, r2
   d707a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d707e:	40d9      	lsrs	r1, r3
   d7080:	4330      	orrs	r0, r6
   d7082:	0c03      	lsrs	r3, r0, #16
   d7084:	fbb1 f6fe 	udiv	r6, r1, lr
   d7088:	fa1f f887 	uxth.w	r8, r7
   d708c:	fb0e 1116 	mls	r1, lr, r6, r1
   d7090:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d7094:	fb06 f108 	mul.w	r1, r6, r8
   d7098:	4299      	cmp	r1, r3
   d709a:	fa04 f402 	lsl.w	r4, r4, r2
   d709e:	d909      	bls.n	d70b4 <__udivmoddi4+0x19c>
   d70a0:	18fb      	adds	r3, r7, r3
   d70a2:	f106 3cff 	add.w	ip, r6, #4294967295
   d70a6:	f080 808d 	bcs.w	d71c4 <__udivmoddi4+0x2ac>
   d70aa:	4299      	cmp	r1, r3
   d70ac:	f240 808a 	bls.w	d71c4 <__udivmoddi4+0x2ac>
   d70b0:	3e02      	subs	r6, #2
   d70b2:	443b      	add	r3, r7
   d70b4:	1a5b      	subs	r3, r3, r1
   d70b6:	b281      	uxth	r1, r0
   d70b8:	fbb3 f0fe 	udiv	r0, r3, lr
   d70bc:	fb0e 3310 	mls	r3, lr, r0, r3
   d70c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d70c4:	fb00 f308 	mul.w	r3, r0, r8
   d70c8:	428b      	cmp	r3, r1
   d70ca:	d907      	bls.n	d70dc <__udivmoddi4+0x1c4>
   d70cc:	1879      	adds	r1, r7, r1
   d70ce:	f100 3cff 	add.w	ip, r0, #4294967295
   d70d2:	d273      	bcs.n	d71bc <__udivmoddi4+0x2a4>
   d70d4:	428b      	cmp	r3, r1
   d70d6:	d971      	bls.n	d71bc <__udivmoddi4+0x2a4>
   d70d8:	3802      	subs	r0, #2
   d70da:	4439      	add	r1, r7
   d70dc:	1acb      	subs	r3, r1, r3
   d70de:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   d70e2:	e778      	b.n	d6fd6 <__udivmoddi4+0xbe>
   d70e4:	f1c6 0c20 	rsb	ip, r6, #32
   d70e8:	fa03 f406 	lsl.w	r4, r3, r6
   d70ec:	fa22 f30c 	lsr.w	r3, r2, ip
   d70f0:	431c      	orrs	r4, r3
   d70f2:	fa20 f70c 	lsr.w	r7, r0, ip
   d70f6:	fa01 f306 	lsl.w	r3, r1, r6
   d70fa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   d70fe:	fa21 f10c 	lsr.w	r1, r1, ip
   d7102:	431f      	orrs	r7, r3
   d7104:	0c3b      	lsrs	r3, r7, #16
   d7106:	fbb1 f9fe 	udiv	r9, r1, lr
   d710a:	fa1f f884 	uxth.w	r8, r4
   d710e:	fb0e 1119 	mls	r1, lr, r9, r1
   d7112:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   d7116:	fb09 fa08 	mul.w	sl, r9, r8
   d711a:	458a      	cmp	sl, r1
   d711c:	fa02 f206 	lsl.w	r2, r2, r6
   d7120:	fa00 f306 	lsl.w	r3, r0, r6
   d7124:	d908      	bls.n	d7138 <__udivmoddi4+0x220>
   d7126:	1861      	adds	r1, r4, r1
   d7128:	f109 30ff 	add.w	r0, r9, #4294967295
   d712c:	d248      	bcs.n	d71c0 <__udivmoddi4+0x2a8>
   d712e:	458a      	cmp	sl, r1
   d7130:	d946      	bls.n	d71c0 <__udivmoddi4+0x2a8>
   d7132:	f1a9 0902 	sub.w	r9, r9, #2
   d7136:	4421      	add	r1, r4
   d7138:	eba1 010a 	sub.w	r1, r1, sl
   d713c:	b2bf      	uxth	r7, r7
   d713e:	fbb1 f0fe 	udiv	r0, r1, lr
   d7142:	fb0e 1110 	mls	r1, lr, r0, r1
   d7146:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   d714a:	fb00 f808 	mul.w	r8, r0, r8
   d714e:	45b8      	cmp	r8, r7
   d7150:	d907      	bls.n	d7162 <__udivmoddi4+0x24a>
   d7152:	19e7      	adds	r7, r4, r7
   d7154:	f100 31ff 	add.w	r1, r0, #4294967295
   d7158:	d22e      	bcs.n	d71b8 <__udivmoddi4+0x2a0>
   d715a:	45b8      	cmp	r8, r7
   d715c:	d92c      	bls.n	d71b8 <__udivmoddi4+0x2a0>
   d715e:	3802      	subs	r0, #2
   d7160:	4427      	add	r7, r4
   d7162:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   d7166:	eba7 0708 	sub.w	r7, r7, r8
   d716a:	fba0 8902 	umull	r8, r9, r0, r2
   d716e:	454f      	cmp	r7, r9
   d7170:	46c6      	mov	lr, r8
   d7172:	4649      	mov	r1, r9
   d7174:	d31a      	bcc.n	d71ac <__udivmoddi4+0x294>
   d7176:	d017      	beq.n	d71a8 <__udivmoddi4+0x290>
   d7178:	b15d      	cbz	r5, d7192 <__udivmoddi4+0x27a>
   d717a:	ebb3 020e 	subs.w	r2, r3, lr
   d717e:	eb67 0701 	sbc.w	r7, r7, r1
   d7182:	fa07 fc0c 	lsl.w	ip, r7, ip
   d7186:	40f2      	lsrs	r2, r6
   d7188:	ea4c 0202 	orr.w	r2, ip, r2
   d718c:	40f7      	lsrs	r7, r6
   d718e:	e9c5 2700 	strd	r2, r7, [r5]
   d7192:	2600      	movs	r6, #0
   d7194:	4631      	mov	r1, r6
   d7196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d719a:	462e      	mov	r6, r5
   d719c:	4628      	mov	r0, r5
   d719e:	e70b      	b.n	d6fb8 <__udivmoddi4+0xa0>
   d71a0:	4606      	mov	r6, r0
   d71a2:	e6e9      	b.n	d6f78 <__udivmoddi4+0x60>
   d71a4:	4618      	mov	r0, r3
   d71a6:	e6fd      	b.n	d6fa4 <__udivmoddi4+0x8c>
   d71a8:	4543      	cmp	r3, r8
   d71aa:	d2e5      	bcs.n	d7178 <__udivmoddi4+0x260>
   d71ac:	ebb8 0e02 	subs.w	lr, r8, r2
   d71b0:	eb69 0104 	sbc.w	r1, r9, r4
   d71b4:	3801      	subs	r0, #1
   d71b6:	e7df      	b.n	d7178 <__udivmoddi4+0x260>
   d71b8:	4608      	mov	r0, r1
   d71ba:	e7d2      	b.n	d7162 <__udivmoddi4+0x24a>
   d71bc:	4660      	mov	r0, ip
   d71be:	e78d      	b.n	d70dc <__udivmoddi4+0x1c4>
   d71c0:	4681      	mov	r9, r0
   d71c2:	e7b9      	b.n	d7138 <__udivmoddi4+0x220>
   d71c4:	4666      	mov	r6, ip
   d71c6:	e775      	b.n	d70b4 <__udivmoddi4+0x19c>
   d71c8:	4630      	mov	r0, r6
   d71ca:	e74a      	b.n	d7062 <__udivmoddi4+0x14a>
   d71cc:	f1ac 0c02 	sub.w	ip, ip, #2
   d71d0:	4439      	add	r1, r7
   d71d2:	e713      	b.n	d6ffc <__udivmoddi4+0xe4>
   d71d4:	3802      	subs	r0, #2
   d71d6:	443c      	add	r4, r7
   d71d8:	e724      	b.n	d7024 <__udivmoddi4+0x10c>
   d71da:	bf00      	nop

000d71dc <__aeabi_idiv0>:
   d71dc:	4770      	bx	lr
   d71de:	bf00      	nop

000d71e0 <atoi>:
   d71e0:	220a      	movs	r2, #10
   d71e2:	2100      	movs	r1, #0
   d71e4:	f000 b90a 	b.w	d73fc <strtol>

000d71e8 <__cxa_atexit>:
   d71e8:	b510      	push	{r4, lr}
   d71ea:	4c05      	ldr	r4, [pc, #20]	; (d7200 <__cxa_atexit+0x18>)
   d71ec:	4613      	mov	r3, r2
   d71ee:	b12c      	cbz	r4, d71fc <__cxa_atexit+0x14>
   d71f0:	460a      	mov	r2, r1
   d71f2:	4601      	mov	r1, r0
   d71f4:	2002      	movs	r0, #2
   d71f6:	f3af 8000 	nop.w
   d71fa:	bd10      	pop	{r4, pc}
   d71fc:	4620      	mov	r0, r4
   d71fe:	e7fc      	b.n	d71fa <__cxa_atexit+0x12>
   d7200:	00000000 	.word	0x00000000

000d7204 <memcpy>:
   d7204:	440a      	add	r2, r1
   d7206:	4291      	cmp	r1, r2
   d7208:	f100 33ff 	add.w	r3, r0, #4294967295
   d720c:	d100      	bne.n	d7210 <memcpy+0xc>
   d720e:	4770      	bx	lr
   d7210:	b510      	push	{r4, lr}
   d7212:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7216:	f803 4f01 	strb.w	r4, [r3, #1]!
   d721a:	4291      	cmp	r1, r2
   d721c:	d1f9      	bne.n	d7212 <memcpy+0xe>
   d721e:	bd10      	pop	{r4, pc}

000d7220 <memmove>:
   d7220:	4288      	cmp	r0, r1
   d7222:	b510      	push	{r4, lr}
   d7224:	eb01 0402 	add.w	r4, r1, r2
   d7228:	d902      	bls.n	d7230 <memmove+0x10>
   d722a:	4284      	cmp	r4, r0
   d722c:	4623      	mov	r3, r4
   d722e:	d807      	bhi.n	d7240 <memmove+0x20>
   d7230:	1e43      	subs	r3, r0, #1
   d7232:	42a1      	cmp	r1, r4
   d7234:	d008      	beq.n	d7248 <memmove+0x28>
   d7236:	f811 2b01 	ldrb.w	r2, [r1], #1
   d723a:	f803 2f01 	strb.w	r2, [r3, #1]!
   d723e:	e7f8      	b.n	d7232 <memmove+0x12>
   d7240:	4402      	add	r2, r0
   d7242:	4601      	mov	r1, r0
   d7244:	428a      	cmp	r2, r1
   d7246:	d100      	bne.n	d724a <memmove+0x2a>
   d7248:	bd10      	pop	{r4, pc}
   d724a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d724e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d7252:	e7f7      	b.n	d7244 <memmove+0x24>

000d7254 <memset>:
   d7254:	4402      	add	r2, r0
   d7256:	4603      	mov	r3, r0
   d7258:	4293      	cmp	r3, r2
   d725a:	d100      	bne.n	d725e <memset+0xa>
   d725c:	4770      	bx	lr
   d725e:	f803 1b01 	strb.w	r1, [r3], #1
   d7262:	e7f9      	b.n	d7258 <memset+0x4>

000d7264 <srand>:
   d7264:	b538      	push	{r3, r4, r5, lr}
   d7266:	4b0d      	ldr	r3, [pc, #52]	; (d729c <srand+0x38>)
   d7268:	681d      	ldr	r5, [r3, #0]
   d726a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d726c:	4604      	mov	r4, r0
   d726e:	b97b      	cbnz	r3, d7290 <srand+0x2c>
   d7270:	2018      	movs	r0, #24
   d7272:	f7fd ff35 	bl	d50e0 <malloc>
   d7276:	4a0a      	ldr	r2, [pc, #40]	; (d72a0 <srand+0x3c>)
   d7278:	4b0a      	ldr	r3, [pc, #40]	; (d72a4 <srand+0x40>)
   d727a:	63a8      	str	r0, [r5, #56]	; 0x38
   d727c:	e9c0 2300 	strd	r2, r3, [r0]
   d7280:	4b09      	ldr	r3, [pc, #36]	; (d72a8 <srand+0x44>)
   d7282:	6083      	str	r3, [r0, #8]
   d7284:	230b      	movs	r3, #11
   d7286:	8183      	strh	r3, [r0, #12]
   d7288:	2201      	movs	r2, #1
   d728a:	2300      	movs	r3, #0
   d728c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7290:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7292:	2200      	movs	r2, #0
   d7294:	611c      	str	r4, [r3, #16]
   d7296:	615a      	str	r2, [r3, #20]
   d7298:	bd38      	pop	{r3, r4, r5, pc}
   d729a:	bf00      	nop
   d729c:	2003e4e8 	.word	0x2003e4e8
   d72a0:	abcd330e 	.word	0xabcd330e
   d72a4:	e66d1234 	.word	0xe66d1234
   d72a8:	0005deec 	.word	0x0005deec

000d72ac <strcpy>:
   d72ac:	4603      	mov	r3, r0
   d72ae:	f811 2b01 	ldrb.w	r2, [r1], #1
   d72b2:	f803 2b01 	strb.w	r2, [r3], #1
   d72b6:	2a00      	cmp	r2, #0
   d72b8:	d1f9      	bne.n	d72ae <strcpy+0x2>
   d72ba:	4770      	bx	lr

000d72bc <strdup>:
   d72bc:	4b02      	ldr	r3, [pc, #8]	; (d72c8 <strdup+0xc>)
   d72be:	4601      	mov	r1, r0
   d72c0:	6818      	ldr	r0, [r3, #0]
   d72c2:	f000 b803 	b.w	d72cc <_strdup_r>
   d72c6:	bf00      	nop
   d72c8:	2003e4e8 	.word	0x2003e4e8

000d72cc <_strdup_r>:
   d72cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d72ce:	4604      	mov	r4, r0
   d72d0:	4608      	mov	r0, r1
   d72d2:	460d      	mov	r5, r1
   d72d4:	f000 f80f 	bl	d72f6 <strlen>
   d72d8:	1c42      	adds	r2, r0, #1
   d72da:	4611      	mov	r1, r2
   d72dc:	4620      	mov	r0, r4
   d72de:	9201      	str	r2, [sp, #4]
   d72e0:	f7fd ff1e 	bl	d5120 <_malloc_r>
   d72e4:	4604      	mov	r4, r0
   d72e6:	b118      	cbz	r0, d72f0 <_strdup_r+0x24>
   d72e8:	9a01      	ldr	r2, [sp, #4]
   d72ea:	4629      	mov	r1, r5
   d72ec:	f7ff ff8a 	bl	d7204 <memcpy>
   d72f0:	4620      	mov	r0, r4
   d72f2:	b003      	add	sp, #12
   d72f4:	bd30      	pop	{r4, r5, pc}

000d72f6 <strlen>:
   d72f6:	4603      	mov	r3, r0
   d72f8:	f813 2b01 	ldrb.w	r2, [r3], #1
   d72fc:	2a00      	cmp	r2, #0
   d72fe:	d1fb      	bne.n	d72f8 <strlen+0x2>
   d7300:	1a18      	subs	r0, r3, r0
   d7302:	3801      	subs	r0, #1
   d7304:	4770      	bx	lr
	...

000d7308 <_strtol_l.isra.0>:
   d7308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d730c:	4e3a      	ldr	r6, [pc, #232]	; (d73f8 <_strtol_l.isra.0+0xf0>)
   d730e:	4686      	mov	lr, r0
   d7310:	468c      	mov	ip, r1
   d7312:	4660      	mov	r0, ip
   d7314:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d7318:	5da5      	ldrb	r5, [r4, r6]
   d731a:	f015 0508 	ands.w	r5, r5, #8
   d731e:	d1f8      	bne.n	d7312 <_strtol_l.isra.0+0xa>
   d7320:	2c2d      	cmp	r4, #45	; 0x2d
   d7322:	d133      	bne.n	d738c <_strtol_l.isra.0+0x84>
   d7324:	f89c 4000 	ldrb.w	r4, [ip]
   d7328:	f04f 0801 	mov.w	r8, #1
   d732c:	f100 0c02 	add.w	ip, r0, #2
   d7330:	2b00      	cmp	r3, #0
   d7332:	d05c      	beq.n	d73ee <_strtol_l.isra.0+0xe6>
   d7334:	2b10      	cmp	r3, #16
   d7336:	d10c      	bne.n	d7352 <_strtol_l.isra.0+0x4a>
   d7338:	2c30      	cmp	r4, #48	; 0x30
   d733a:	d10a      	bne.n	d7352 <_strtol_l.isra.0+0x4a>
   d733c:	f89c 0000 	ldrb.w	r0, [ip]
   d7340:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7344:	2858      	cmp	r0, #88	; 0x58
   d7346:	d14d      	bne.n	d73e4 <_strtol_l.isra.0+0xdc>
   d7348:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d734c:	2310      	movs	r3, #16
   d734e:	f10c 0c02 	add.w	ip, ip, #2
   d7352:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d7356:	3f01      	subs	r7, #1
   d7358:	2600      	movs	r6, #0
   d735a:	fbb7 f9f3 	udiv	r9, r7, r3
   d735e:	4630      	mov	r0, r6
   d7360:	fb03 7a19 	mls	sl, r3, r9, r7
   d7364:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d7368:	2d09      	cmp	r5, #9
   d736a:	d818      	bhi.n	d739e <_strtol_l.isra.0+0x96>
   d736c:	462c      	mov	r4, r5
   d736e:	42a3      	cmp	r3, r4
   d7370:	dd24      	ble.n	d73bc <_strtol_l.isra.0+0xb4>
   d7372:	1c75      	adds	r5, r6, #1
   d7374:	d007      	beq.n	d7386 <_strtol_l.isra.0+0x7e>
   d7376:	4581      	cmp	r9, r0
   d7378:	d31d      	bcc.n	d73b6 <_strtol_l.isra.0+0xae>
   d737a:	d101      	bne.n	d7380 <_strtol_l.isra.0+0x78>
   d737c:	45a2      	cmp	sl, r4
   d737e:	db1a      	blt.n	d73b6 <_strtol_l.isra.0+0xae>
   d7380:	fb00 4003 	mla	r0, r0, r3, r4
   d7384:	2601      	movs	r6, #1
   d7386:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d738a:	e7eb      	b.n	d7364 <_strtol_l.isra.0+0x5c>
   d738c:	2c2b      	cmp	r4, #43	; 0x2b
   d738e:	bf08      	it	eq
   d7390:	f89c 4000 	ldrbeq.w	r4, [ip]
   d7394:	46a8      	mov	r8, r5
   d7396:	bf08      	it	eq
   d7398:	f100 0c02 	addeq.w	ip, r0, #2
   d739c:	e7c8      	b.n	d7330 <_strtol_l.isra.0+0x28>
   d739e:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d73a2:	2d19      	cmp	r5, #25
   d73a4:	d801      	bhi.n	d73aa <_strtol_l.isra.0+0xa2>
   d73a6:	3c37      	subs	r4, #55	; 0x37
   d73a8:	e7e1      	b.n	d736e <_strtol_l.isra.0+0x66>
   d73aa:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d73ae:	2d19      	cmp	r5, #25
   d73b0:	d804      	bhi.n	d73bc <_strtol_l.isra.0+0xb4>
   d73b2:	3c57      	subs	r4, #87	; 0x57
   d73b4:	e7db      	b.n	d736e <_strtol_l.isra.0+0x66>
   d73b6:	f04f 36ff 	mov.w	r6, #4294967295
   d73ba:	e7e4      	b.n	d7386 <_strtol_l.isra.0+0x7e>
   d73bc:	1c73      	adds	r3, r6, #1
   d73be:	d106      	bne.n	d73ce <_strtol_l.isra.0+0xc6>
   d73c0:	2322      	movs	r3, #34	; 0x22
   d73c2:	f8ce 3000 	str.w	r3, [lr]
   d73c6:	4638      	mov	r0, r7
   d73c8:	b942      	cbnz	r2, d73dc <_strtol_l.isra.0+0xd4>
   d73ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d73ce:	f1b8 0f00 	cmp.w	r8, #0
   d73d2:	d000      	beq.n	d73d6 <_strtol_l.isra.0+0xce>
   d73d4:	4240      	negs	r0, r0
   d73d6:	2a00      	cmp	r2, #0
   d73d8:	d0f7      	beq.n	d73ca <_strtol_l.isra.0+0xc2>
   d73da:	b10e      	cbz	r6, d73e0 <_strtol_l.isra.0+0xd8>
   d73dc:	f10c 31ff 	add.w	r1, ip, #4294967295
   d73e0:	6011      	str	r1, [r2, #0]
   d73e2:	e7f2      	b.n	d73ca <_strtol_l.isra.0+0xc2>
   d73e4:	2430      	movs	r4, #48	; 0x30
   d73e6:	2b00      	cmp	r3, #0
   d73e8:	d1b3      	bne.n	d7352 <_strtol_l.isra.0+0x4a>
   d73ea:	2308      	movs	r3, #8
   d73ec:	e7b1      	b.n	d7352 <_strtol_l.isra.0+0x4a>
   d73ee:	2c30      	cmp	r4, #48	; 0x30
   d73f0:	d0a4      	beq.n	d733c <_strtol_l.isra.0+0x34>
   d73f2:	230a      	movs	r3, #10
   d73f4:	e7ad      	b.n	d7352 <_strtol_l.isra.0+0x4a>
   d73f6:	bf00      	nop
   d73f8:	000d76b6 	.word	0x000d76b6

000d73fc <strtol>:
   d73fc:	4613      	mov	r3, r2
   d73fe:	460a      	mov	r2, r1
   d7400:	4601      	mov	r1, r0
   d7402:	4802      	ldr	r0, [pc, #8]	; (d740c <strtol+0x10>)
   d7404:	6800      	ldr	r0, [r0, #0]
   d7406:	f7ff bf7f 	b.w	d7308 <_strtol_l.isra.0>
   d740a:	bf00      	nop
   d740c:	2003e4e8 	.word	0x2003e4e8

000d7410 <dynalib_user>:
   d7410:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   d7420:	00000000 6e617453 676e6964 2e796220     ....Standing by.
   d7430:	22002e2e 63616562 44496e6f 2c313a22     ..."beaconID":1,
   d7440:	6f6d2200 75747369 654c6572 226c6576     ."moistureLevel"
   d7450:	6722003a 614c6f65 003a2274 6f656722     :."geoLat":."geo
   d7460:	676e6f4c 22003a22 74736964 65636e61     Long":."distance
   d7470:	76617254 64656c65 7b003a22 63007d00     Traveled":.{.}.c
   d7480:	6f6e6e61 72632074 65746165 64747320     annot create std
   d7490:	65643a3a 20657571 6772616c 74207265     ::deque larger t
   d74a0:	206e6168 5f78616d 657a6973 4e002928     han max_size().N
   d74b0:	6e69206f 6e726574 63207465 6e656e6f     o internet conen
   d74c0:	6f697463 73202c6e 6e697661 61642067     ction, saving da
   d74d0:	6c206174 6c61636f 2e2e796c 7550002e     ta locally....Pu
   d74e0:	73696c62 676e6968 636f6c20 64206c61     blishing local d
   d74f0:	3a617461 002e2e2e 64746567 00617461     ata:....getdata.
   d7500:	73696f4d 65727574 646f4d20 49002165     Moisture Mode!.I
   d7510:	72742d6e 69736e61 47002174 434d5250     n-transit!.GPRMC
   d7520:	47504700 00004147                       .GPGGA..

000d7528 <_ZTVN5spark13EthernetClassE>:
	...
   d7530:	000d519f 000d5195 000d518b 000d5181     .Q...Q...Q...Q..
   d7540:	000d5175 000d5169 000d622d 000d6235     uQ..iQ..-b..5b..
   d7550:	000d515d 000d5155 000d514b 000d5141     ]Q..UQ..KQ..AQ..
   d7560:	000d6265 00707061 252d5925 64252d6d     eb..app.%Y-%m-%d
   d7570:	3a482554 253a4d25 007a2553 74637361     T%H:%M:%S%z.asct
   d7580:	00656d69                                ime.

000d7584 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d758c:	000d5871 000d5877 000d58b5 000d5885     qX..wX...X...X..
   d759c:	000d5873                                sX..

000d75a0 <_ZTV9IPAddress>:
	...
   d75a8:	000d5db9 000d5da9 000d5dab              .]...]...]..

000d75b4 <_ZTV9USBSerial>:
	...
   d75bc:	000d5e99 000d5f01 000d5ed7 000d5621     .^..._...^..!V..
   d75cc:	000d5ec9 000d5e9b 000d5eab 000d5efb     .^...^...^...^..
   d75dc:	000d5ebb 000d5e95                       .^...^..

000d75e4 <_ZTVN5spark13CellularClassE>:
	...
   d75ec:	000d6003 000d5ff9 000d5fef 000d5fa5     .`..._..._..._..
   d75fc:	000d5fe3 000d5fd7 000d622d 000d6235     ._..._..-b..5b..
   d760c:	000d5fcb 000d5fc3 000d5fb9 000d5faf     ._..._..._..._..
   d761c:	000d6265                                eb..

000d7620 <_ZTV11USARTSerial>:
	...
   d7628:	000d603d 000d60a9 000d6081 000d5621     =`...`...`..!V..
   d7638:	000d6051 000d606d 000d605f 000d607b     Q`..m`.._`..{`..
   d7648:	000d603f 000d6043                       ?`..C`..

000d7650 <_ZTV7TwoWire>:
	...
   d7658:	000d6171 000d61bb 000d6193 000d6173     qa...a...a..sa..
   d7668:	000d619b 000d61a3 000d61ab 000d61b3     .a...a...a...a..

000d7678 <_ZTVN5spark12NetworkClassE>:
	...
   d7680:	000d61ed 000d61f7 000d6201 000d620b     .a...a...b...b..
   d7690:	000d6215 000d6221 000d622d 000d6235     .b..!b..-b..5b..
   d76a0:	000d623d 000d6249 000d6251 000d625b     =b..Ib..Qb..[b..
   d76b0:	000d6265                                eb..

000d76b4 <_ZSt7nothrow>:
	...

000d76b5 <_ctype_>:
   d76b5:	20202000 20202020 28282020 20282828     .         ((((( 
   d76c5:	20202020 20202020 20202020 20202020                     
   d76d5:	10108820 10101010 10101010 10101010      ...............
   d76e5:	04040410 04040404 10040404 10101010     ................
   d76f5:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d7705:	01010101 01010101 01010101 10101010     ................
   d7715:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d7725:	02020202 02020202 02020202 10101010     ................
   d7735:	00000020 00000000 00000000 00000000      ...............
	...

000d77b6 <link_const_variable_data_end>:
	...

000d77b8 <link_constructors_location>:
   d77b8:	000d4809 	.word	0x000d4809
   d77bc:	000d51a9 	.word	0x000d51a9
   d77c0:	000d51f1 	.word	0x000d51f1
   d77c4:	000d55f9 	.word	0x000d55f9
   d77c8:	000d56e9 	.word	0x000d56e9
   d77cc:	000d56f9 	.word	0x000d56f9
   d77d0:	000d5731 	.word	0x000d5731
   d77d4:	000d600d 	.word	0x000d600d
   d77d8:	000d6345 	.word	0x000d6345

000d77dc <link_constructors_end>:
   d77dc:	00000000 	.word	0x00000000
